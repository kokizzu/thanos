// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const QMARK = 57353
const COLON = 57354
const DOT2 = 57355
const DOT3 = 57356
const LOGICALOR = 57357
const LOGICALAND = 57358
const SPACESHIP = 57359
const EQ = 57360
const NEQ = 57361
const MATCH = 57362
const NOTMATCH = 57363
const GT = 57364
const GTE = 57365
const LT = 57366
const LTE = 57367
const AND = 57368
const PIPE = 57369
const CARET = 57370
const LSHIFT = 57371
const RSHIFT = 57372
const PLUS = 57373
const MINUS = 57374
const ASTERISK = 57375
const SLASH = 57376
const MODULO = 57377
const UNARY_NUM = 57378
const POW = 57379
const BANG = 57380
const NIL = 57381
const SYMBOL = 57382
const STRING = 57383
const INT = 57384
const FLOAT = 57385
const TRUE = 57386
const FALSE = 57387
const CLASS = 57388
const MODULE = 57389
const DEF = 57390
const END = 57391
const IF = 57392
const IF_MOD = 57393
const UNLESS = 57394
const UNLESS_MOD = 57395
const BEGIN = 57396
const RESCUE = 57397
const RESCUE_MOD = 57398
const THEN = 57399
const ELSE = 57400
const WHILE = 57401
const WHILE_MOD = 57402
const RETURN = 57403
const YIELD = 57404
const SELF = 57405
const CONSTANT = 57406
const ENSURE = 57407
const ELSIF = 57408
const CASE = 57409
const WHEN = 57410
const UNTIL = 57411
const UNTIL_MOD = 57412
const FOR = 57413
const BREAK = 57414
const NEXT = 57415
const SUPER = 57416
const ALIAS = 57417
const DO = 57418
const PRIVATE = 57419
const PROTECTED = 57420
const IVAR = 57421
const CVAR = 57422
const GVAR = 57423
const METHODIDENT = 57424
const IDENT = 57425
const COMMENT = 57426
const LABEL = 57427
const DOT = 57428
const LBRACE = 57429
const RBRACE = 57430
const NEWLINE = 57431
const COMMA = 57432
const STRINGBEG = 57433
const STRINGEND = 57434
const INTERPBEG = 57435
const INTERPEND = 57436
const STRINGBODY = 57437
const REGEXBEG = 57438
const REGEXEND = 57439
const REGEXPOPT = 57440
const RAWSTRINGBEG = 57441
const RAWSTRINGEND = 57442
const SEMICOLON = 57443
const LBRACKET = 57444
const LBRACKETSTART = 57445
const RBRACKET = 57446
const LPAREN = 57447
const LPARENSTART = 57448
const RPAREN = 57449
const HASHROCKET = 57450
const SCOPE = 57451

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 12,
	5, 40,
	6, 196,
	7, 196,
	8, 196,
	9, 196,
	10, 196,
	90, 37,
	-2, 194,
	-1, 13,
	5, 41,
	6, 197,
	7, 197,
	8, 197,
	9, 197,
	10, 197,
	90, 38,
	-2, 195,
	-1, 20,
	36, 228,
	38, 228,
	39, 228,
	40, 228,
	42, 228,
	43, 228,
	44, 228,
	45, 228,
	46, 228,
	48, 228,
	50, 228,
	52, 228,
	59, 228,
	62, 228,
	63, 228,
	64, 228,
	67, 228,
	69, 228,
	79, 228,
	80, 228,
	81, 228,
	82, 228,
	83, 228,
	85, 228,
	87, 228,
	91, 228,
	96, 228,
	99, 228,
	103, 228,
	105, 228,
	106, 228,
	-2, 185,
	-1, 23,
	36, 229,
	38, 229,
	39, 229,
	40, 229,
	42, 229,
	43, 229,
	44, 229,
	45, 229,
	46, 229,
	48, 229,
	50, 229,
	52, 229,
	59, 229,
	62, 229,
	63, 229,
	64, 229,
	67, 229,
	69, 229,
	79, 229,
	80, 229,
	81, 229,
	82, 229,
	83, 229,
	85, 229,
	87, 229,
	91, 229,
	96, 229,
	99, 229,
	103, 229,
	105, 229,
	106, 229,
	-2, 188,
	-1, 29,
	86, 143,
	102, 143,
	109, 143,
	-2, 95,
	-1, 117,
	5, 37,
	90, 37,
	-2, 194,
	-1, 118,
	5, 38,
	90, 38,
	-2, 195,
	-1, 127,
	5, 40,
	6, 196,
	7, 196,
	8, 196,
	9, 196,
	10, 196,
	-2, 194,
	-1, 128,
	5, 41,
	6, 197,
	7, 197,
	8, 197,
	9, 197,
	10, 197,
	-2, 195,
	-1, 209,
	90, 115,
	-2, 118,
	-1, 216,
	90, 102,
	-2, 105,
	-1, 224,
	5, 43,
	-2, 228,
	-1, 227,
	13, 0,
	14, 0,
	-2, 70,
	-1, 228,
	13, 0,
	14, 0,
	-2, 71,
	-1, 238,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 83,
	-1, 239,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 85,
	-1, 240,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 86,
	-1, 241,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 87,
	-1, 242,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 88,
	-1, 319,
	5, 42,
	90, 39,
	-2, 157,
	-1, 368,
	90, 116,
	-2, 120,
	-1, 371,
	5, 39,
	90, 39,
	-2, 157,
	-1, 372,
	5, 42,
	-2, 157,
}

const yyPrivate = 57344

const yyLast = 1538

var yyAct = [...]int{
	18, 257, 375, 319, 361, 5, 307, 162, 308, 276,
	304, 376, 221, 313, 129, 14, 309, 161, 29, 145,
	286, 71, 378, 305, 306, 266, 165, 138, 272, 353,
	81, 213, 256, 124, 119, 69, 327, 166, 120, 251,
	88, 135, 135, 135, 260, 142, 369, 259, 251, 299,
	88, 169, 135, 135, 14, 388, 255, 60, 363, 387,
	271, 137, 89, 89, 250, 14, 87, 70, 364, 373,
	360, 89, 74, 89, 122, 51, 321, 73, 126, 10,
	135, 216, 220, 317, 157, 14, 215, 215, 135, 72,
	270, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 219, 51, 249, 158, 172, 10, 51,
	51, 51, 51, 51, 252, 51, 125, 7, 258, 10,
	17, 298, 374, 295, 130, 301, 316, 278, 9, 314,
	199, 135, 201, 135, 334, 51, 172, 262, 265, 10,
	51, 51, 51, 51, 51, 51, 51, 254, 263, 10,
	10, 280, 279, 284, 74, 200, 7, 135, 14, 73,
	14, 75, 277, 76, 277, 269, 282, 7, 275, 293,
	77, 72, 264, 151, 151, 151, 151, 151, 222, 315,
	78, 212, 285, 128, 13, 149, 312, 7, 315, 292,
	297, 298, 314, 295, 262, 261, 148, 217, 217, 258,
	206, 214, 214, 118, 151, 151, 151, 151, 303, 337,
	314, 366, 208, 320, 158, 127, 12, 348, 51, 4,
	51, 143, 10, 13, 10, 283, 288, 288, 379, 352,
	143, 167, 226, 74, 13, 117, 377, 160, 73, 324,
	379, 135, 323, 168, 220, 220, 135, 61, 340, 394,
	72, 315, 135, 325, 13, 12, 135, 135, 326, 131,
	401, 135, 135, 218, 225, 398, 12, 312, 385, 315,
	7, 335, 7, 75, 339, 76, 219, 341, 14, 135,
	332, 14, 77, 329, 14, 146, 12, 381, 336, 329,
	198, 331, 78, 211, 14, 141, 344, 351, 349, 172,
	347, 362, 170, 355, 358, 345, 135, 354, 135, 220,
	197, 343, 135, 342, 215, 338, 359, 320, 320, 371,
	372, 268, 291, 97, 171, 274, 134, 139, 153, 67,
	68, 332, 94, 95, 96, 111, 97, 13, 51, 13,
	290, 51, 10, 380, 51, 10, 382, 164, 10, 370,
	384, 365, 33, 14, 51, 318, 135, 390, 10, 392,
	390, 397, 277, 253, 386, 209, 134, 123, 395, 12,
	393, 12, 116, 392, 135, 391, 155, 400, 223, 135,
	80, 389, 402, 51, 14, 79, 404, 10, 1, 14,
	7, 403, 136, 7, 50, 320, 7, 406, 147, 405,
	408, 278, 346, 407, 163, 3, 7, 287, 310, 273,
	14, 277, 302, 51, 311, 207, 132, 10, 322, 133,
	19, 144, 112, 114, 113, 115, 267, 11, 74, 6,
	144, 144, 154, 73, 383, 217, 2, 53, 36, 214,
	35, 31, 51, 43, 51, 72, 37, 30, 10, 51,
	38, 34, 54, 10, 55, 281, 8, 13, 210, 210,
	13, 289, 159, 13, 300, 7, 58, 296, 294, 56,
	51, 173, 0, 13, 10, 0, 0, 150, 152, 0,
	0, 156, 357, 0, 92, 93, 94, 95, 96, 12,
	97, 0, 12, 0, 0, 12, 7, 0, 0, 0,
	0, 7, 0, 0, 0, 12, 399, 0, 202, 203,
	204, 205, 0, 0, 356, 82, 83, 84, 85, 86,
	0, 144, 7, 106, 107, 92, 93, 94, 95, 96,
	0, 97, 13, 112, 114, 113, 115, 100, 98, 99,
	106, 107, 92, 93, 94, 95, 96, 328, 97, 0,
	0, 139, 330, 0, 0, 0, 333, 139, 0, 0,
	0, 0, 0, 13, 12, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 134, 100, 98, 99, 106, 107,
	92, 93, 94, 95, 96, 0, 97, 0, 0, 13,
	0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
	12, 367, 0, 368, 0, 0, 0, 333, 98, 99,
	106, 107, 92, 93, 94, 95, 96, 0, 97, 0,
	0, 12, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 32, 25, 63, 0, 67, 68, 27, 28, 49,
	0, 59, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 396, 46, 0, 52, 42, 26, 23, 0, 0,
	48, 0, 47, 0, 0, 0, 0, 350, 0, 328,
	15, 16, 21, 24, 22, 66, 20, 0, 0, 0,
	41, 0, 199, 0, 64, 0, 0, 0, 0, 65,
	0, 0, 57, 0, 0, 0, 40, 0, 62, 39,
	32, 25, 63, 0, 67, 68, 27, 28, 49, 0,
	59, 0, 44, 0, 45, 0, 0, 0, 0, 0,
	0, 46, 0, 52, 42, 26, 23, 0, 0, 48,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 21, 24, 22, 66, 20, 74, 0, 0, 41,
	0, 73, 0, 64, 0, 0, 0, 0, 65, 0,
	0, 57, 0, 72, 0, 40, 0, 62, 39, 32,
	25, 63, 0, 67, 68, 27, 28, 49, 0, 59,
	0, 44, 0, 45, 0, 0, 0, 0, 0, 0,
	46, 0, 52, 42, 26, 23, 0, 0, 48, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 15, 16,
	21, 24, 22, 66, 20, 0, 0, 0, 41, 0,
	0, 0, 64, 0, 0, 0, 0, 65, 0, 0,
	57, 0, 0, 0, 40, 0, 62, 39, 32, 25,
	63, 0, 67, 68, 27, 28, 49, 0, 59, 0,
	44, 0, 45, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 121, 26, 23, 0, 0, 48, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	24, 22, 66, 20, 0, 140, 0, 41, 0, 258,
	0, 64, 0, 0, 0, 0, 65, 0, 0, 57,
	0, 0, 0, 40, 0, 62, 39, 32, 25, 63,
	0, 67, 68, 27, 28, 49, 0, 59, 0, 44,
	0, 45, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 121, 26, 23, 0, 0, 48, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
	22, 66, 20, 0, 140, 0, 41, 0, 0, 0,
	64, 0, 0, 0, 0, 65, 0, 0, 57, 0,
	0, 0, 40, 0, 166, 39, 62, 0, 32, 25,
	63, 0, 67, 68, 27, 28, 49, 0, 59, 0,
	44, 0, 45, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 121, 26, 23, 0, 0, 48, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	24, 22, 66, 20, 0, 140, 0, 41, 0, 0,
	0, 64, 0, 0, 0, 0, 65, 0, 0, 57,
	0, 0, 0, 40, 0, 142, 39, 62, 0, 32,
	25, 63, 0, 67, 68, 27, 28, 49, 0, 59,
	0, 44, 0, 45, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 121, 26, 23, 0, 0, 48, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	21, 24, 22, 66, 20, 0, 140, 0, 41, 0,
	0, 0, 64, 0, 0, 0, 0, 65, 0, 0,
	57, 0, 0, 0, 40, 0, 62, 39, 32, 25,
	63, 0, 67, 68, 27, 28, 49, 0, 59, 0,
	44, 0, 45, 0, 0, 0, 0, 0, 0, 46,
	0, 52, 42, 26, 23, 0, 0, 48, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	24, 22, 66, 20, 0, 0, 0, 41, 0, 0,
	0, 64, 0, 0, 0, 0, 65, 0, 0, 57,
	0, 0, 0, 40, 0, 62, 39, 32, 25, 63,
	0, 67, 68, 27, 28, 49, 0, 59, 0, 44,
	0, 45, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 121, 26, 23, 0, 0, 48, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
	22, 66, 20, 0, 0, 0, 41, 0, 0, 0,
	64, 0, 0, 0, 0, 65, 0, 0, 57, 0,
	62, 0, 40, 25, 63, 39, 67, 68, 27, 28,
	49, 0, 59, 0, 44, 0, 45, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 121, 26, 23, 0,
	0, 48, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 24, 22, 66, 20, 0, 0,
	0, 41, 0, 0, 0, 64, 0, 0, 0, 0,
	65, 0, 0, 57, 0, 0, 0, 40, 0, 110,
	39, 90, 91, 109, 108, 101, 102, 103, 104, 105,
	112, 114, 113, 115, 100, 98, 99, 106, 107, 92,
	93, 94, 95, 96, 0, 97, 179, 180, 187, 181,
	182, 183, 184, 185, 186, 178, 176, 177, 188, 189,
	190, 191, 192, 193, 194, 0, 195, 196, 179, 180,
	187, 181, 182, 183, 184, 185, 186, 178, 176, 177,
	188, 189, 190, 191, 192, 193, 194, 0, 195, 196,
	0, 0, 0, 175, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 174, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 224, 110, 0, 90, 91, 109,
	108, 101, 102, 103, 104, 105, 112, 114, 113, 115,
	100, 98, 99, 106, 107, 92, 93, 94, 95, 96,
	0, 97, 109, 108, 101, 102, 103, 104, 105, 112,
	114, 113, 115, 100, 98, 99, 106, 107, 92, 93,
	94, 95, 96, 0, 97, 108, 101, 102, 103, 104,
	105, 112, 114, 113, 115, 100, 98, 99, 106, 107,
	92, 93, 94, 95, 96, 0, 97, 101, 102, 103,
	104, 105, 112, 114, 113, 115, 100, 98, 99, 106,
	107, 92, 93, 94, 95, 96, 0, 97,
}

var yyPact = [...]int{
	741, -1000, -1000, -12, 232, -1000, 390, 385, -1000, -1000,
	519, -1000, -1000, -1000, -36, -1000, -1000, -1000, 1434, 1224,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 410, 1159, 44, -1000, -1000, -1000, -1000, -1000, 741,
	1159, 1021, 950, 119, 1090, 1090, 1090, 1090, 672, 183,
	741, 879, 1021, -1000, -1000, -1000, -1000, -44, -1000, 1339,
	-1000, -1000, 297, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	603, -1000, -1000, 81, 53, 1090, 1090, 1090, 1090, 1090,
	1090, 1090, -1000, -1000, -1000, -1000, -1000, 1021, 1361, 178,
	1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
	1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
	1159, 1159, -1000, -1000, -1000, -1000, 25, -1000, -1000, -38,
	-1000, -60, -68, 1159, -1000, 368, 519, -1000, -1000, -46,
	-1000, 120, -57, 115, -1000, 1434, 70, 58, -1000, -83,
	1159, -1000, 810, -1000, 0, -30, -83, -1000, 308, 308,
	80, -1000, 80, 741, 159, 741, -12, 168, 51, 326,
	-1000, 283, -1000, -12, -1000, -1000, 1021, -1000, 108, -51,
	38, 113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 232, -1000,
	47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-7, -1000, -1000, -1000, -1000, -1000, 1434, 360, -1000, -1000,
	1434, 39, -1000, -14, -1000, -68, -1000, 1457, 1457, 309,
	309, 296, 296, 296, 296, 504, 504, 591, 521, 521,
	521, 521, 521, 463, 463, 1500, 1479, 1318, 559, -1000,
	1021, 1339, 559, 1159, 1159, 1021, -1000, -71, -1000, -1000,
	-1000, 1159, -1000, -1000, -1000, 1021, 1159, -1000, 39, -1000,
	1021, 1021, 56, 741, 136, 276, 741, 201, -1000, 741,
	274, -1000, -1000, -1000, 272, 168, 266, 169, 1159, 741,
	175, -1000, -1000, -78, -1000, -1000, -1000, -1000, 1224, -1000,
	-1000, -1000, -1000, 194, -12, -20, -32, -1000, -1000, -1000,
	-22, -1000, 356, -1000, 138, 1159, -1000, 1159, 1090, -1000,
	-58, 1021, -1000, -1000, 347, 39, 39, -1000, -1000, -1000,
	-1000, -1000, -30, -83, -1000, -1000, 42, -1000, -1000, 180,
	-1000, 192, -1000, -1000, 248, -1000, -1000, -1000, 741, -1000,
	354, 229, -12, -1000, -35, -47, -1000, -1000, 39, -1000,
	194, -1000, -1000, 176, 104, 1159, -1000, -1000, -1000, -1000,
	1159, -1000, -1000, -1000, 136, 226, -1000, 1090, -1000, 741,
	221, -1000, -1000, 1159, 741, -1000, -1000, -1000, 1021, -1000,
	-1000, -32, -1000, -1000, 356, -1000, -1000, 1434, -1000, 80,
	-1000, -1000, -1000, 39, -1000, 741, -1000, 180, -1000,
}

var yyPgo = [...]int{
	0, 74, 57, 32, 481, 274, 9, 21, 345, 3,
	479, 478, 253, 477, 476, 474, 472, 30, 471, 466,
	465, 464, 462, 225, 193, 257, 138, 0, 18, 461,
	126, 460, 78, 14, 442, 5, 191, 457, 130, 456,
	338, 31, 295, 453, 229, 2, 11, 22, 451, 450,
	448, 362, 447, 7, 414, 446, 439, 437, 430, 388,
	188, 12, 26, 428, 426, 305, 222, 425, 8, 13,
	16, 424, 422, 10, 23, 419, 418, 4, 6, 24,
	17, 417, 20, 412, 28, 408, 404, 27, 19, 402,
	398, 35, 67, 1, 44,
}

var yyR1 = [...]int{
	0, 90, 55, 80, 53, 54, 54, 54, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 35, 35,
	36, 36, 26, 26, 34, 40, 38, 1, 37, 37,
	37, 56, 57, 57, 51, 58, 58, 52, 52, 52,
	30, 30, 30, 30, 16, 5, 5, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 8, 8, 8, 8,
	48, 48, 42, 64, 64, 41, 62, 63, 63, 61,
	61, 61, 60, 60, 60, 59, 59, 67, 67, 65,
	66, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 33, 6, 6, 6, 20, 20, 45,
	45, 46, 46, 75, 75, 43, 43, 43, 85, 85,
	84, 82, 81, 83, 83, 83, 29, 29, 49, 50,
	10, 11, 12, 12, 12, 13, 39, 14, 15, 86,
	21, 22, 22, 25, 25, 23, 23, 23, 23, 23,
	24, 24, 24, 24, 31, 31, 32, 32, 18, 18,
	72, 72, 78, 78, 77, 77, 73, 73, 73, 73,
	73, 68, 74, 74, 69, 69, 76, 76, 70, 79,
	79, 71, 89, 89, 88, 88, 87, 87, 2, 2,
	2, 91, 91, 93, 93, 3, 9, 94, 94, 94,
	7, 7, 7, 7, 92, 92, 47, 17, 17, 17,
	17, 17, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
	2, 1, 1, 2, 1, 2, 3, 1, 1, 4,
	1, 1, 4, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 6, 1, 1, 1, 1, 1,
	3, 3, 1, 0, 2, 1, 3, 0, 1, 0,
	1, 2, 1, 1, 3, 1, 3, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	4, 3, 1, 1, 2, 6, 6, 4, 4, 5,
	4, 5, 3, 1, 1, 1, 2, 1, 1, 1,
	5, 1, 2, 0, 3, 2, 4, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 2, 2, 0, 3, 3, 1, 1, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	3, 2, 1, 1, 2, 0, 4, 2, 2, 1,
	0, 1, 1, 3, 2, 1, 1, 3, 3, 1,
	3, 2, 0, 2, 1, 3, 3, 2, 1, 1,
	1, 0, 1, 0, 1, 2, 2, 0, 1, 1,
	1, 1, 2, 3, 1, 2, 0, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -90, -55, -54, -44, -35, -56, -30, -19, -26,
	-32, -57, -23, -24, -33, 77, 78, -38, -27, -58,
	83, 79, 81, 64, 80, 39, 63, 44, 45, -28,
	-37, -48, 38, -51, -29, -49, -50, -39, -31, 106,
	103, 87, 62, -43, 50, 52, 59, 69, 67, 46,
	-86, -1, 61, -52, -22, -21, -10, 99, -14, 48,
	-2, -25, 36, 40, 91, 96, 82, 42, 43, -91,
	-92, -7, 101, 89, 84, 51, 53, 60, 70, 5,
	5, -17, 6, 7, 8, 9, 10, 102, 86, 109,
	13, 14, 31, 32, 33, 34, 35, 37, 27, 28,
	26, 17, 18, 19, 20, 21, 29, 30, 16, 15,
	11, -8, 22, 24, 23, 25, -51, -23, -24, -33,
	-28, 62, -1, -8, -27, -30, -32, -23, -24, -33,
	90, -44, -64, -59, -42, -27, -89, -88, -87, -42,
	85, -65, 105, -60, -59, -88, -42, -85, 87, 76,
	-34, -26, -34, -40, -34, -40, -34, -91, -92, -16,
	64, -80, -53, -54, -65, -62, 105, -60, -12, 95,
	-12, -5, -2, -4, 83, 64, 27, 28, 26, 17,
	18, 20, 21, 22, 23, 24, 25, 19, 29, 30,
	31, 32, 33, 34, 35, 37, 38, -25, -44, 89,
	84, 89, -34, -34, -34, -34, -38, -67, -66, -42,
	-59, -66, -36, -41, -38, -35, -27, -30, -36, -41,
	-27, -61, -60, -59, 83, -5, 64, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, 90,
	102, 86, -27, 5, -17, 102, -3, -93, 89, 104,
	-94, 90, 89, 88, -94, 90, 108, -42, -60, -3,
	90, 90, -84, -75, 27, -84, -6, -7, 57, -6,
	-53, -20, -7, 76, -53, -91, -82, -81, 68, -18,
	24, 49, -91, -61, -11, 95, -13, 92, 93, 100,
	-15, 97, -72, 105, -73, -74, -79, -78, -68, -70,
	-76, -71, 83, -69, 26, 85, 89, 90, 5, -9,
	-93, 90, -63, -62, -93, -61, -61, 107, -42, -87,
	-42, -3, -88, -42, 88, -53, -74, 83, 49, -53,
	57, -53, 49, 49, -82, 49, -83, -47, 58, -82,
	-59, -80, 64, 107, -28, -33, -23, -24, -73, -7,
	90, -77, -77, 90, 90, 5, 83, -42, -42, 104,
	12, -9, -9, 27, 90, -45, -46, 66, -47, 58,
	-46, 49, -53, 90, -6, 49, -7, 94, 102, -3,
	-78, -79, -68, -70, 83, -69, -42, -27, 49, -26,
	-53, 49, -53, -61, -77, -6, -9, -53, -45,
}

var yyDef = [...]int{
	5, -2, 1, 231, 6, 12, 0, 0, 16, 17,
	0, 31, -2, -2, 0, 252, 253, 22, 23, 32,
	-2, 186, 187, -2, 189, 190, 191, 192, 193, -2,
	26, 84, 0, 0, 121, 122, 123, 124, 125, 0,
	103, 222, 132, 133, 0, 0, 0, 0, 231, 0,
	5, 0, 0, 34, 166, 167, 174, 0, 174, 0,
	27, 181, 0, 180, 170, 177, 230, 183, 184, 2,
	232, 244, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 109, 0, 0,
	72, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 99, 33, -2, -2, 0,
	143, 132, 0, 0, 89, 0, 0, -2, -2, 0,
	35, 233, 0, 237, 115, 102, 0, 237, 224, 0,
	0, 29, 233, 119, 112, 113, 115, 134, 153, 153,
	0, 24, 0, 5, 0, 5, 231, 0, 232, 198,
	44, 0, 3, 231, 28, 155, 109, 30, 0, 0,
	0, 210, 45, 46, 228, 229, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 182, 7, 245,
	0, 242, 8, 9, 10, 11, 13, 15, 117, -2,
	0, 14, 18, 68, 20, 21, -2, 0, 19, 69,
	105, 233, 110, 112, -2, 107, 127, -2, -2, 74,
	75, 76, 77, 78, 79, 80, 81, 82, -2, -2,
	-2, -2, -2, 90, 91, 92, 93, 233, 100, 36,
	109, 0, 101, 0, 0, 109, 126, 0, 234, 128,
	104, 239, 238, 129, 223, 239, 0, 227, 233, 131,
	0, 0, 0, 5, 0, 0, 5, 144, 145, 5,
	0, 25, 147, 148, 0, 0, 0, 246, 0, 5,
	0, 142, 4, 0, 168, 172, 173, 171, 0, 169,
	176, 178, 179, 210, 0, 205, 205, 209, 212, 219,
	202, 203, 211, 216, 0, 215, 243, 0, 0, -2,
	0, 111, 156, 108, 0, 233, 233, 235, 116, 225,
	226, 130, 114, 116, 158, 160, 0, 211, 159, 246,
	146, 246, 137, 138, 0, 140, 161, 163, 5, 165,
	0, 0, 0, 106, 143, 0, 194, 195, 233, 201,
	0, 207, 208, 0, 0, 0, 221, 214, -2, 236,
	0, -2, -2, 154, 0, 0, 149, 0, 151, 5,
	0, 139, 164, 0, 5, 141, 199, 175, 109, 200,
	204, 205, 213, 220, 0, 217, 218, 94, 135, 0,
	152, 136, 162, 233, 206, 5, 157, 246, 150,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			}
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: SingleQuote, lineNo: currentLineNo}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			regexp.Kind = Regexp
			yyVAL.node = regexp
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
