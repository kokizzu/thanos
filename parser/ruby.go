// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const DO_COND = 57421
const DO_BLOCK = 57422
const PRIVATE = 57423
const PROTECTED = 57424
const IN = 57425
const IVAR = 57426
const CVAR = 57427
const GVAR = 57428
const METHODIDENT = 57429
const IDENT = 57430
const COMMENT = 57431
const LABEL = 57432
const ANDDOT = 57433
const DOT = 57434
const LBRACE = 57435
const LBRACEBLOCK = 57436
const RBRACE = 57437
const NEWLINE = 57438
const COMMA = 57439
const STRINGBEG = 57440
const STRINGEND = 57441
const INTERPBEG = 57442
const INTERPEND = 57443
const STRINGBODY = 57444
const REGEXBEG = 57445
const REGEXEND = 57446
const REGEXPOPT = 57447
const RAWSTRINGBEG = 57448
const RAWSTRINGEND = 57449
const WORDSBEG = 57450
const RAWWORDSBEG = 57451
const XSTRINGBEG = 57452
const RAWXSTRINGBEG = 57453
const SEMICOLON = 57454
const LBRACKET = 57455
const LBRACKETSTART = 57456
const RBRACKET = 57457
const LPAREN = 57458
const LPARENSTART = 57459
const RPAREN = 57460
const HASHROCKET = 57461
const SCOPE = 57462

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"DO_COND",
	"DO_BLOCK",
	"PRIVATE",
	"PROTECTED",
	"IN",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"ANDDOT",
	"DOT",
	"LBRACE",
	"LBRACEBLOCK",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"XSTRINGBEG",
	"RAWXSTRINGBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	5, 56,
	6, 242,
	7, 242,
	8, 242,
	9, 242,
	10, 242,
	11, 242,
	12, 242,
	97, 52,
	-2, 240,
	-1, 15,
	5, 57,
	6, 243,
	7, 243,
	8, 243,
	9, 243,
	10, 243,
	11, 243,
	12, 243,
	97, 53,
	-2, 241,
	-1, 21,
	91, 175,
	92, 175,
	113, 175,
	120, 175,
	-2, 117,
	-1, 23,
	38, 279,
	40, 279,
	41, 279,
	42, 279,
	44, 279,
	45, 279,
	46, 279,
	47, 279,
	48, 279,
	49, 279,
	50, 279,
	52, 279,
	54, 279,
	61, 279,
	64, 279,
	65, 279,
	66, 279,
	69, 279,
	71, 279,
	73, 279,
	74, 279,
	75, 279,
	76, 279,
	78, 279,
	84, 279,
	85, 279,
	86, 279,
	87, 279,
	88, 279,
	90, 279,
	93, 279,
	94, 279,
	98, 279,
	103, 279,
	106, 279,
	108, 279,
	109, 279,
	110, 279,
	111, 279,
	114, 279,
	116, 279,
	117, 279,
	-2, 231,
	-1, 26,
	38, 280,
	40, 280,
	41, 280,
	42, 280,
	44, 280,
	45, 280,
	46, 280,
	47, 280,
	48, 280,
	49, 280,
	50, 280,
	52, 280,
	54, 280,
	61, 280,
	64, 280,
	65, 280,
	66, 280,
	69, 280,
	71, 280,
	73, 280,
	74, 280,
	75, 280,
	76, 280,
	78, 280,
	84, 280,
	85, 280,
	86, 280,
	87, 280,
	88, 280,
	90, 280,
	93, 280,
	94, 280,
	98, 280,
	103, 280,
	106, 280,
	108, 280,
	109, 280,
	110, 280,
	111, 280,
	114, 280,
	116, 280,
	117, 280,
	-2, 234,
	-1, 42,
	35, 143,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 159,
	-1, 57,
	35, 143,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 197,
	-1, 111,
	5, 42,
	-2, 44,
	-1, 119,
	5, 56,
	6, 242,
	7, 242,
	8, 242,
	9, 242,
	10, 242,
	11, 242,
	12, 242,
	-2, 240,
	-1, 120,
	5, 57,
	6, 243,
	7, 243,
	8, 243,
	9, 243,
	10, 243,
	11, 243,
	12, 243,
	-2, 241,
	-1, 150,
	91, 240,
	92, 240,
	113, 240,
	120, 240,
	-2, 52,
	-1, 151,
	91, 241,
	92, 241,
	113, 241,
	120, 241,
	-2, 53,
	-1, 193,
	83, 56,
	97, 52,
	-2, 240,
	-1, 194,
	83, 57,
	97, 53,
	-2, 241,
	-1, 250,
	97, 137,
	-2, 142,
	-1, 258,
	97, 124,
	-2, 127,
	-1, 267,
	5, 59,
	97, 55,
	-2, 279,
	-1, 269,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 63,
	-1, 282,
	15, 0,
	16, 0,
	-2, 92,
	-1, 283,
	15, 0,
	16, 0,
	-2, 93,
	-1, 293,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 105,
	-1, 294,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 107,
	-1, 295,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 108,
	-1, 296,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 109,
	-1, 297,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 110,
	-1, 352,
	1, 129,
	51, 129,
	53, 129,
	55, 129,
	59, 129,
	60, 129,
	62, 129,
	68, 129,
	70, 129,
	72, 129,
	78, 129,
	79, 129,
	89, 129,
	92, 129,
	94, 129,
	95, 129,
	96, 129,
	112, 129,
	118, 129,
	-2, 143,
	-1, 378,
	97, 139,
	-2, 147,
	-1, 382,
	5, 58,
	97, 54,
	-2, 198,
	-1, 391,
	5, 43,
	-2, 45,
	-1, 392,
	5, 59,
	-2, 279,
	-1, 398,
	5, 55,
	83, 55,
	96, 55,
	97, 55,
	118, 55,
	-2, 279,
	-1, 430,
	83, 59,
	97, 55,
	-2, 279,
	-1, 455,
	97, 138,
	-2, 145,
	-1, 458,
	5, 59,
	-2, 279,
	-1, 468,
	5, 58,
	-2, 198,
	-1, 471,
	5, 54,
	83, 54,
	96, 54,
	97, 54,
	118, 54,
	-2, 198,
	-1, 486,
	83, 58,
	97, 54,
	-2, 198,
	-1, 504,
	97, 140,
	-2, 146,
	-1, 505,
	5, 58,
	-2, 198,
}

const yyPrivate = 57344

const yyLast = 2745

var yyAct = [...]int{
	164, 20, 475, 365, 369, 331, 367, 157, 200, 476,
	374, 364, 495, 339, 20, 207, 69, 387, 363, 313,
	114, 175, 478, 254, 264, 85, 21, 309, 315, 184,
	168, 83, 88, 323, 445, 390, 179, 368, 172, 84,
	171, 176, 419, 108, 107, 404, 20, 20, 178, 153,
	20, 199, 89, 358, 20, 9, 265, 167, 211, 87,
	165, 11, 12, 491, 177, 493, 180, 317, 322, 449,
	272, 273, 308, 518, 11, 86, 111, 153, 186, 109,
	117, 188, 472, 152, 174, 20, 179, 108, 107, 189,
	351, 20, 20, 20, 20, 450, 258, 263, 203, 204,
	447, 182, 182, 105, 444, 182, 117, 117, 383, 380,
	117, 195, 377, 20, 11, 205, 106, 242, 5, 114,
	261, 350, 20, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 11, 182, 182, 182, 182,
	473, 117, 117, 117, 117, 117, 260, 260, 356, 357,
	312, 354, 89, 4, 304, 89, 305, 317, 316, 241,
	155, 43, 87, 11, 202, 111, 153, 110, 274, 108,
	107, 275, 11, 209, 43, 20, 20, 20, 86, 334,
	43, 410, 276, 335, 320, 337, 321, 178, 204, 20,
	376, 343, 181, 403, 330, 328, 329, 332, 308, 332,
	152, 375, 255, 177, 257, 257, 43, 43, 372, 338,
	43, 279, 242, 453, 43, 384, 366, 189, 249, 325,
	327, 451, 314, 349, 342, 158, 96, 115, 7, 375,
	357, 182, 354, 326, 360, 11, 117, 11, 240, 183,
	347, 7, 187, 108, 107, 43, 307, 341, 425, 11,
	333, 43, 43, 43, 43, 43, 43, 43, 341, 319,
	432, 501, 70, 376, 399, 280, 110, 333, 263, 263,
	395, 217, 281, 43, 382, 110, 108, 107, 191, 270,
	89, 7, 43, 243, 244, 245, 246, 87, 483, 344,
	271, 376, 80, 216, 197, 394, 479, 89, 306, 262,
	386, 20, 388, 86, 87, 308, 108, 107, 90, 401,
	91, 414, 7, 402, 253, 120, 15, 92, 515, 65,
	86, 397, 20, 259, 259, 20, 314, 93, 104, 15,
	413, 479, 278, 415, 239, 106, 20, 391, 151, 477,
	7, 210, 421, 407, 426, 43, 43, 43, 213, 7,
	513, 274, 418, 424, 381, 510, 434, 196, 429, 43,
	437, 11, 428, 487, 396, 366, 194, 116, 10, 15,
	263, 442, 407, 481, 438, 263, 263, 433, 336, 443,
	263, 10, 11, 436, 388, 11, 409, 431, 214, 434,
	446, 412, 448, 422, 420, 457, 11, 416, 460, 462,
	15, 411, 400, 464, 468, 348, 212, 471, 439, 129,
	198, 6, 7, 311, 7, 480, 20, 81, 82, 20,
	143, 10, 346, 484, 482, 269, 7, 485, 15, 470,
	260, 119, 14, 452, 489, 260, 260, 15, 496, 486,
	260, 497, 500, 332, 499, 14, 18, 379, 488, 490,
	263, 502, 10, 277, 150, 159, 314, 263, 263, 314,
	263, 509, 192, 10, 10, 151, 113, 505, 20, 95,
	20, 43, 498, 506, 56, 20, 11, 94, 512, 11,
	10, 262, 193, 514, 385, 14, 173, 389, 257, 10,
	185, 314, 43, 257, 257, 43, 1, 148, 257, 263,
	15, 498, 15, 494, 201, 3, 43, 521, 516, 166,
	260, 53, 20, 500, 15, 523, 14, 526, 423, 314,
	524, 517, 519, 511, 520, 340, 522, 332, 117, 352,
	11, 370, 310, 492, 361, 11, 266, 371, 7, 248,
	43, 247, 256, 256, 14, 43, 43, 160, 525, 190,
	43, 22, 10, 14, 10, 90, 2, 91, 37, 7,
	36, 34, 7, 208, 92, 44, 10, 59, 257, 33,
	38, 32, 11, 7, 93, 375, 39, 161, 314, 35,
	60, 150, 372, 61, 375, 52, 43, 461, 463, 43,
	51, 372, 465, 63, 417, 206, 8, 345, 459, 269,
	144, 146, 145, 147, 162, 169, 359, 259, 466, 467,
	64, 469, 259, 259, 355, 353, 14, 259, 14, 62,
	43, 126, 127, 128, 215, 129, 15, 214, 0, 0,
	14, 251, 251, 0, 0, 373, 0, 376, 43, 214,
	43, 0, 0, 0, 373, 43, 376, 15, 0, 0,
	15, 0, 0, 7, 0, 0, 7, 0, 250, 162,
	0, 15, 507, 362, 214, 0, 0, 0, 0, 461,
	463, 0, 465, 441, 0, 0, 0, 0, 10, 0,
	0, 0, 43, 0, 508, 0, 0, 259, 0, 132,
	130, 131, 138, 139, 124, 125, 126, 127, 128, 10,
	129, 269, 10, 0, 0, 0, 0, 7, 0, 206,
	206, 507, 7, 10, 138, 139, 124, 125, 126, 127,
	128, 459, 129, 0, 0, 0, 0, 318, 0, 124,
	125, 126, 127, 128, 324, 129, 0, 0, 0, 0,
	0, 15, 14, 0, 15, 0, 0, 10, 0, 7,
	0, 0, 10, 10, 0, 0, 0, 10, 0, 0,
	0, 0, 0, 14, 0, 0, 14, 0, 130, 131,
	138, 139, 124, 125, 126, 127, 128, 14, 129, 97,
	98, 99, 100, 101, 102, 103, 0, 0, 0, 440,
	0, 0, 0, 10, 0, 15, 10, 0, 0, 0,
	15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 10, 0, 0,
	0, 256, 256, 0, 0, 0, 256, 15, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 10, 0, 0,
	0, 0, 10, 0, 0, 0, 0, 14, 0, 0,
	14, 144, 146, 145, 147, 132, 130, 131, 138, 139,
	124, 125, 126, 127, 128, 0, 129, 0, 427, 0,
	405, 0, 0, 0, 0, 0, 169, 408, 0, 10,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 256, 0, 0, 0,
	0, 14, 0, 0, 435, 169, 14, 141, 140, 133,
	134, 135, 136, 137, 144, 146, 145, 147, 132, 130,
	131, 138, 139, 124, 125, 126, 127, 128, 0, 129,
	454, 455, 0, 0, 0, 0, 0, 435, 0, 0,
	0, 0, 0, 14, 0, 0, 0, 71, 0, 19,
	28, 72, 0, 81, 82, 30, 31, 66, 67, 68,
	474, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 58, 42, 29, 26, 0, 0, 49, 0,
	48, 0, 50, 54, 55, 57, 0, 0, 0, 0,
	16, 17, 0, 24, 27, 25, 80, 23, 89, 0,
	0, 0, 41, 0, 0, 241, 503, 73, 0, 0,
	504, 0, 79, 0, 0, 76, 0, 74, 77, 75,
	78, 0, 0, 40, 0, 0, 13, 0, 0, 0,
	0, 0, 71, 0, 19, 28, 72, 405, 81, 82,
	30, 31, 66, 67, 68, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 58, 42, 29,
	26, 0, 0, 49, 0, 48, 0, 50, 54, 55,
	57, 0, 0, 0, 0, 0, 0, 0, 24, 27,
	25, 80, 23, 89, 0, 0, 0, 41, 0, 0,
	87, 0, 73, 0, 0, 0, 0, 79, 0, 0,
	76, 0, 74, 77, 75, 78, 86, 0, 40, 0,
	71, 121, 19, 28, 72, 0, 81, 82, 30, 31,
	66, 67, 68, 0, 45, 0, 46, 0, 0, 0,
	0, 0, 0, 47, 0, 58, 42, 29, 26, 0,
	0, 49, 0, 48, 0, 50, 54, 55, 57, 0,
	0, 0, 0, 16, 17, 0, 24, 27, 25, 80,
	23, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 79, 0, 0, 76, 0,
	74, 77, 75, 78, 0, 163, 40, 0, 71, 13,
	118, 28, 72, 0, 81, 82, 30, 31, 66, 67,
	68, 0, 45, 0, 46, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 154, 29, 26, 0, 0, 49,
	0, 48, 0, 50, 54, 55, 156, 0, 0, 0,
	0, 0, 0, 0, 24, 27, 25, 80, 23, 0,
	170, 0, 0, 41, 0, 0, 274, 0, 73, 0,
	0, 0, 0, 79, 0, 0, 76, 0, 74, 77,
	75, 78, 0, 0, 40, 0, 71, 121, 19, 28,
	72, 0, 81, 82, 30, 31, 66, 67, 68, 0,
	45, 0, 46, 0, 0, 0, 0, 0, 0, 47,
	0, 58, 42, 29, 26, 0, 0, 49, 0, 48,
	0, 50, 54, 55, 57, 0, 0, 0, 0, 16,
	17, 0, 24, 27, 25, 80, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 79, 0, 0, 76, 0, 74, 77, 75, 78,
	0, 163, 40, 0, 71, 112, 118, 28, 72, 0,
	81, 82, 30, 31, 66, 67, 68, 0, 45, 0,
	46, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	154, 29, 26, 0, 0, 49, 0, 48, 0, 50,
	54, 55, 156, 0, 0, 0, 0, 0, 0, 0,
	24, 27, 25, 80, 23, 0, 170, 0, 0, 41,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 79,
	0, 0, 76, 0, 74, 77, 75, 78, 0, 406,
	40, 0, 71, 121, 118, 28, 72, 0, 81, 82,
	30, 31, 66, 67, 68, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 154, 29,
	26, 0, 0, 49, 0, 48, 0, 50, 54, 55,
	156, 0, 0, 0, 0, 0, 0, 0, 24, 27,
	25, 80, 23, 0, 170, 0, 0, 41, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 79, 0, 0,
	76, 0, 74, 77, 75, 78, 0, 252, 40, 0,
	71, 121, 118, 28, 72, 0, 81, 82, 30, 31,
	66, 67, 68, 0, 45, 0, 46, 0, 0, 0,
	0, 0, 0, 47, 0, 58, 42, 29, 26, 0,
	0, 49, 0, 48, 0, 50, 54, 55, 57, 0,
	0, 0, 0, 0, 0, 0, 24, 27, 25, 80,
	23, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 79, 0, 0, 76, 0,
	74, 77, 75, 78, 0, 406, 40, 0, 71, 121,
	118, 28, 72, 0, 81, 82, 30, 31, 66, 67,
	68, 0, 45, 0, 46, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 154, 29, 26, 0, 0, 49,
	0, 48, 0, 50, 54, 55, 156, 0, 0, 0,
	0, 0, 0, 0, 24, 27, 25, 80, 23, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 79, 0, 0, 76, 0, 74, 77,
	75, 78, 0, 0, 40, 0, 71, 121, 19, 28,
	72, 0, 81, 82, 30, 31, 66, 67, 68, 0,
	45, 0, 46, 0, 0, 0, 0, 0, 0, 47,
	0, 58, 42, 29, 26, 0, 0, 49, 0, 48,
	0, 50, 54, 55, 57, 0, 0, 0, 0, 0,
	0, 0, 24, 27, 25, 80, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 79, 0, 0, 76, 0, 74, 77, 75, 78,
	0, 0, 40, 0, 71, 121, 118, 28, 72, 0,
	81, 82, 30, 31, 66, 67, 68, 0, 45, 0,
	46, 0, 0, 0, 0, 0, 0, 47, 0, 58,
	42, 29, 26, 0, 0, 49, 0, 48, 0, 50,
	54, 55, 57, 0, 0, 0, 0, 0, 0, 0,
	24, 27, 25, 80, 23, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 79,
	0, 0, 76, 0, 74, 77, 75, 78, 0, 456,
	40, 0, 71, 121, 118, 28, 72, 0, 81, 82,
	30, 31, 66, 67, 68, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 154, 29,
	26, 0, 0, 49, 0, 48, 0, 50, 54, 55,
	156, 0, 0, 0, 0, 0, 0, 0, 24, 27,
	25, 80, 23, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 79, 0, 0,
	76, 0, 74, 77, 75, 78, 0, 0, 40, 0,
	71, 121, 118, 28, 72, 0, 81, 82, 30, 31,
	66, 67, 68, 0, 45, 0, 46, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 154, 29, 26, 0,
	0, 49, 0, 48, 0, 50, 54, 55, 156, 0,
	0, 0, 0, 0, 0, 0, 24, 27, 25, 80,
	23, 0, 170, 0, 0, 41, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 79, 0, 0, 76, 0,
	74, 77, 75, 78, 0, 163, 40, 0, 71, 121,
	118, 28, 72, 0, 81, 82, 30, 31, 66, 67,
	68, 0, 45, 0, 46, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 154, 29, 26, 0, 0, 49,
	0, 48, 0, 50, 54, 55, 156, 0, 0, 0,
	0, 0, 0, 0, 24, 27, 25, 80, 23, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 79, 0, 0, 76, 0, 74, 77,
	75, 78, 0, 0, 40, 0, 71, 121, 118, 28,
	72, 0, 81, 82, 30, 31, 66, 67, 68, 0,
	45, 0, 46, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 154, 29, 26, 0, 0, 49, 0, 48,
	0, 50, 54, 55, 156, 0, 0, 0, 0, 0,
	0, 0, 24, 27, 25, 80, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 79, 0, 0, 76, 0, 74, 77, 75, 78,
	149, 0, 40, 71, 0, 121, 28, 72, 0, 81,
	82, 30, 31, 66, 67, 68, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 154,
	29, 26, 0, 0, 49, 0, 48, 0, 50, 54,
	55, 156, 0, 0, 0, 0, 0, 0, 0, 24,
	27, 25, 80, 23, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 79, 0,
	0, 76, 0, 74, 77, 75, 78, 71, 0, 40,
	28, 72, 121, 81, 82, 30, 31, 66, 67, 68,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 154, 29, 26, 0, 0, 49, 0,
	48, 0, 50, 54, 55, 156, 0, 0, 0, 0,
	0, 0, 0, 24, 27, 25, 80, 23, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 79, 0, 0, 76, 0, 74, 77, 75,
	78, 71, 0, 40, 28, 72, 121, 81, 82, 30,
	31, 66, 67, 68, 0, 45, 0, 46, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 154, 29, 26,
	0, 0, 49, 0, 48, 0, 50, 54, 55, 156,
	0, 0, 0, 0, 0, 0, 0, 24, 27, 25,
	80, 23, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 79, 0, 0, 76,
	0, 74, 77, 75, 78, 0, 0, 40, 0, 142,
	13, 122, 123, 141, 140, 133, 134, 135, 136, 137,
	144, 146, 145, 147, 132, 130, 131, 138, 139, 124,
	125, 126, 127, 128, 0, 129, 221, 222, 229, 223,
	224, 225, 226, 227, 228, 220, 218, 219, 230, 231,
	232, 233, 234, 235, 236, 0, 237, 238, 0, 221,
	222, 229, 223, 224, 225, 226, 227, 228, 220, 218,
	219, 230, 231, 232, 233, 234, 235, 236, 0, 237,
	238, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 216, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 458, 221,
	222, 229, 223, 224, 225, 226, 227, 228, 220, 218,
	219, 230, 231, 232, 233, 234, 235, 236, 0, 237,
	238, 0, 221, 222, 229, 223, 224, 225, 226, 227,
	228, 220, 218, 219, 230, 231, 232, 233, 234, 235,
	236, 0, 237, 238, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 430, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 392, 221, 222, 229, 223, 224, 225, 226, 227,
	228, 220, 218, 219, 230, 231, 232, 233, 234, 235,
	236, 0, 237, 238, 0, 221, 222, 229, 223, 224,
	225, 226, 227, 228, 220, 218, 219, 230, 231, 232,
	233, 234, 235, 236, 0, 237, 238, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 398, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 267, 142, 0, 122, 123, 141,
	140, 133, 134, 135, 136, 137, 144, 146, 145, 147,
	132, 130, 131, 138, 139, 124, 125, 126, 127, 128,
	0, 129, 140, 133, 134, 135, 136, 137, 144, 146,
	145, 147, 132, 130, 131, 138, 139, 124, 125, 126,
	127, 128, 0, 129, 133, 134, 135, 136, 137, 144,
	146, 145, 147, 132, 130, 131, 138, 139, 124, 125,
	126, 127, 128, 0, 129,
}

var yyPact = [...]int{
	1092, -1000, -1000, 76, 512, -1000, 482, 474, -1000, -1000,
	783, 225, -1000, 1248, -1000, -1000, -1000, -1000, -1000, 1716,
	2662, -1000, 2105, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 155, -1000, 586, -1000, -1000, -1000, -1000, -1000,
	1950, 1872, -78, -30, 119, 1638, 1638, -1000, -1000, 1014,
	2253, 238, 238, 1092, -1000, -1000, 77, -80, 1326, 91,
	-1000, -1000, -1000, -44, -1000, -1000, -1000, -1000, 2377, -1000,
	-1000, 383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 929, -1000, -1000, -1000, -1000, -1000,
	1638, 1638, 1638, 1638, 1482, 1482, 1716, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1326, 2586, 234, -1000, -1000, 82,
	265, -1000, 1248, -1000, -1000, 458, 783, 162, 2028, -1000,
	-1000, 1092, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
	2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
	2028, 2028, 2028, 2028, -1000, -1000, -1000, -1000, 67, 2179,
	-1000, -1000, 195, -1000, -78, -30, -80, -1000, 394, 2028,
	82, 71, -1000, 2028, 2662, 162, 99, -29, -1000, -86,
	2028, -1000, 1170, 1326, -1000, -1000, -1000, 394, 394, 1326,
	-1000, 218, -1000, 218, 1092, 1638, 1092, 76, 187, 73,
	151, -1000, -1000, -1000, -1000, 88, 406, -1000, 1092, 364,
	-1000, 76, -1000, -1000, -1000, -1000, 24, -7, -86, 215,
	59, -54, 140, 557, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	512, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15, 2028, -1000, -1000, -1000, -1000, -1000, 2662, 452,
	-4, -1000, -1000, 2662, 82, -1000, 11, 783, 783, -1000,
	-80, 783, -1000, -83, -1000, -1000, 82, 2028, 2028, 2493,
	1326, 214, 910, 910, 596, 596, 380, 380, 380, 380,
	693, 693, 749, 847, 847, 847, 847, 847, 706, 706,
	2705, 2684, 2356, 671, -1000, -1000, 1326, 2563, 208, 361,
	1092, 115, 671, -1000, -70, -1000, 1560, -1000, -1000, 2493,
	-1000, -1000, 1872, 2028, -1000, 82, -1000, -1000, 96, 360,
	82, 1092, 262, -1000, 1092, 356, -37, 353, 187, 352,
	198, 1950, -1000, 1326, 2470, 1092, 204, 336, -1000, -1000,
	1404, 1872, -80, -1000, -1000, -1000, -1000, 2179, -1000, -1000,
	-1000, -1000, 566, 76, 7, 3, -1000, -28, -1000, -1000,
	-2, -1000, 143, 438, -1000, 135, 2028, 1794, -1000, 1716,
	1326, 2400, 783, 1404, 1716, 1716, -1000, -1000, -1000, 1716,
	-1000, -1000, 783, 783, 82, 783, 425, 82, -1000, -1000,
	-1000, -1000, 53, -1000, -1000, -1000, 2028, -1000, -1000, -1000,
	-1000, -1000, -1000, 281, -1000, 246, -1000, -1000, -1000, -1000,
	-1000, 332, -1000, -1000, -1000, 1092, -1000, 201, 1092, 82,
	-1000, 322, 76, -1000, -7, -86, 155, 119, -38, -48,
	-1000, -1000, 82, -1000, 566, -1000, -1000, 183, -1000, 211,
	110, -1000, 2028, -1000, -1000, -1000, 2028, 82, 783, 1716,
	-1000, -1000, -1000, -1000, -1000, -1000, 2028, 2028, 783, 2028,
	2028, -1000, -1000, 115, -1000, 314, -1000, 1638, -1000, 1092,
	309, -1000, -1000, 1560, 1092, 277, -1000, -1000, -1000, -1000,
	-1000, -1000, 2377, 1326, -1000, -1000, -24, -28, -1000, -28,
	-1000, 438, -1000, -1000, -1000, 783, -1000, -1000, 2028, 2662,
	-1000, 218, -1000, -1000, -1000, -1000, 82, -1000, 183, -1000,
	-1000, 1092, -1000, -28, 281, -1000, -1000,
}

var yyPgo = [...]int{
	0, 170, 329, 70, 634, 289, 5, 25, 430, 19,
	629, 625, 351, 624, 620, 616, 367, 225, 607, 606,
	604, 603, 600, 595, 32, 103, 593, 590, 441, 325,
	272, 55, 0, 26, 589, 237, 586, 377, 60, 202,
	118, 23, 581, 456, 580, 29, 579, 577, 212, 573,
	575, 163, 2, 9, 22, 571, 570, 568, 484, 16,
	8, 514, 566, 421, 62, 561, 79, 559, 546, 56,
	24, 41, 17, 557, 40, 228, 549, 37, 10, 4,
	547, 6, 544, 18, 11, 542, 541, 34, 12, 3,
	51, 535, 13, 528, 27, 21, 7, 521, 30, 15,
	519, 506, 31, 39, 500, 71, 28, 496,
}

var yyR1 = [...]int{
	0, 101, 62, 90, 60, 61, 61, 61, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 40, 40,
	40, 40, 40, 40, 41, 41, 31, 31, 31, 39,
	104, 45, 43, 43, 46, 46, 1, 42, 42, 42,
	42, 42, 63, 63, 66, 66, 64, 64, 64, 58,
	65, 65, 59, 59, 59, 59, 35, 35, 35, 35,
	22, 23, 16, 5, 5, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 8, 8,
	8, 8, 55, 55, 49, 73, 73, 48, 71, 72,
	72, 70, 70, 70, 69, 69, 69, 68, 68, 68,
	68, 76, 76, 107, 74, 75, 75, 75, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 38, 6, 6, 6, 20,
	20, 52, 52, 53, 53, 67, 67, 85, 85, 96,
	47, 47, 47, 47, 50, 50, 50, 50, 50, 95,
	95, 94, 92, 91, 93, 93, 93, 34, 34, 56,
	57, 21, 21, 21, 10, 10, 10, 11, 12, 12,
	12, 13, 44, 14, 15, 97, 26, 27, 27, 30,
	30, 28, 28, 28, 28, 28, 29, 29, 29, 29,
	36, 36, 37, 37, 18, 18, 82, 82, 88, 88,
	87, 87, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 77, 84, 84, 78, 78, 86, 86, 79, 89,
	89, 81, 80, 100, 100, 99, 99, 98, 98, 2,
	2, 2, 25, 25, 102, 102, 105, 105, 3, 9,
	106, 106, 106, 7, 7, 7, 24, 103, 103, 103,
	54, 17, 17, 17, 17, 17, 17, 17, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	6, 5, 5, 5, 1, 1, 1, 2, 1, 1,
	0, 3, 1, 1, 1, 4, 1, 2, 4, 2,
	2, 2, 1, 3, 1, 3, 1, 2, 3, 1,
	2, 3, 1, 1, 4, 3, 1, 1, 4, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 6, 5,
	5, 5, 3, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 6, 1, 1, 1,
	1, 1, 3, 3, 1, 0, 2, 1, 3, 0,
	1, 0, 1, 2, 1, 1, 3, 1, 3, 2,
	4, 1, 1, 0, 2, 3, 4, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 4, 3, 1,
	2, 1, 2, 6, 6, 4, 4, 5, 4, 6,
	5, 4, 3, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 2, 1, 1, 0, 3, 3,
	2, 4, 5, 5, 2, 4, 2, 1, 4, 3,
	3, 2, 2, 4, 1, 2, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 3, 1, 1, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 3, 2, 1, 1,
	2, 0, 4, 2, 2, 1, 0, 6, 4, 4,
	2, 1, 1, 3, 2, 1, 1, 3, 3, 1,
	3, 2, 2, 0, 2, 1, 3, 3, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -101, -62, -61, -51, -40, -63, -35, -19, -31,
	-37, -38, -64, 117, -28, -29, 81, 82, -43, 40,
	-32, -33, -65, 88, 84, 86, 66, 85, 41, 65,
	46, 47, -42, -46, -55, -34, -56, -57, -44, -36,
	114, 93, 64, -1, -50, 52, 54, 61, 71, 69,
	73, -22, -23, -97, 74, 75, -58, 76, 63, -47,
	-27, -26, -10, -21, -14, -2, 48, 49, 50, -59,
	-30, 38, 42, 98, 108, 110, 106, 109, 111, 103,
	87, 44, 45, -102, -103, -7, 112, 96, -24, 89,
	53, 55, 62, 72, 5, 5, -17, 6, 7, 8,
	9, 10, 11, 12, 113, -25, 120, 92, 91, -66,
	-51, -64, 117, -43, -32, -35, -37, -38, 40, -28,
	-29, 117, 15, 16, 33, 34, 35, 36, 37, 39,
	29, 30, 28, 19, 20, 21, 22, 23, 31, 32,
	18, 17, 13, -8, 24, 26, 25, 27, -58, 35,
	-28, -29, -38, -33, 64, -1, 76, -96, 80, -8,
	-73, -68, -49, 35, -32, -38, -100, -99, -98, -49,
	90, -74, 116, -107, -74, -95, -71, 94, 78, 116,
	-95, -39, -31, -39, -45, -104, -45, -39, -102, -103,
	-67, -35, -63, -28, -29, -38, -16, 66, -16, -90,
	-60, -61, 97, -74, -71, -69, -68, -99, -49, 92,
	-12, 102, -12, -5, -2, -4, 88, 66, 29, 30,
	28, 19, 20, 22, 23, 24, 25, 26, 27, 21,
	31, 32, 33, 34, 35, 36, 37, 39, 40, -30,
	-51, 96, -24, -39, -39, -39, -39, -43, -76, -75,
	-49, -68, 35, -75, -41, -48, -43, -40, -32, -35,
	-38, -41, -48, -32, -70, -69, -68, 88, 66, -2,
	-5, 66, -3, -105, 96, -3, -66, 5, -17, -25,
	113, 120, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, 97, -59, 113, -25, 120, -94,
	-85, 29, -32, -9, -105, -106, 97, 96, -49, -25,
	95, -106, 97, 119, -49, -69, -3, -69, -94, -94,
	-70, -6, -7, 59, -6, -60, -39, -60, -102, -92,
	-91, 70, 83, 113, -25, -18, 26, -90, 51, -102,
	97, 97, -2, -11, 102, -13, 99, 100, 107, -15,
	104, -82, 116, -83, -84, -89, -88, -81, -77, -79,
	-86, -80, 35, 88, -78, 28, 90, 97, -49, 5,
	113, -25, -9, 97, -17, -17, -74, -72, -71, -17,
	118, -3, 88, 66, -70, 66, -105, -70, 88, 66,
	51, -60, -84, 88, 115, -49, 35, -98, -49, -3,
	95, 51, -3, -60, 59, -60, 51, -20, -7, 79,
	51, -92, 51, -93, -54, 60, -92, -68, -45, -70,
	88, -90, 66, 51, -99, -49, -74, -72, -33, -38,
	-28, -29, -83, -7, 97, -87, -87, 97, -87, 97,
	97, 88, 5, 88, -49, -49, 35, -70, 88, -17,
	-41, -48, -41, -48, -41, -48, -17, -17, -9, -17,
	14, -9, 29, 97, -49, -52, -53, 68, -54, 60,
	-53, 51, -60, 97, -6, -60, -9, 51, -7, -96,
	-95, 101, -25, 113, -3, -88, -89, -81, -77, -81,
	-79, 88, -78, -49, -49, -9, -41, -48, -17, -32,
	51, -31, -60, 51, -60, 51, -70, -87, 97, -87,
	-87, -6, -9, -81, -60, -87, -52,
}

var yyDef = [...]int{
	5, -2, 1, 284, 6, 12, 0, 0, 16, 17,
	0, 0, 42, 0, -2, -2, 308, 309, 26, 0,
	28, -2, 46, -2, 232, 233, -2, 235, 236, 237,
	238, 239, 32, 33, 106, 148, 149, 150, 151, 152,
	125, 273, -2, 143, 161, 0, 0, 30, 30, 284,
	0, 0, 0, 5, 173, 174, 0, -2, 0, 34,
	207, 208, 220, 0, 220, 36, 60, 61, 0, 49,
	227, 0, 226, 214, 215, 216, 211, 212, 213, 223,
	281, 229, 230, 2, 285, 297, 293, 294, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 303,
	304, 305, 306, 307, 131, 0, 0, 282, 283, 286,
	286, -2, 0, 27, 111, 0, 0, 0, 0, -2,
	-2, 0, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 120, 121, 47, 0,
	-2, -2, 0, 175, 159, 0, 197, 190, 187, 0,
	286, 290, 137, 0, 124, 0, 0, 290, 275, 0,
	0, 40, 286, 0, 37, 160, 194, 187, 187, 131,
	162, 0, 29, 0, 5, 0, 5, 284, 0, 285,
	0, 185, 186, -2, -2, 0, 244, 62, 5, 0,
	3, 284, 50, 39, 196, 41, 134, 135, 137, 0,
	0, 0, 0, 256, 63, 64, 279, 280, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 228,
	7, 298, 299, 8, 9, 10, 11, 13, 15, 141,
	-2, 0, 0, 14, 18, 86, 24, 25, -2, 0,
	0, 19, 87, 127, 286, 132, 134, -2, 280, -2,
	129, 154, 43, 0, 287, 153, 286, 0, 0, 0,
	131, 0, -2, -2, 96, 97, 98, 99, 100, 101,
	102, 103, 104, -2, -2, -2, -2, -2, 112, 113,
	114, 115, 286, 122, 51, 48, 131, 0, 0, 0,
	5, 0, 123, 155, 0, 126, 292, 291, 139, 0,
	156, 274, 292, 0, 278, 286, 158, 144, 0, 0,
	286, 5, 176, 177, 5, 0, 0, 0, 0, 0,
	300, 0, 30, 131, 0, 5, 0, 0, 172, 4,
	0, 0, -2, 209, 218, 219, 217, 0, 210, 222,
	224, 225, 256, 0, 251, 251, 255, 251, 262, 269,
	248, 249, 0, 261, 266, 0, 265, 0, -2, 0,
	131, 0, -2, 133, 0, 0, 38, 195, 130, 0,
	288, -2, -2, 280, 286, 154, 0, 286, -2, 154,
	189, 201, 0, 261, 289, 138, 0, 276, 277, 157,
	199, 200, 128, 300, 178, 300, 165, 31, 179, 180,
	166, 0, 168, 202, 204, 5, 206, 0, 5, 286,
	-2, 0, 0, 171, 136, 138, 35, 191, 175, 0,
	240, 241, 286, 247, 0, 253, 254, 0, 260, 0,
	0, 271, 0, 272, 264, -2, 0, 286, -2, 0,
	21, 89, 22, 90, 23, 91, 0, 0, -2, 0,
	0, -2, 188, 0, 140, 0, 181, 0, 183, 5,
	0, 167, 205, 0, 5, 0, -2, 170, 245, 193,
	192, 221, 0, 131, 246, 250, 251, 251, 263, 251,
	270, 0, 267, 268, -2, -2, 20, 88, 0, 116,
	163, 0, 184, 164, 203, 169, 286, 252, 0, 258,
	259, 5, 198, 251, 300, 257, 182,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[1].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = []Node{yyDollar[1].node}
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[3].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yylex.(*Lexer).cond.Push(true)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*Lexer).cond.Pop()
			yyVAL.node = yyDollar[2].node
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, &SplatNode{Arg: yyDollar[3].node})
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = CLASS
			yyVAL.str = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = MODULE
			yyVAL.str = yyDollar[1].str
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).nextConstantType == MODULE {
				root(yylex).PushModule(yyDollar[1].str, currentLineNo)
			} else {
				root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			}
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True:       Statements{yyDollar[6].node},
					elseBranch: true,
				},
				lineNo: currentLineNo,
			}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = ArgsNode{&SplatNode{Arg: yyDollar[2].node}}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, &SplatNode{Arg: yyDollar[4].node})
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			if yyrcvr.Lookahead() == LBRACKETSTART || yyrcvr.Lookahead() == LPARENSTART {
				top := yylex.(*Lexer).cmdArg.Pop()
				yylex.(*Lexer).cmdArg.Push(true)
				yylex.(*Lexer).cmdArg.Push(top)
			} else {
				yylex.(*Lexer).cmdArg.Push(true)
			}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			/*
			 # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
			 # but the push must be done after cmdarg.pop() in the parser.
			 # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
			 # cmdarg.pop() to pop 1 pushed by command_args,
			 # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
			 last_token = @last_token[0]
			 lookahead = last_token == :tLBRACE_ARG
			 if lookahead
			   top = @lexer.cmdarg.pop
			   @lexer.cmdarg.pop
			   @lexer.cmdarg.push(top)
			 else
			   @lexer.cmdarg.pop
			 end
			*/
			yylex.(*Lexer).cmdArg.Pop()
			yyVAL.args = yyDollar[2].args
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, &SplatNode{Arg: yyDollar[4].node})
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[2].node}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, lineNo: currentLineNo}
			call.SetBlock(yyDollar[2].blk)
			yyVAL.node = call
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ForInNode{For: yyDollar[2].node_list, In: yyDollar[4].node, Body: yyDollar[5].node_list, lineNo: currentLineNo}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			r := root(yylex)
			module := r.PopModule()
			if parent := r.moduleStack.Peek(); parent != nil {
				parent.Modules = append(parent.Modules, module)
			} else {
				r.TopLevelModules = append(r.TopLevelModules, module)
			}
			yyVAL.node = module
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).State.Pop()
			yyVAL.node = yyDollar[1].meth
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BreakNode{lineNo: currentLineNo}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NextNode{lineNo: currentLineNo}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo, elseBranch: true}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, Op: yyDollar[2].str, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SuperNode{Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			str := root(yylex).StringStack.Pop()
			str.delim = yyDollar[3].str
			yyVAL.node = str
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo, delim: yyDollar[3].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).StringStack.Pop()
			yyVAL.node = regexp
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: Regexp, Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = ""
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).State.Push(InMethodDefinition)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.params = append(append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[5].param), yyDollar[6].params...)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].param), yyDollar[4].params...)
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].param), yyDollar[4].params...)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append([]*Param{yyDollar[1].param}, yyDollar[2].params...)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: Splat}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: strings.TrimSpace(yyDollar[1].str), LineNo: currentLineNo})
			yyVAL.str = yyDollar[1].str
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
