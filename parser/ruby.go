// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const DO_COND = 57421
const DO_BLOCK = 57422
const PRIVATE = 57423
const PROTECTED = 57424
const IVAR = 57425
const CVAR = 57426
const GVAR = 57427
const METHODIDENT = 57428
const IDENT = 57429
const COMMENT = 57430
const LABEL = 57431
const DOT = 57432
const LBRACE = 57433
const LBRACEBLOCK = 57434
const RBRACE = 57435
const NEWLINE = 57436
const COMMA = 57437
const STRINGBEG = 57438
const STRINGEND = 57439
const INTERPBEG = 57440
const INTERPEND = 57441
const STRINGBODY = 57442
const REGEXBEG = 57443
const REGEXEND = 57444
const REGEXPOPT = 57445
const RAWSTRINGBEG = 57446
const RAWSTRINGEND = 57447
const WORDSBEG = 57448
const RAWWORDSBEG = 57449
const XSTRINGBEG = 57450
const RAWXSTRINGBEG = 57451
const SEMICOLON = 57452
const LBRACKET = 57453
const LBRACKETSTART = 57454
const RBRACKET = 57455
const LPAREN = 57456
const LPARENSTART = 57457
const RPAREN = 57458
const HASHROCKET = 57459
const SCOPE = 57460

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"DO_COND",
	"DO_BLOCK",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"LBRACEBLOCK",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"XSTRINGBEG",
	"RAWXSTRINGBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 13,
	5, 51,
	6, 221,
	7, 221,
	8, 221,
	9, 221,
	10, 221,
	11, 221,
	12, 221,
	95, 47,
	-2, 219,
	-1, 14,
	5, 52,
	6, 222,
	7, 222,
	8, 222,
	9, 222,
	10, 222,
	11, 222,
	12, 222,
	95, 48,
	-2, 220,
	-1, 22,
	38, 253,
	40, 253,
	41, 253,
	42, 253,
	44, 253,
	45, 253,
	46, 253,
	47, 253,
	48, 253,
	49, 253,
	50, 253,
	52, 253,
	54, 253,
	61, 253,
	64, 253,
	65, 253,
	66, 253,
	69, 253,
	71, 253,
	76, 253,
	83, 253,
	84, 253,
	85, 253,
	86, 253,
	87, 253,
	89, 253,
	91, 253,
	96, 253,
	101, 253,
	104, 253,
	106, 253,
	107, 253,
	108, 253,
	109, 253,
	112, 253,
	114, 253,
	115, 253,
	-2, 210,
	-1, 25,
	38, 254,
	40, 254,
	41, 254,
	42, 254,
	44, 254,
	45, 254,
	46, 254,
	47, 254,
	48, 254,
	49, 254,
	50, 254,
	52, 254,
	54, 254,
	61, 254,
	64, 254,
	65, 254,
	66, 254,
	69, 254,
	71, 254,
	76, 254,
	83, 254,
	84, 254,
	85, 254,
	86, 254,
	87, 254,
	89, 254,
	91, 254,
	96, 254,
	101, 254,
	104, 254,
	106, 254,
	107, 254,
	108, 254,
	109, 254,
	112, 254,
	114, 254,
	115, 254,
	-2, 213,
	-1, 31,
	90, 158,
	111, 158,
	118, 158,
	-2, 108,
	-1, 43,
	38, 132,
	40, 132,
	41, 132,
	42, 132,
	44, 132,
	45, 132,
	46, 132,
	47, 132,
	48, 132,
	49, 132,
	50, 132,
	52, 132,
	54, 132,
	61, 132,
	64, 132,
	65, 132,
	66, 132,
	69, 132,
	71, 132,
	76, 132,
	83, 132,
	84, 132,
	85, 132,
	86, 132,
	87, 132,
	89, 132,
	91, 132,
	96, 132,
	101, 132,
	104, 132,
	106, 132,
	107, 132,
	108, 132,
	109, 132,
	112, 132,
	115, 132,
	-2, 146,
	-1, 54,
	38, 132,
	40, 132,
	41, 132,
	42, 132,
	44, 132,
	45, 132,
	46, 132,
	47, 132,
	48, 132,
	49, 132,
	50, 132,
	52, 132,
	54, 132,
	61, 132,
	64, 132,
	65, 132,
	66, 132,
	69, 132,
	71, 132,
	76, 132,
	83, 132,
	84, 132,
	85, 132,
	86, 132,
	87, 132,
	89, 132,
	91, 132,
	96, 132,
	101, 132,
	104, 132,
	106, 132,
	107, 132,
	108, 132,
	109, 132,
	112, 132,
	115, 132,
	-2, 176,
	-1, 102,
	5, 38,
	-2, 40,
	-1, 113,
	5, 51,
	6, 221,
	7, 221,
	8, 221,
	9, 221,
	10, 221,
	11, 221,
	12, 221,
	-2, 219,
	-1, 114,
	5, 52,
	6, 222,
	7, 222,
	8, 222,
	9, 222,
	10, 222,
	11, 222,
	12, 222,
	-2, 220,
	-1, 143,
	90, 219,
	111, 219,
	118, 219,
	-2, 47,
	-1, 144,
	90, 220,
	111, 220,
	118, 220,
	-2, 48,
	-1, 236,
	95, 128,
	-2, 131,
	-1, 243,
	95, 115,
	-2, 118,
	-1, 253,
	38, 132,
	40, 132,
	41, 132,
	42, 132,
	44, 132,
	45, 132,
	46, 132,
	47, 132,
	48, 132,
	49, 132,
	50, 132,
	52, 132,
	54, 132,
	61, 132,
	64, 132,
	65, 132,
	66, 132,
	69, 132,
	71, 132,
	76, 132,
	83, 132,
	84, 132,
	85, 132,
	86, 132,
	87, 132,
	89, 132,
	91, 132,
	96, 132,
	101, 132,
	104, 132,
	106, 132,
	107, 132,
	108, 132,
	109, 132,
	112, 132,
	115, 132,
	-2, 58,
	-1, 254,
	5, 54,
	95, 50,
	-2, 253,
	-1, 264,
	15, 0,
	16, 0,
	-2, 83,
	-1, 265,
	15, 0,
	16, 0,
	-2, 84,
	-1, 275,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 96,
	-1, 276,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 98,
	-1, 277,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 99,
	-1, 278,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 100,
	-1, 279,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 101,
	-1, 328,
	1, 120,
	51, 120,
	53, 120,
	55, 120,
	59, 120,
	60, 120,
	62, 120,
	68, 120,
	70, 120,
	72, 120,
	79, 120,
	88, 120,
	90, 120,
	93, 120,
	94, 120,
	110, 120,
	116, 120,
	-2, 132,
	-1, 355,
	5, 39,
	-2, 41,
	-1, 359,
	5, 53,
	95, 49,
	-2, 177,
	-1, 361,
	5, 54,
	-2, 253,
	-1, 365,
	5, 50,
	94, 50,
	95, 50,
	116, 50,
	-2, 253,
	-1, 414,
	95, 129,
	-2, 134,
	-1, 415,
	5, 53,
	-2, 177,
	-1, 417,
	5, 49,
	94, 49,
	95, 49,
	116, 49,
	-2, 177,
}

const yyPrivate = 57344

const yyLast = 1745

var yyAct = [...]int{
	20, 421, 420, 309, 344, 407, 343, 31, 342, 183,
	249, 348, 341, 256, 293, 161, 339, 340, 182, 81,
	108, 423, 5, 192, 289, 295, 302, 357, 354, 146,
	187, 82, 433, 164, 186, 165, 80, 370, 334, 257,
	298, 317, 157, 157, 288, 196, 262, 92, 240, 85,
	11, 432, 104, 434, 248, 84, 157, 158, 15, 409,
	106, 263, 327, 102, 100, 287, 160, 263, 106, 178,
	15, 83, 106, 105, 106, 297, 301, 112, 18, 145,
	106, 333, 410, 330, 406, 336, 177, 185, 188, 189,
	360, 157, 243, 247, 66, 190, 332, 333, 107, 330,
	297, 296, 352, 112, 112, 326, 157, 112, 418, 286,
	15, 153, 108, 250, 242, 242, 351, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 15,
	226, 246, 110, 10, 112, 112, 112, 112, 112, 112,
	112, 228, 375, 292, 102, 10, 251, 299, 261, 4,
	199, 15, 148, 53, 157, 294, 157, 157, 252, 233,
	241, 241, 101, 15, 419, 53, 312, 239, 86, 194,
	87, 235, 53, 313, 189, 315, 300, 88, 157, 350,
	109, 7, 227, 307, 308, 10, 178, 89, 349, 253,
	322, 325, 310, 7, 310, 304, 306, 202, 53, 53,
	369, 169, 53, 316, 383, 53, 412, 151, 319, 250,
	305, 324, 424, 85, 10, 168, 389, 77, 201, 84,
	422, 15, 112, 15, 10, 10, 319, 349, 193, 15,
	393, 225, 67, 7, 53, 83, 10, 259, 180, 53,
	53, 53, 53, 53, 53, 53, 424, 347, 10, 350,
	255, 247, 247, 101, 157, 378, 53, 294, 195, 179,
	245, 359, 7, 238, 349, 101, 447, 362, 53, 444,
	156, 162, 244, 244, 338, 430, 426, 356, 157, 328,
	358, 394, 114, 14, 7, 363, 440, 157, 350, 386,
	367, 364, 157, 157, 384, 14, 7, 355, 380, 368,
	246, 224, 113, 13, 144, 376, 10, 372, 10, 377,
	157, 181, 379, 366, 10, 13, 198, 157, 157, 236,
	156, 197, 323, 347, 143, 350, 53, 53, 53, 392,
	388, 400, 123, 372, 53, 14, 382, 408, 15, 291,
	396, 157, 173, 157, 247, 404, 399, 253, 385, 374,
	390, 157, 398, 358, 7, 13, 7, 15, 137, 311,
	15, 405, 7, 294, 14, 294, 242, 415, 15, 417,
	395, 425, 321, 199, 396, 78, 79, 35, 86, 416,
	87, 401, 411, 199, 13, 429, 14, 88, 85, 427,
	353, 175, 303, 152, 84, 428, 166, 89, 14, 142,
	260, 112, 157, 438, 439, 436, 13, 443, 436, 437,
	83, 91, 441, 310, 90, 431, 438, 174, 13, 157,
	184, 3, 241, 10, 446, 157, 120, 121, 122, 448,
	123, 311, 258, 450, 1, 159, 52, 15, 449, 451,
	150, 167, 10, 53, 387, 10, 454, 318, 345, 435,
	294, 453, 290, 10, 452, 337, 14, 346, 14, 234,
	85, 154, 53, 9, 14, 53, 84, 310, 21, 6,
	112, 7, 15, 53, 155, 2, 13, 15, 13, 170,
	57, 38, 83, 37, 13, 34, 10, 44, 191, 56,
	7, 33, 39, 7, 118, 119, 120, 121, 122, 15,
	123, 7, 138, 140, 139, 141, 53, 32, 40, 171,
	171, 36, 58, 171, 59, 51, 50, 61, 199, 381,
	8, 320, 10, 237, 237, 371, 172, 335, 62, 176,
	162, 373, 331, 329, 244, 132, 133, 118, 119, 120,
	121, 122, 53, 123, 60, 200, 0, 0, 156, 0,
	171, 171, 171, 171, 0, 397, 162, 10, 0, 0,
	0, 0, 10, 0, 0, 0, 229, 230, 231, 232,
	7, 0, 0, 14, 0, 53, 0, 53, 0, 413,
	0, 414, 53, 0, 10, 0, 0, 0, 0, 397,
	0, 0, 14, 13, 0, 14, 0, 0, 191, 191,
	0, 0, 0, 14, 53, 7, 0, 0, 0, 0,
	7, 0, 13, 0, 0, 13, 403, 0, 0, 0,
	0, 0, 0, 13, 93, 94, 95, 96, 97, 98,
	99, 0, 7, 0, 0, 0, 402, 0, 171, 0,
	442, 126, 124, 125, 132, 133, 118, 119, 120, 121,
	122, 0, 123, 0, 314, 0, 0, 371, 124, 125,
	132, 133, 118, 119, 120, 121, 122, 0, 123, 0,
	0, 0, 14, 68, 0, 19, 27, 69, 0, 78,
	79, 29, 30, 63, 64, 65, 0, 45, 0, 46,
	0, 0, 13, 0, 0, 0, 47, 0, 55, 43,
	28, 25, 0, 0, 49, 0, 48, 14, 0, 0,
	0, 54, 14, 0, 0, 0, 16, 17, 23, 26,
	24, 77, 22, 0, 0, 0, 42, 13, 0, 226,
	0, 70, 13, 0, 14, 0, 76, 0, 0, 73,
	0, 71, 74, 72, 75, 0, 0, 41, 0, 0,
	12, 0, 391, 68, 13, 19, 27, 69, 0, 78,
	79, 29, 30, 63, 64, 65, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 55, 43,
	28, 25, 0, 0, 49, 0, 48, 0, 0, 0,
	0, 54, 0, 0, 0, 0, 0, 0, 23, 26,
	24, 77, 22, 85, 0, 0, 42, 0, 0, 84,
	0, 70, 0, 0, 0, 0, 76, 0, 0, 73,
	0, 71, 74, 72, 75, 83, 0, 41, 0, 68,
	115, 19, 27, 69, 0, 78, 79, 29, 30, 63,
	64, 65, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 55, 43, 28, 25, 0, 0,
	49, 0, 48, 0, 0, 0, 0, 54, 0, 0,
	0, 0, 16, 17, 23, 26, 24, 77, 22, 0,
	0, 0, 42, 0, 0, 0, 445, 70, 0, 0,
	0, 0, 76, 0, 0, 73, 0, 71, 74, 72,
	75, 0, 0, 41, 0, 68, 12, 19, 27, 69,
	0, 78, 79, 29, 30, 63, 64, 65, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	55, 43, 28, 25, 0, 0, 49, 0, 48, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 16, 17,
	23, 26, 24, 77, 22, 0, 0, 0, 42, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 76, 0,
	0, 73, 0, 71, 74, 72, 75, 0, 0, 41,
	0, 68, 103, 111, 27, 69, 0, 78, 79, 29,
	30, 63, 64, 65, 0, 45, 0, 46, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 147, 28, 25,
	0, 0, 49, 0, 48, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 23, 26, 24, 77,
	22, 0, 163, 0, 42, 0, 0, 250, 0, 70,
	0, 0, 0, 0, 76, 0, 0, 73, 0, 71,
	74, 72, 75, 0, 0, 41, 0, 68, 115, 111,
	27, 69, 0, 78, 79, 29, 30, 63, 64, 65,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 147, 28, 25, 0, 0, 49, 0,
	48, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 23, 26, 24, 77, 22, 0, 163, 0,
	42, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	76, 0, 0, 73, 0, 71, 74, 72, 75, 0,
	0, 41, 0, 68, 115, 19, 27, 69, 0, 78,
	79, 29, 30, 63, 64, 65, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 55, 43,
	28, 25, 0, 0, 49, 0, 48, 0, 0, 0,
	0, 54, 0, 0, 0, 0, 0, 0, 23, 26,
	24, 77, 22, 0, 0, 0, 42, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 76, 0, 0, 73,
	0, 71, 74, 72, 75, 0, 0, 41, 0, 68,
	115, 111, 27, 69, 0, 78, 79, 29, 30, 63,
	64, 65, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 55, 43, 28, 25, 0, 0,
	49, 0, 48, 0, 0, 0, 0, 54, 0, 0,
	0, 0, 0, 0, 23, 26, 24, 77, 22, 0,
	0, 0, 42, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 76, 0, 0, 73, 0, 71, 74, 72,
	75, 0, 0, 41, 0, 68, 115, 111, 27, 69,
	0, 78, 79, 29, 30, 63, 64, 65, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 147, 28, 25, 0, 0, 49, 0, 48, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	23, 26, 24, 77, 22, 0, 0, 0, 42, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 76, 0,
	0, 73, 0, 71, 74, 72, 75, 68, 0, 41,
	27, 69, 115, 78, 79, 29, 30, 63, 64, 65,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 147, 28, 25, 0, 0, 49, 0,
	48, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 23, 26, 24, 77, 22, 0, 0, 0,
	42, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	76, 0, 0, 73, 0, 71, 74, 72, 75, 0,
	0, 41, 0, 136, 115, 116, 117, 135, 134, 127,
	128, 129, 130, 131, 138, 140, 139, 141, 126, 124,
	125, 132, 133, 118, 119, 120, 121, 122, 0, 123,
	206, 207, 214, 208, 209, 210, 211, 212, 213, 205,
	203, 204, 215, 216, 217, 218, 219, 220, 221, 0,
	222, 223, 206, 207, 214, 208, 209, 210, 211, 212,
	213, 205, 203, 204, 215, 216, 217, 218, 219, 220,
	221, 0, 222, 223, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 201, 202,
	138, 140, 139, 141, 126, 124, 125, 132, 133, 118,
	119, 120, 121, 122, 0, 123, 0, 0, 0, 77,
	361, 206, 207, 214, 208, 209, 210, 211, 212, 213,
	205, 203, 204, 215, 216, 217, 218, 219, 220, 221,
	0, 222, 223, 206, 207, 214, 208, 209, 210, 211,
	212, 213, 205, 203, 204, 215, 216, 217, 218, 219,
	220, 221, 0, 222, 223, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 365,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 254, 136, 0, 116, 117, 135, 134, 127, 128,
	129, 130, 131, 138, 140, 139, 141, 126, 124, 125,
	132, 133, 118, 119, 120, 121, 122, 0, 123, 135,
	134, 127, 128, 129, 130, 131, 138, 140, 139, 141,
	126, 124, 125, 132, 133, 118, 119, 120, 121, 122,
	0, 123, 134, 127, 128, 129, 130, 131, 138, 140,
	139, 141, 126, 124, 125, 132, 133, 118, 119, 120,
	121, 122, 0, 123, 127, 128, 129, 130, 131, 138,
	140, 139, 141, 126, 124, 125, 132, 133, 118, 119,
	120, 121, 122, 0, 123,
}

var yyPact = [...]int{
	801, -1000, -1000, -39, 335, -1000, 419, 416, -1000, -1000,
	628, -1000, 877, -1000, -1000, -38, -1000, -1000, -1000, 1181,
	1639, 1329, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 137, -1000, 488, 16, -1000, -1000, -1000, -1000,
	-1000, 1257, 1029, -79, 133, 1105, 1105, -1000, -1000, 725,
	182, 182, 801, -84, -84, 1029, 89, -1000, -1000, -1000,
	-1000, -55, -1000, -1000, -1000, 1451, -1000, -1000, 341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 645, -1000, -1000, 104, 57, 1105, 1105, 1105, 1105,
	1181, 1181, 1181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19, 125, -1000, 877, 1564, 1029, 181, -1000, -1000, 405,
	628, 1257, -44, -1000, -1000, 801, 1257, 1257, 1257, 1257,
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, -1000, -1000,
	-1000, -1000, 14, -1000, -1000, -46, -1000, -79, -84, -84,
	-1000, 320, 1257, -1000, 19, 6, -1000, 1639, -50, 64,
	-19, -1000, -91, 1257, -1000, 953, 1029, -1000, 320, 320,
	382, -1000, 382, 801, 1105, 801, -39, 148, 46, 356,
	-1000, 801, 281, -1000, -39, -1000, -1000, 1029, -1000, -1000,
	-1000, 10, -33, -91, 141, -1, -67, -17, 170, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 335, -1000, 22, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7, -1000, -1000,
	-1000, -1000, -1000, 1639, 395, -1000, -1000, 1639, -1000, -88,
	-1000, -1000, 19, -1000, -1000, -84, 19, -1000, -5, -1000,
	1257, 1257, 1473, 1029, 1662, 1662, 401, 401, 303, 303,
	303, 303, 514, 514, 639, 1516, 1516, 1516, 1516, 1516,
	471, 471, 1705, 1684, 1430, 623, -1000, 1029, 1542, 272,
	801, 123, 623, -1000, -76, -1000, 1257, -1000, 1473, -1000,
	-1000, 1029, 1257, -1000, 19, -1000, -1000, 59, 264, 801,
	206, -1000, 801, 257, 135, 253, 148, 248, 166, 1257,
	801, 174, 240, -1000, -1000, 19, 1029, 1029, -84, -1000,
	-1000, -1000, -1000, 1329, -1000, -1000, -1000, -1000, 246, -39,
	-11, -36, -1000, -1000, -1000, -13, -1000, 387, -1000, 129,
	1257, -1000, 1257, 1181, -1000, -1000, -1000, -1000, -1000, -1000,
	1029, -1000, 19, 375, 19, -1000, -1000, -1000, 79, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 162, -1000, 196,
	-1000, -1000, -1000, -1000, -1000, 235, -1000, -1000, -1000, 801,
	-1000, 310, 234, -39, -1000, -1000, -33, -91, -1000, -1000,
	-48, -58, -1000, -1000, 19, -1000, 246, -1000, -1000, 209,
	100, 1257, -1000, -1000, -1000, -1000, 1257, -1000, -1000, 123,
	228, -1000, 1105, -1000, 801, 225, -1000, -1000, 1257, 801,
	-1000, -1000, -1000, 1451, 1029, -1000, -1000, -36, -1000, -1000,
	387, -1000, -1000, 1639, -1000, 382, -1000, -1000, -1000, 19,
	-1000, 801, -1000, 162, -1000,
}

var yyPgo = [...]int{
	0, 162, 94, 54, 555, 260, 3, 31, 368, 14,
	554, 543, 268, 542, 538, 537, 269, 47, 531, 530,
	529, 527, 526, 525, 524, 522, 312, 292, 242, 473,
	0, 7, 521, 190, 518, 142, 57, 489, 22, 177,
	517, 78, 502, 352, 501, 499, 48, 238, 497, 159,
	2, 1, 21, 495, 493, 491, 387, 490, 9, 430,
	485, 479, 50, 478, 64, 442, 39, 13, 34, 27,
	471, 33, 181, 469, 6, 11, 4, 467, 465, 16,
	17, 462, 458, 5, 8, 12, 18, 457, 41, 454,
	24, 451, 450, 446, 15, 23, 445, 444, 36, 19,
	427, 10, 25, 406,
}

var yyR1 = [...]int{
	0, 97, 60, 86, 58, 59, 59, 59, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 38, 38,
	39, 39, 29, 29, 29, 37, 100, 43, 41, 41,
	44, 44, 1, 40, 40, 40, 40, 40, 61, 61,
	64, 64, 62, 62, 56, 63, 63, 57, 57, 57,
	57, 33, 33, 33, 33, 22, 23, 16, 5, 5,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 8,
	8, 8, 8, 53, 53, 47, 70, 70, 46, 68,
	69, 69, 67, 67, 67, 66, 66, 66, 65, 65,
	73, 73, 103, 71, 72, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 36, 6,
	6, 6, 20, 20, 50, 50, 51, 51, 81, 81,
	92, 45, 45, 48, 48, 48, 48, 48, 91, 91,
	90, 88, 87, 89, 89, 89, 32, 32, 54, 55,
	21, 21, 21, 10, 10, 10, 11, 12, 12, 12,
	13, 42, 14, 15, 93, 24, 25, 25, 28, 28,
	26, 26, 26, 26, 26, 27, 27, 27, 27, 34,
	34, 35, 35, 18, 18, 78, 78, 84, 84, 83,
	83, 79, 79, 79, 79, 79, 74, 80, 80, 75,
	75, 82, 82, 76, 85, 85, 77, 96, 96, 95,
	95, 94, 94, 2, 2, 2, 98, 98, 101, 101,
	3, 9, 102, 102, 102, 7, 7, 7, 7, 99,
	99, 52, 17, 17, 17, 17, 17, 17, 17, 19,
	19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	1, 1, 1, 2, 1, 1, 0, 3, 1, 1,
	1, 4, 1, 2, 4, 2, 2, 2, 1, 3,
	1, 3, 1, 2, 1, 2, 3, 1, 1, 4,
	3, 1, 1, 4, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 6, 1, 1,
	1, 1, 1, 3, 3, 1, 0, 2, 1, 3,
	0, 1, 0, 1, 2, 1, 1, 3, 1, 3,
	1, 1, 0, 2, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 4, 3, 1, 1, 2, 6,
	6, 4, 4, 5, 4, 5, 4, 3, 1, 1,
	1, 2, 1, 1, 1, 5, 1, 2, 0, 3,
	3, 2, 4, 2, 4, 2, 1, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 3, 1, 1, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 3, 2, 1, 1, 2,
	0, 4, 2, 2, 1, 0, 1, 1, 3, 2,
	1, 1, 3, 3, 1, 3, 2, 0, 2, 1,
	3, 3, 2, 1, 1, 1, 0, 1, 0, 1,
	2, 2, 0, 1, 1, 1, 1, 2, 3, 1,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -97, -60, -59, -49, -38, -61, -33, -19, -29,
	-35, -62, 115, -26, -27, -36, 81, 82, -41, 40,
	-30, -63, 87, 83, 85, 66, 84, 41, 65, 46,
	47, -31, -40, -44, -53, -56, -32, -54, -55, -42,
	-34, 112, 91, 64, -48, 52, 54, 61, 71, 69,
	-22, -23, -93, -1, 76, 63, -45, -57, -25, -24,
	-10, -21, -14, 48, 49, 50, -2, -28, 38, 42,
	96, 106, 108, 104, 107, 109, 101, 86, 44, 45,
	-98, -99, -7, 110, 94, 88, 53, 55, 62, 72,
	5, 5, -17, 6, 7, 8, 9, 10, 11, 12,
	-64, -49, -62, 115, 90, 111, 118, -41, -30, -33,
	-35, 40, -36, -26, -27, 115, 15, 16, 33, 34,
	35, 36, 37, 39, 29, 30, 28, 19, 20, 21,
	22, 23, 31, 32, 18, 17, 13, -8, 24, 26,
	25, 27, -56, -26, -27, -36, -31, 64, -1, 76,
	-92, 80, -8, 95, -70, -65, -47, -30, -36, -96,
	-95, -94, -47, 89, -71, 114, -103, -91, 92, 78,
	-37, -29, -37, -43, -100, -43, -37, -98, -99, -16,
	66, -16, -86, -58, -59, -71, -68, 114, -71, -68,
	-66, -65, -95, -47, 90, -12, 100, -12, -5, -2,
	-4, 87, 66, 29, 30, 28, 19, 20, 22, 23,
	24, 25, 26, 27, 21, 31, 32, 33, 34, 35,
	36, 37, 39, 40, -28, -49, 94, 88, 94, -37,
	-37, -37, -37, -41, -73, -72, -47, -65, -72, -39,
	-46, -41, -38, -30, -33, -39, -46, -30, -3, -101,
	94, -3, -64, -2, 87, -5, -67, -66, -65, 66,
	5, -17, 90, 111, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, 95, 111, 90, -90,
	-81, 29, -30, -9, -101, -102, 95, 94, 90, 93,
	-102, 95, 117, -47, -66, -3, -66, -90, -90, -6,
	-7, 59, -6, -58, -37, -58, -98, -88, -87, 70,
	-18, 26, -86, 51, -98, -67, 95, 95, -2, -11,
	100, -13, 97, 98, 105, -15, 102, -78, 114, -79,
	-80, -85, -84, -74, -76, -82, -77, 87, -75, 28,
	89, 94, 95, 5, 116, -3, -71, -69, -68, -9,
	95, 87, -67, -101, -67, 87, 51, -58, -80, 87,
	113, -47, -94, -47, -3, 93, 51, -58, 59, -58,
	51, -20, -7, 79, 51, -88, 51, -89, -52, 60,
	-88, -65, -86, 66, 51, -3, -95, -47, -71, -69,
	-31, -36, -26, -27, -79, -7, 95, -83, -83, 95,
	95, 5, 87, -47, -47, -9, 14, -9, 29, 95,
	-50, -51, 68, -52, 60, -51, 51, -58, 95, -6,
	51, -7, 99, 90, 111, -3, -84, -85, -74, -76,
	87, -75, -47, -30, 51, -29, -58, 51, -58, -67,
	-83, -6, -9, -58, -50,
}

var yyDef = [...]int{
	5, -2, 1, 256, 6, 12, 0, 0, 16, 17,
	0, 38, 0, -2, -2, 0, 279, 280, 22, 0,
	24, 42, -2, 211, 212, -2, 214, 215, 216, 217,
	218, -2, 28, 29, 97, 0, 135, 136, 137, 138,
	139, 116, 247, -2, 147, 0, 0, 26, 26, 256,
	0, 0, 5, 132, -2, 0, 30, 44, 186, 187,
	199, 0, 199, 55, 56, 0, 32, 206, 0, 205,
	193, 194, 195, 190, 191, 192, 202, 255, 208, 209,
	2, 257, 269, 265, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 273, 274, 275, 276, 277, 278,
	258, 258, -2, 0, 0, 122, 0, 23, 102, 0,
	0, 0, 0, -2, -2, 0, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 43, -2, -2, 0, 158, 146, 0, 176,
	171, 168, 0, 45, 258, 262, 128, 115, 0, 0,
	262, 249, 0, 0, 36, 258, 0, 148, 168, 168,
	0, 25, 0, 5, 0, 5, 256, 0, 257, 223,
	57, 5, 0, 3, 256, 33, 173, 122, 35, 175,
	37, 125, 126, 128, 0, 0, 0, 0, 235, 58,
	59, 253, 254, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 207, 7, 270, 0, 267, 8,
	9, 10, 11, 13, 15, 130, -2, 0, 14, 18,
	81, 20, 21, -2, 0, 19, 82, 118, 39, 0,
	259, 140, 258, -2, -2, 120, 258, 123, 125, 141,
	0, 0, 0, 122, -2, -2, 87, 88, 89, 90,
	91, 92, 93, 94, 95, -2, -2, -2, -2, -2,
	103, 104, 105, 106, 258, 113, 46, 122, 0, 0,
	5, 0, 114, 142, 0, 117, 264, 263, 0, 143,
	248, 264, 0, 252, 258, 145, 133, 0, 0, 5,
	159, 160, 5, 0, 0, 0, 0, 0, 271, 0,
	5, 0, 0, 157, 4, 258, 0, 0, -2, 188,
	197, 198, 196, 0, 189, 201, 203, 204, 235, 0,
	230, 230, 234, 237, 244, 227, 228, 236, 241, 0,
	240, 268, 0, 0, 260, -2, 34, 174, 121, -2,
	124, -2, 258, 0, 258, -2, 170, 180, 0, 236,
	261, 129, 250, 251, 144, 178, 179, 271, 161, 271,
	151, 27, 162, 163, 152, 0, 154, 181, 183, 5,
	185, 0, 0, 0, 156, 119, 127, 129, 31, 172,
	158, 0, 219, 220, 258, 226, 0, 232, 233, 0,
	0, 0, 246, 239, -2, -2, 0, -2, 169, 0,
	0, 164, 0, 166, 5, 0, 153, 184, 0, 5,
	155, 224, 200, 0, 122, 225, 229, 230, 238, 245,
	0, 242, 243, 107, 149, 0, 167, 150, 182, 258,
	231, 5, 177, 271, 165,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[1].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = []Node{yyDollar[1].node}
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[3].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yylex.(*Lexer).cond.Push(true)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*Lexer).cond.Pop()
			yyVAL.node = yyDollar[2].node
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = CLASS
			yyVAL.str = yyDollar[1].str
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = MODULE
			yyVAL.str = yyDollar[1].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).nextConstantType == MODULE {
				root(yylex).PushModule(yyDollar[1].str, currentLineNo)
			} else {
				root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			}
			yyVAL.str = yyDollar[1].str
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			if yyrcvr.Lookahead() == LBRACKETSTART || yyrcvr.Lookahead() == LPARENSTART {
				top := yylex.(*Lexer).cmdArg.Pop()
				yylex.(*Lexer).cmdArg.Push(true)
				yylex.(*Lexer).cmdArg.Push(top)
			} else {
				yylex.(*Lexer).cmdArg.Push(true)
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			/*
			 # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
			 # but the push must be done after cmdarg.pop() in the parser.
			 # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
			 # cmdarg.pop() to pop 1 pushed by command_args,
			 # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
			 last_token = @last_token[0]
			 lookahead = last_token == :tLBRACE_ARG
			 if lookahead
			   top = @lexer.cmdarg.pop
			   @lexer.cmdarg.pop
			   @lexer.cmdarg.push(top)
			 else
			   @lexer.cmdarg.pop
			 end
			*/
			yylex.(*Lexer).cmdArg.Pop()
			yyVAL.args = yyDollar[2].args
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			r := root(yylex)
			module := r.PopModule()
			if parent := r.moduleStack.Peek(); parent != nil {
				parent.Modules = append(parent.Modules, module)
			} else {
				r.TopLevelModules = append(r.TopLevelModules, module)
			}
			yyVAL.node = module
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).State.Pop()
			yyVAL.node = yyDollar[1].meth
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SuperNode{Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			str := root(yylex).StringStack.Pop()
			str.delim = yyDollar[3].str
			yyVAL.node = str
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo, delim: yyDollar[3].str}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = yyDollar[1].str
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).StringStack.Pop()
			yyVAL.node = regexp
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: Regexp, Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).State.Push(InMethodDefinition)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
