// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const DO_COND = 57421
const DO_BLOCK = 57422
const PRIVATE = 57423
const PROTECTED = 57424
const IVAR = 57425
const CVAR = 57426
const GVAR = 57427
const METHODIDENT = 57428
const IDENT = 57429
const COMMENT = 57430
const LABEL = 57431
const ANDDOT = 57432
const DOT = 57433
const LBRACE = 57434
const LBRACEBLOCK = 57435
const RBRACE = 57436
const NEWLINE = 57437
const COMMA = 57438
const STRINGBEG = 57439
const STRINGEND = 57440
const INTERPBEG = 57441
const INTERPEND = 57442
const STRINGBODY = 57443
const REGEXBEG = 57444
const REGEXEND = 57445
const REGEXPOPT = 57446
const RAWSTRINGBEG = 57447
const RAWSTRINGEND = 57448
const WORDSBEG = 57449
const RAWWORDSBEG = 57450
const XSTRINGBEG = 57451
const RAWXSTRINGBEG = 57452
const SEMICOLON = 57453
const LBRACKET = 57454
const LBRACKETSTART = 57455
const RBRACKET = 57456
const LPAREN = 57457
const LPARENSTART = 57458
const RPAREN = 57459
const HASHROCKET = 57460
const SCOPE = 57461

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"DO_COND",
	"DO_BLOCK",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"ANDDOT",
	"DOT",
	"LBRACE",
	"LBRACEBLOCK",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"XSTRINGBEG",
	"RAWXSTRINGBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	5, 55,
	6, 234,
	7, 234,
	8, 234,
	9, 234,
	10, 234,
	11, 234,
	12, 234,
	96, 51,
	-2, 232,
	-1, 15,
	5, 56,
	6, 235,
	7, 235,
	8, 235,
	9, 235,
	10, 235,
	11, 235,
	12, 235,
	96, 52,
	-2, 233,
	-1, 21,
	90, 169,
	91, 169,
	112, 169,
	119, 169,
	-2, 116,
	-1, 23,
	38, 266,
	40, 266,
	41, 266,
	42, 266,
	44, 266,
	45, 266,
	46, 266,
	47, 266,
	48, 266,
	49, 266,
	50, 266,
	52, 266,
	54, 266,
	61, 266,
	64, 266,
	65, 266,
	66, 266,
	69, 266,
	71, 266,
	74, 266,
	75, 266,
	76, 266,
	78, 266,
	83, 266,
	84, 266,
	85, 266,
	86, 266,
	87, 266,
	89, 266,
	92, 266,
	93, 266,
	97, 266,
	102, 266,
	105, 266,
	107, 266,
	108, 266,
	109, 266,
	110, 266,
	113, 266,
	115, 266,
	116, 266,
	-2, 223,
	-1, 26,
	38, 267,
	40, 267,
	41, 267,
	42, 267,
	44, 267,
	45, 267,
	46, 267,
	47, 267,
	48, 267,
	49, 267,
	50, 267,
	52, 267,
	54, 267,
	61, 267,
	64, 267,
	65, 267,
	66, 267,
	69, 267,
	71, 267,
	74, 267,
	75, 267,
	76, 267,
	78, 267,
	83, 267,
	84, 267,
	85, 267,
	86, 267,
	87, 267,
	89, 267,
	92, 267,
	93, 267,
	97, 267,
	102, 267,
	105, 267,
	107, 267,
	108, 267,
	109, 267,
	110, 267,
	113, 267,
	115, 267,
	116, 267,
	-2, 226,
	-1, 42,
	38, 140,
	40, 140,
	41, 140,
	42, 140,
	44, 140,
	45, 140,
	46, 140,
	47, 140,
	48, 140,
	49, 140,
	50, 140,
	52, 140,
	54, 140,
	61, 140,
	64, 140,
	65, 140,
	66, 140,
	69, 140,
	71, 140,
	74, 140,
	75, 140,
	76, 140,
	83, 140,
	84, 140,
	85, 140,
	86, 140,
	87, 140,
	89, 140,
	92, 140,
	97, 140,
	102, 140,
	105, 140,
	107, 140,
	108, 140,
	109, 140,
	110, 140,
	113, 140,
	116, 140,
	-2, 154,
	-1, 56,
	38, 140,
	40, 140,
	41, 140,
	42, 140,
	44, 140,
	45, 140,
	46, 140,
	47, 140,
	48, 140,
	49, 140,
	50, 140,
	52, 140,
	54, 140,
	61, 140,
	64, 140,
	65, 140,
	66, 140,
	69, 140,
	71, 140,
	74, 140,
	75, 140,
	76, 140,
	83, 140,
	84, 140,
	85, 140,
	86, 140,
	87, 140,
	89, 140,
	92, 140,
	97, 140,
	102, 140,
	105, 140,
	107, 140,
	108, 140,
	109, 140,
	110, 140,
	113, 140,
	116, 140,
	-2, 189,
	-1, 110,
	5, 42,
	-2, 44,
	-1, 118,
	5, 55,
	6, 234,
	7, 234,
	8, 234,
	9, 234,
	10, 234,
	11, 234,
	12, 234,
	-2, 232,
	-1, 119,
	5, 56,
	6, 235,
	7, 235,
	8, 235,
	9, 235,
	10, 235,
	11, 235,
	12, 235,
	-2, 233,
	-1, 148,
	90, 232,
	91, 232,
	112, 232,
	119, 232,
	-2, 51,
	-1, 149,
	90, 233,
	91, 233,
	112, 233,
	119, 233,
	-2, 52,
	-1, 241,
	96, 136,
	-2, 139,
	-1, 248,
	96, 123,
	-2, 126,
	-1, 257,
	5, 58,
	96, 54,
	-2, 266,
	-1, 259,
	38, 140,
	40, 140,
	41, 140,
	42, 140,
	44, 140,
	45, 140,
	46, 140,
	47, 140,
	48, 140,
	49, 140,
	50, 140,
	52, 140,
	54, 140,
	61, 140,
	64, 140,
	65, 140,
	66, 140,
	69, 140,
	71, 140,
	74, 140,
	75, 140,
	76, 140,
	83, 140,
	84, 140,
	85, 140,
	86, 140,
	87, 140,
	89, 140,
	92, 140,
	97, 140,
	102, 140,
	105, 140,
	107, 140,
	108, 140,
	109, 140,
	110, 140,
	113, 140,
	116, 140,
	-2, 62,
	-1, 272,
	15, 0,
	16, 0,
	-2, 91,
	-1, 273,
	15, 0,
	16, 0,
	-2, 92,
	-1, 283,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 104,
	-1, 284,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 106,
	-1, 285,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 107,
	-1, 286,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 108,
	-1, 287,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 109,
	-1, 337,
	1, 128,
	51, 128,
	53, 128,
	55, 128,
	59, 128,
	60, 128,
	62, 128,
	68, 128,
	70, 128,
	72, 128,
	78, 128,
	79, 128,
	88, 128,
	91, 128,
	93, 128,
	94, 128,
	95, 128,
	111, 128,
	117, 128,
	-2, 140,
	-1, 364,
	5, 57,
	96, 53,
	-2, 190,
	-1, 373,
	5, 43,
	-2, 45,
	-1, 374,
	5, 58,
	-2, 266,
	-1, 380,
	5, 54,
	95, 54,
	96, 54,
	117, 54,
	-2, 266,
	-1, 430,
	96, 137,
	-2, 142,
	-1, 432,
	5, 58,
	-2, 266,
	-1, 442,
	5, 57,
	-2, 190,
	-1, 445,
	5, 53,
	95, 53,
	96, 53,
	117, 53,
	-2, 190,
	-1, 473,
	5, 57,
	-2, 190,
}

const yyPrivate = 57344

const yyLast = 1935

var yyAct = [...]int{
	20, 448, 423, 352, 357, 198, 351, 449, 172, 348,
	84, 353, 155, 350, 369, 21, 319, 254, 190, 87,
	113, 244, 263, 349, 83, 298, 168, 304, 82, 311,
	372, 176, 169, 165, 175, 386, 302, 343, 151, 88,
	202, 161, 161, 107, 106, 108, 86, 164, 255, 174,
	327, 425, 451, 177, 462, 107, 106, 256, 161, 107,
	106, 4, 85, 9, 336, 464, 306, 310, 107, 106,
	171, 176, 297, 426, 186, 109, 422, 362, 185, 107,
	106, 270, 365, 194, 105, 306, 305, 104, 271, 360,
	295, 115, 10, 12, 161, 248, 253, 297, 159, 446,
	191, 103, 335, 233, 161, 10, 196, 110, 105, 179,
	179, 294, 342, 179, 339, 197, 345, 251, 113, 193,
	264, 391, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 10, 231, 175, 308, 200, 162,
	11, 242, 242, 179, 179, 179, 179, 266, 301, 341,
	342, 174, 339, 11, 153, 43, 447, 88, 161, 116,
	161, 161, 150, 109, 232, 10, 358, 161, 43, 240,
	359, 303, 109, 385, 43, 428, 10, 10, 358, 320,
	156, 320, 309, 69, 318, 116, 116, 322, 329, 116,
	316, 317, 11, 10, 269, 110, 233, 410, 332, 186,
	43, 43, 10, 326, 43, 406, 262, 43, 313, 315,
	381, 334, 452, 377, 245, 329, 452, 197, 197, 261,
	450, 188, 395, 11, 481, 356, 358, 359, 296, 116,
	116, 116, 116, 116, 250, 250, 179, 470, 43, 359,
	307, 260, 173, 187, 43, 43, 43, 43, 43, 43,
	43, 11, 478, 347, 230, 321, 458, 454, 253, 253,
	11, 161, 411, 10, 243, 10, 43, 303, 208, 201,
	18, 10, 323, 403, 325, 43, 368, 401, 376, 114,
	7, 364, 397, 392, 88, 356, 161, 359, 79, 207,
	112, 86, 5, 7, 382, 189, 161, 333, 128, 195,
	142, 161, 161, 379, 366, 378, 181, 85, 400, 204,
	252, 80, 81, 300, 384, 95, 265, 88, 331, 444,
	161, 11, 116, 11, 86, 399, 161, 161, 363, 11,
	427, 412, 7, 203, 388, 157, 43, 43, 43, 409,
	85, 361, 415, 424, 43, 119, 15, 420, 416, 421,
	161, 161, 253, 161, 414, 183, 161, 253, 253, 15,
	388, 412, 253, 7, 238, 246, 246, 402, 149, 407,
	431, 405, 118, 14, 249, 249, 314, 408, 434, 436,
	267, 10, 55, 438, 94, 93, 14, 247, 247, 303,
	383, 7, 303, 170, 453, 148, 182, 195, 15, 1,
	7, 10, 163, 442, 10, 147, 445, 52, 64, 320,
	394, 459, 10, 396, 461, 457, 468, 460, 161, 466,
	268, 471, 466, 199, 253, 14, 467, 469, 404, 15,
	328, 253, 253, 354, 253, 477, 192, 3, 299, 11,
	178, 468, 346, 10, 303, 474, 355, 161, 10, 10,
	239, 158, 22, 10, 43, 161, 14, 15, 473, 11,
	484, 7, 11, 7, 160, 166, 15, 253, 6, 7,
	11, 2, 483, 373, 43, 68, 205, 43, 37, 488,
	320, 36, 417, 252, 14, 43, 485, 180, 10, 34,
	184, 44, 58, 14, 33, 463, 303, 455, 38, 32,
	89, 250, 90, 370, 479, 39, 250, 250, 321, 91,
	486, 250, 35, 259, 59, 10, 43, 241, 160, 92,
	390, 43, 43, 60, 51, 393, 43, 15, 50, 15,
	234, 235, 236, 237, 10, 15, 62, 88, 89, 10,
	90, 398, 264, 480, 86, 456, 11, 91, 482, 123,
	124, 125, 126, 127, 14, 128, 14, 92, 8, 330,
	85, 43, 14, 367, 344, 63, 371, 10, 125, 126,
	127, 340, 128, 250, 338, 61, 487, 206, 0, 7,
	370, 435, 437, 0, 0, 0, 439, 0, 43, 0,
	116, 312, 11, 143, 145, 144, 146, 11, 0, 7,
	0, 0, 7, 0, 0, 43, 0, 43, 0, 337,
	7, 0, 43, 131, 129, 130, 137, 138, 123, 124,
	125, 126, 127, 324, 128, 11, 0, 465, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 246, 246, 0,
	43, 249, 246, 0, 0, 15, 249, 249, 475, 0,
	0, 249, 0, 0, 247, 435, 437, 0, 439, 247,
	247, 0, 0, 0, 247, 15, 0, 0, 15, 433,
	0, 0, 14, 0, 0, 0, 15, 0, 259, 440,
	441, 0, 443, 0, 0, 0, 7, 0, 419, 0,
	0, 475, 14, 0, 0, 14, 96, 97, 98, 99,
	100, 101, 102, 14, 246, 205, 137, 138, 123, 124,
	125, 126, 127, 249, 128, 418, 205, 129, 130, 137,
	138, 123, 124, 125, 126, 127, 247, 128, 0, 387,
	0, 0, 7, 0, 166, 389, 0, 7, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 15, 160, 0, 0, 0, 0, 0, 413,
	166, 0, 0, 0, 0, 7, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 433, 14,
	0, 0, 0, 429, 430, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	0, 0, 0, 15, 140, 139, 132, 133, 134, 135,
	136, 143, 145, 144, 146, 131, 129, 130, 137, 138,
	123, 124, 125, 126, 127, 14, 128, 0, 0, 0,
	14, 15, 0, 0, 0, 0, 0, 0, 70, 0,
	19, 28, 71, 0, 80, 81, 30, 31, 65, 66,
	67, 472, 45, 0, 46, 0, 0, 0, 14, 0,
	0, 47, 0, 57, 42, 29, 26, 0, 0, 49,
	0, 48, 205, 0, 53, 54, 56, 0, 0, 0,
	387, 16, 17, 24, 27, 25, 79, 23, 88, 0,
	0, 0, 41, 0, 0, 232, 0, 72, 0, 0,
	0, 0, 78, 0, 0, 75, 0, 73, 76, 74,
	77, 0, 0, 40, 0, 70, 13, 19, 28, 71,
	0, 80, 81, 30, 31, 65, 66, 67, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	57, 42, 29, 26, 0, 0, 49, 0, 48, 0,
	0, 53, 54, 56, 0, 0, 0, 0, 0, 0,
	24, 27, 25, 79, 23, 88, 0, 0, 0, 41,
	0, 0, 86, 0, 72, 0, 0, 0, 0, 78,
	0, 0, 75, 0, 73, 76, 74, 77, 85, 0,
	40, 0, 70, 120, 19, 28, 71, 0, 80, 81,
	30, 31, 65, 66, 67, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 57, 42, 29,
	26, 0, 0, 49, 0, 48, 0, 0, 53, 54,
	56, 0, 0, 0, 0, 16, 17, 24, 27, 25,
	79, 23, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 78, 0, 0, 75,
	0, 73, 76, 74, 77, 0, 0, 40, 0, 70,
	13, 19, 28, 71, 0, 80, 81, 30, 31, 65,
	66, 67, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 57, 42, 29, 26, 0, 0,
	49, 0, 48, 0, 0, 53, 54, 56, 0, 0,
	0, 0, 16, 17, 24, 27, 25, 79, 23, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 78, 0, 0, 75, 0, 73, 76,
	74, 77, 0, 0, 40, 0, 70, 111, 117, 28,
	71, 0, 80, 81, 30, 31, 65, 66, 67, 0,
	45, 0, 46, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 152, 29, 26, 0, 0, 49, 0, 48,
	0, 0, 53, 54, 154, 0, 0, 0, 0, 0,
	0, 24, 27, 25, 79, 23, 0, 167, 0, 0,
	41, 0, 0, 264, 0, 72, 0, 0, 0, 0,
	78, 0, 0, 75, 0, 73, 76, 74, 77, 0,
	0, 40, 0, 70, 120, 117, 28, 71, 0, 80,
	81, 30, 31, 65, 66, 67, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 152,
	29, 26, 0, 0, 49, 0, 48, 0, 0, 53,
	54, 154, 0, 0, 0, 0, 0, 0, 24, 27,
	25, 79, 23, 0, 167, 0, 0, 41, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 78, 0, 0,
	75, 0, 73, 76, 74, 77, 0, 0, 40, 0,
	70, 120, 19, 28, 71, 0, 80, 81, 30, 31,
	65, 66, 67, 0, 45, 0, 46, 0, 0, 0,
	0, 0, 0, 47, 0, 57, 42, 29, 26, 0,
	0, 49, 0, 48, 0, 0, 53, 54, 56, 0,
	0, 0, 0, 0, 0, 24, 27, 25, 79, 23,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 78, 0, 0, 75, 0, 73,
	76, 74, 77, 0, 0, 40, 0, 70, 120, 117,
	28, 71, 0, 80, 81, 30, 31, 65, 66, 67,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 57, 42, 29, 26, 0, 0, 49, 0,
	48, 0, 0, 53, 54, 56, 0, 0, 0, 0,
	0, 0, 24, 27, 25, 79, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 78, 0, 0, 75, 0, 73, 76, 74, 77,
	0, 0, 40, 0, 70, 120, 117, 28, 71, 0,
	80, 81, 30, 31, 65, 66, 67, 0, 45, 0,
	46, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	152, 29, 26, 0, 0, 49, 0, 48, 0, 0,
	53, 54, 154, 0, 0, 0, 0, 0, 0, 24,
	27, 25, 79, 23, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 78, 0,
	0, 75, 0, 73, 76, 74, 77, 70, 0, 40,
	28, 71, 120, 80, 81, 30, 31, 65, 66, 67,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 152, 29, 26, 0, 0, 49, 0,
	48, 0, 0, 53, 54, 154, 0, 0, 0, 0,
	0, 0, 24, 27, 25, 79, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 78, 0, 0, 75, 0, 73, 76, 74, 77,
	0, 0, 40, 0, 141, 120, 121, 122, 140, 139,
	132, 133, 134, 135, 136, 143, 145, 144, 146, 131,
	129, 130, 137, 138, 123, 124, 125, 126, 127, 0,
	128, 212, 213, 220, 214, 215, 216, 217, 218, 219,
	211, 209, 210, 221, 222, 223, 224, 225, 226, 227,
	0, 228, 229, 212, 213, 220, 214, 215, 216, 217,
	218, 219, 211, 209, 210, 221, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 207,
	258, 143, 145, 144, 146, 131, 129, 130, 137, 138,
	123, 124, 125, 126, 127, 0, 128, 0, 0, 0,
	79, 432, 212, 213, 220, 214, 215, 216, 217, 218,
	219, 211, 209, 210, 221, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 212, 213, 220, 214, 215, 216,
	217, 218, 219, 211, 209, 210, 221, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 0, 0, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	374, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 380, 212, 213, 220, 214, 215, 216, 217,
	218, 219, 211, 209, 210, 221, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 141, 0, 121, 122, 140,
	139, 132, 133, 134, 135, 136, 143, 145, 144, 146,
	131, 129, 130, 137, 138, 123, 124, 125, 126, 127,
	258, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 257, 139, 132, 133, 134, 135, 136, 143, 145,
	144, 146, 131, 129, 130, 137, 138, 123, 124, 125,
	126, 127, 0, 128, 132, 133, 134, 135, 136, 143,
	145, 144, 146, 131, 129, 130, 137, 138, 123, 124,
	125, 126, 127, 0, 128,
}

var yyPact = [...]int{
	964, -1000, -1000, -49, 495, -1000, 390, 389, -1000, -1000,
	700, -11, -1000, 1041, -1000, -1000, -1000, -1000, -1000, 1349,
	1832, -1000, 1499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 110, -1000, 579, -1000, -1000, -1000, -1000, -1000,
	1426, 1195, -83, -44, 68, 1272, 1272, -1000, -1000, 887,
	165, 165, 964, -1000, -1000, 23, -84, 1195, 57, -1000,
	-1000, -1000, -61, -1000, -1000, -1000, -1000, 1622, -1000, -1000,
	277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 810, -1000, -1000, -1000, -1000, -1000, 1272,
	1272, 1272, 1272, 1349, 1349, 1349, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1195, 1804, 163, -1000, -1000, 25, 457,
	-1000, 1041, -1000, -1000, 385, 700, -31, 1426, -1000, -1000,
	964, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
	1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
	1426, 1426, 1426, -1000, -1000, -1000, -1000, 15, -1000, -1000,
	-22, -1000, -83, -44, -84, -1000, 294, 1426, 25, -10,
	-1000, 1832, -31, 53, -29, -1000, -89, 1426, -1000, 1118,
	1195, -1000, -1000, -1000, 294, 294, 1195, -1000, 206, -1000,
	206, 964, 1272, 964, -49, 128, 79, 302, -1000, 964,
	256, -1000, -49, -1000, -1000, -1000, -1000, 6, -32, -89,
	212, 61, -69, 13, 148, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 495, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -7, -1000, -1000, -1000, -1000, -1000, 1832, 346,
	-35, -1000, -1000, 1832, 25, -1000, -14, 700, 700, -1000,
	-84, 700, -1000, -87, -1000, -1000, 25, 1426, 1426, 1713,
	1195, 157, 797, 797, 543, 543, 269, 269, 269, 269,
	685, 685, 698, 1687, 1687, 1687, 1687, 1687, 526, 526,
	1895, 1874, 1601, 595, -1000, 1195, 1735, 154, 253, 964,
	96, 595, -1000, -79, -1000, 1426, -1000, 1713, -1000, -1000,
	1195, 1426, -1000, 25, -1000, -1000, 27, 242, 25, 964,
	173, -1000, 964, 241, 239, 236, 128, 232, 155, 1426,
	964, 141, 221, -1000, -1000, 1195, 1195, -84, -1000, -1000,
	-1000, -1000, 1499, -1000, -1000, -1000, -1000, 208, -49, -20,
	-45, -1000, -1000, -1000, -23, -1000, 335, -1000, 98, 1426,
	1426, 1349, 1195, 1644, 700, 1195, 1349, 1349, -1000, -1000,
	-1000, 1349, -1000, -1000, 700, 700, 25, 700, 315, 25,
	-1000, -1000, -1000, -1000, 70, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 162, -1000, 166, -1000, -1000, -1000,
	-1000, -1000, 216, -1000, -1000, -1000, 964, -1000, 459, 215,
	-49, -1000, -32, -89, 110, 68, -46, -47, -1000, -1000,
	25, -1000, 208, -1000, -1000, 160, 91, 1426, -1000, -1000,
	-1000, 25, 700, 1349, -1000, -1000, -1000, -1000, -1000, -1000,
	1426, 1426, 700, 1426, 1426, -1000, -1000, 96, 211, -1000,
	1272, -1000, 964, 183, -1000, -1000, 1426, 964, -1000, -1000,
	-1000, -1000, -1000, 1622, 1195, -1000, -1000, -45, -1000, -1000,
	335, -1000, -1000, 700, -1000, -1000, 1426, 1832, -1000, 206,
	-1000, -1000, -1000, 25, -1000, 964, -1000, 162, -1000,
}

var yyPgo = [...]int{
	0, 164, 418, 216, 587, 251, 16, 10, 310, 36,
	585, 584, 279, 581, 575, 574, 253, 314, 569, 568,
	551, 546, 538, 534, 19, 87, 533, 524, 382, 355,
	193, 63, 0, 15, 522, 289, 515, 91, 149, 450,
	302, 21, 509, 280, 508, 316, 504, 502, 224, 433,
	501, 61, 1, 7, 52, 499, 491, 488, 392, 485,
	100, 446, 481, 478, 93, 462, 45, 57, 48, 17,
	252, 14, 461, 26, 179, 460, 3, 4, 11, 456,
	452, 9, 23, 448, 443, 2, 6, 13, 18, 440,
	50, 438, 25, 8, 12, 417, 33, 5, 412, 409,
	28, 24, 406, 22, 27, 403,
}

var yyR1 = [...]int{
	0, 99, 62, 88, 60, 61, 61, 61, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 40, 40,
	40, 40, 40, 40, 41, 41, 31, 31, 31, 39,
	102, 45, 43, 43, 46, 46, 1, 42, 42, 42,
	42, 42, 63, 63, 66, 66, 64, 64, 58, 65,
	65, 59, 59, 59, 59, 35, 35, 35, 35, 22,
	23, 16, 5, 5, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 8, 8, 8,
	8, 55, 55, 49, 72, 72, 48, 70, 71, 71,
	69, 69, 69, 68, 68, 68, 67, 67, 75, 75,
	105, 73, 74, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 38,
	6, 6, 6, 20, 20, 52, 52, 53, 53, 83,
	83, 94, 47, 47, 47, 47, 50, 50, 50, 50,
	50, 93, 93, 92, 90, 89, 91, 91, 91, 34,
	34, 56, 57, 21, 21, 21, 10, 10, 10, 11,
	12, 12, 12, 13, 44, 14, 15, 95, 26, 27,
	27, 30, 30, 28, 28, 28, 28, 28, 29, 29,
	29, 29, 36, 36, 37, 37, 18, 18, 80, 80,
	86, 86, 85, 85, 81, 81, 81, 81, 81, 76,
	82, 82, 77, 77, 84, 84, 78, 87, 87, 79,
	98, 98, 97, 97, 96, 96, 2, 2, 2, 25,
	25, 100, 100, 103, 103, 3, 9, 104, 104, 104,
	7, 7, 7, 24, 101, 101, 101, 54, 17, 17,
	17, 17, 17, 17, 17, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	6, 5, 5, 5, 1, 1, 1, 2, 1, 1,
	0, 3, 1, 1, 1, 4, 1, 2, 4, 2,
	2, 2, 1, 3, 1, 3, 1, 2, 1, 2,
	3, 1, 1, 4, 3, 1, 1, 4, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 6, 5, 5,
	5, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 6, 1, 1, 1, 1,
	1, 3, 3, 1, 0, 2, 1, 3, 0, 1,
	0, 1, 2, 1, 1, 3, 1, 3, 1, 1,
	0, 2, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 4, 3, 1, 2, 1, 2, 6, 6,
	4, 4, 5, 4, 5, 4, 3, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 5, 1, 2, 0,
	3, 3, 2, 4, 5, 5, 2, 4, 2, 1,
	4, 3, 3, 2, 2, 4, 1, 2, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 3, 1, 1, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 3, 2,
	1, 1, 2, 0, 4, 2, 2, 1, 0, 1,
	1, 3, 2, 1, 1, 3, 3, 1, 3, 2,
	0, 2, 1, 3, 3, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -99, -62, -61, -51, -40, -63, -35, -19, -31,
	-37, -38, -64, 116, -28, -29, 81, 82, -43, 40,
	-32, -33, -65, 87, 83, 85, 66, 84, 41, 65,
	46, 47, -42, -46, -55, -34, -56, -57, -44, -36,
	113, 92, 64, -1, -50, 52, 54, 61, 71, 69,
	-22, -23, -95, 74, 75, -58, 76, 63, -47, -27,
	-26, -10, -21, -14, -2, 48, 49, 50, -59, -30,
	38, 42, 97, 107, 109, 105, 108, 110, 102, 86,
	44, 45, -100, -101, -7, 111, 95, -24, 88, 53,
	55, 62, 72, 5, 5, -17, 6, 7, 8, 9,
	10, 11, 12, 112, -25, 119, 91, 90, -66, -51,
	-64, 116, -43, -32, -35, -37, -38, 40, -28, -29,
	116, 15, 16, 33, 34, 35, 36, 37, 39, 29,
	30, 28, 19, 20, 21, 22, 23, 31, 32, 18,
	17, 13, -8, 24, 26, 25, 27, -58, -28, -29,
	-38, -33, 64, -1, 76, -94, 80, -8, -72, -67,
	-49, -32, -38, -98, -97, -96, -49, 89, -73, 115,
	-105, -73, -93, -70, 93, 78, 115, -93, -39, -31,
	-39, -45, -102, -45, -39, -100, -101, -16, 66, -16,
	-88, -60, -61, 96, -73, -70, -68, -67, -97, -49,
	91, -12, 101, -12, -5, -2, -4, 87, 66, 29,
	30, 28, 19, 20, 22, 23, 24, 25, 26, 27,
	21, 31, 32, 33, 34, 35, 36, 37, 39, 40,
	-30, -51, 95, -24, -39, -39, -39, -39, -43, -75,
	-74, -49, -67, -74, -41, -48, -43, -40, -32, -35,
	-38, -41, -48, -32, -69, -68, -67, 87, 66, -2,
	-5, 66, -3, -103, 95, -3, -66, 5, -17, -25,
	112, 119, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, 96, 112, -25, 119, -92, -83,
	29, -32, -9, -103, -104, 96, 95, -25, 94, -104,
	96, 118, -49, -68, -3, -68, -92, -92, -69, -6,
	-7, 59, -6, -60, -39, -60, -100, -90, -89, 70,
	-18, 26, -88, 51, -100, 96, 96, -2, -11, 101,
	-13, 98, 99, 106, -15, 103, -80, 115, -81, -82,
	-87, -86, -76, -78, -84, -79, 87, -77, 28, 89,
	96, 5, 112, -25, -9, 96, -17, -17, -73, -71,
	-70, -17, 117, -3, 87, 66, -69, 66, -103, -69,
	87, 66, 51, -60, -82, 87, 114, -49, -96, -49,
	-3, 94, 51, -3, -60, 59, -60, 51, -20, -7,
	79, 51, -90, 51, -91, -54, 60, -90, -67, -88,
	66, 51, -97, -49, -73, -71, -33, -38, -28, -29,
	-81, -7, 96, -85, -85, 96, 96, 5, 87, -49,
	-49, -69, 87, -17, -41, -48, -41, -48, -41, -48,
	-17, -17, -9, -17, 14, -9, 29, 96, -52, -53,
	68, -54, 60, -53, 51, -60, 96, -6, 51, -7,
	-94, -93, 100, -25, 112, -3, -86, -87, -76, -78,
	87, -77, -49, -9, -41, -48, -17, -32, 51, -31,
	-60, 51, -60, -69, -85, -6, -9, -60, -52,
}

var yyDef = [...]int{
	5, -2, 1, 271, 6, 12, 0, 0, 16, 17,
	0, 0, 42, 0, -2, -2, 295, 296, 26, 0,
	28, -2, 46, -2, 224, 225, -2, 227, 228, 229,
	230, 231, 32, 33, 105, 143, 144, 145, 146, 147,
	124, 260, -2, 140, 156, 0, 0, 30, 30, 271,
	0, 0, 5, 167, 168, 0, -2, 0, 34, 199,
	200, 212, 0, 212, 36, 59, 60, 0, 48, 219,
	0, 218, 206, 207, 208, 203, 204, 205, 215, 268,
	221, 222, 2, 272, 284, 280, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 290, 291,
	292, 293, 294, 130, 0, 0, 269, 270, 273, 273,
	-2, 0, 27, 110, 0, 0, 0, 0, -2, -2,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 118, 119, 120, 47, -2, -2,
	0, 169, 154, 0, 189, 182, 179, 0, 273, 277,
	136, 123, 0, 0, 277, 262, 0, 0, 40, 273,
	0, 37, 155, 186, 179, 179, 130, 157, 0, 29,
	0, 5, 0, 5, 271, 0, 272, 236, 61, 5,
	0, 3, 271, 49, 39, 188, 41, 133, 134, 136,
	0, 0, 0, 0, 248, 62, 63, 266, 267, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	220, 7, 285, 286, 8, 9, 10, 11, 13, 15,
	138, -2, 0, 14, 18, 85, 24, 25, -2, 0,
	0, 19, 86, 126, 273, 131, 133, -2, 267, -2,
	128, 149, 43, 0, 274, 148, 273, 0, 0, 0,
	130, 0, -2, -2, 95, 96, 97, 98, 99, 100,
	101, 102, 103, -2, -2, -2, -2, -2, 111, 112,
	113, 114, 273, 121, 50, 130, 0, 0, 0, 5,
	0, 122, 150, 0, 125, 279, 278, 0, 151, 261,
	279, 0, 265, 273, 153, 141, 0, 0, 273, 5,
	170, 171, 5, 0, 0, 0, 0, 0, 287, 0,
	5, 0, 0, 166, 4, 0, 0, -2, 201, 210,
	211, 209, 0, 202, 214, 216, 217, 248, 0, 243,
	243, 247, 250, 257, 240, 241, 249, 254, 0, 253,
	0, 0, 130, 0, -2, 132, 0, 0, 38, 187,
	129, 0, 275, -2, -2, 267, 273, 149, 0, 273,
	-2, 149, 181, 193, 0, 249, 276, 137, 263, 264,
	152, 191, 192, 127, 287, 172, 287, 160, 31, 173,
	174, 161, 0, 163, 194, 196, 5, 198, 0, 0,
	0, 165, 135, 137, 35, 183, 169, 0, 232, 233,
	273, 239, 0, 245, 246, 0, 0, 0, 259, 252,
	-2, 273, -2, 0, 21, 88, 22, 89, 23, 90,
	0, 0, -2, 0, 0, -2, 180, 0, 0, 175,
	0, 177, 5, 0, 162, 197, 0, 5, 164, 237,
	185, 184, 213, 0, 130, 238, 242, 243, 251, 258,
	0, 255, 256, -2, 20, 87, 0, 115, 158, 0,
	178, 159, 195, 273, 244, 5, 190, 287, 176,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[1].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = []Node{yyDollar[1].node}
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[3].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yylex.(*Lexer).cond.Push(true)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*Lexer).cond.Pop()
			yyVAL.node = yyDollar[2].node
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = CLASS
			yyVAL.str = yyDollar[1].str
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = MODULE
			yyVAL.str = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).nextConstantType == MODULE {
				root(yylex).PushModule(yyDollar[1].str, currentLineNo)
			} else {
				root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			}
			yyVAL.str = yyDollar[1].str
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True:       Statements{yyDollar[6].node},
					elseBranch: true,
				},
				lineNo: currentLineNo,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			if yyrcvr.Lookahead() == LBRACKETSTART || yyrcvr.Lookahead() == LPARENSTART {
				top := yylex.(*Lexer).cmdArg.Pop()
				yylex.(*Lexer).cmdArg.Push(true)
				yylex.(*Lexer).cmdArg.Push(top)
			} else {
				yylex.(*Lexer).cmdArg.Push(true)
			}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			/*
			 # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
			 # but the push must be done after cmdarg.pop() in the parser.
			 # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
			 # cmdarg.pop() to pop 1 pushed by command_args,
			 # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
			 last_token = @last_token[0]
			 lookahead = last_token == :tLBRACE_ARG
			 if lookahead
			   top = @lexer.cmdarg.pop
			   @lexer.cmdarg.pop
			   @lexer.cmdarg.push(top)
			 else
			   @lexer.cmdarg.pop
			 end
			*/
			yylex.(*Lexer).cmdArg.Pop()
			yyVAL.args = yyDollar[2].args
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, lineNo: currentLineNo}
			call.SetBlock(yyDollar[2].blk)
			yyVAL.node = call
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			r := root(yylex)
			module := r.PopModule()
			if parent := r.moduleStack.Peek(); parent != nil {
				parent.Modules = append(parent.Modules, module)
			} else {
				r.TopLevelModules = append(r.TopLevelModules, module)
			}
			yyVAL.node = module
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).State.Pop()
			yyVAL.node = yyDollar[1].meth
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BreakNode{lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NextNode{lineNo: currentLineNo}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo, elseBranch: true}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, Op: yyDollar[2].str, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SuperNode{Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			str := root(yylex).StringStack.Pop()
			str.delim = yyDollar[3].str
			yyVAL.node = str
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo, delim: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).StringStack.Pop()
			yyVAL.node = regexp
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: Regexp, Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).State.Push(InMethodDefinition)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: strings.TrimSpace(yyDollar[1].str), LineNo: currentLineNo})
			yyVAL.str = yyDollar[1].str
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
