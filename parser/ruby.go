// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Program
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Program {
	return yylex.(*Lexer).Program
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	program   *Program
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const QMARK = 57353
const COLON = 57354
const DOT2 = 57355
const DOT3 = 57356
const LOGICALOR = 57357
const LOGICALAND = 57358
const SPACESHIP = 57359
const EQ = 57360
const NEQ = 57361
const MATCH = 57362
const NOTMATCH = 57363
const GT = 57364
const GTE = 57365
const LT = 57366
const LTE = 57367
const AND = 57368
const PIPE = 57369
const CARET = 57370
const LSHIFT = 57371
const RSHIFT = 57372
const PLUS = 57373
const MINUS = 57374
const ASTERISK = 57375
const SLASH = 57376
const MODULO = 57377
const UNARY_NUM = 57378
const POW = 57379
const BANG = 57380
const NIL = 57381
const SYMBOL = 57382
const STRING = 57383
const INT = 57384
const FLOAT = 57385
const TRUE = 57386
const FALSE = 57387
const CLASS = 57388
const MODULE = 57389
const DEF = 57390
const END = 57391
const IF = 57392
const UNLESS = 57393
const BEGIN = 57394
const RESCUE = 57395
const THEN = 57396
const ELSE = 57397
const WHILE = 57398
const RETURN = 57399
const YIELD = 57400
const SELF = 57401
const CONSTANT = 57402
const ENSURE = 57403
const ELSIF = 57404
const CASE = 57405
const WHEN = 57406
const UNTIL = 57407
const FOR = 57408
const BREAK = 57409
const NEXT = 57410
const SUPER = 57411
const ALIAS = 57412
const DO = 57413
const IVAR = 57414
const CVAR = 57415
const GVAR = 57416
const METHODIDENT = 57417
const IDENT = 57418
const COMMENT = 57419
const LABEL = 57420
const DOT = 57421
const LBRACE = 57422
const RBRACE = 57423
const NEWLINE = 57424
const COMMA = 57425
const STRINGBEG = 57426
const STRINGEND = 57427
const INTERPBEG = 57428
const INTERPEND = 57429
const STRINGBODY = 57430
const REGEXBEG = 57431
const REGEXEND = 57432
const REGEXPOPT = 57433
const RAWSTRINGBEG = 57434
const RAWSTRINGEND = 57435
const SEMICOLON = 57436
const LBRACKET = 57437
const RBRACKET = 57438
const LPAREN = 57439
const RPAREN = 57440
const HASHROCKET = 57441
const SCOPE = 57442

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"UNLESS",
	"BEGIN",
	"RESCUE",
	"THEN",
	"ELSE",
	"WHILE",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"SEMICOLON",
	"LBRACKET",
	"RBRACKET",
	"LPAREN",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 13,
	5, 31,
	6, 174,
	7, 174,
	8, 174,
	9, 174,
	10, 174,
	83, 28,
	-2, 172,
	-1, 14,
	5, 32,
	6, 175,
	7, 175,
	8, 175,
	9, 175,
	10, 175,
	83, 29,
	-2, 173,
	-1, 20,
	79, 123,
	95, 123,
	-2, 85,
	-1, 21,
	36, 204,
	38, 204,
	39, 204,
	40, 204,
	42, 204,
	43, 204,
	44, 204,
	45, 204,
	46, 204,
	48, 204,
	50, 204,
	51, 204,
	59, 204,
	60, 204,
	63, 204,
	72, 204,
	73, 204,
	74, 204,
	75, 204,
	76, 204,
	78, 204,
	80, 204,
	84, 204,
	89, 204,
	92, 204,
	97, 204,
	-2, 163,
	-1, 24,
	36, 205,
	38, 205,
	39, 205,
	40, 205,
	42, 205,
	43, 205,
	44, 205,
	45, 205,
	46, 205,
	48, 205,
	50, 205,
	51, 205,
	59, 205,
	60, 205,
	63, 205,
	72, 205,
	73, 205,
	74, 205,
	75, 205,
	76, 205,
	78, 205,
	80, 205,
	84, 205,
	89, 205,
	92, 205,
	97, 205,
	-2, 166,
	-1, 105,
	79, 172,
	95, 172,
	-2, 28,
	-1, 106,
	79, 173,
	95, 173,
	-2, 29,
	-1, 114,
	5, 31,
	6, 174,
	7, 174,
	8, 174,
	9, 174,
	10, 174,
	-2, 172,
	-1, 115,
	5, 32,
	6, 175,
	7, 175,
	8, 175,
	9, 175,
	10, 175,
	-2, 173,
	-1, 192,
	13, 0,
	14, 0,
	-2, 60,
	-1, 193,
	13, 0,
	14, 0,
	-2, 61,
	-1, 203,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 73,
	-1, 204,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 75,
	-1, 205,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 76,
	-1, 206,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 77,
	-1, 207,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 78,
	-1, 275,
	5, 33,
	83, 30,
	-2, 135,
	-1, 320,
	5, 30,
	83, 30,
	-2, 135,
	-1, 321,
	5, 33,
	-2, 135,
}

const yyPrivate = 57344

const yyLast = 1070

var yyAct = [...]int{
	126, 12, 275, 324, 116, 15, 312, 123, 214, 7,
	270, 262, 264, 147, 240, 267, 266, 64, 20, 325,
	111, 107, 245, 146, 263, 119, 236, 276, 216, 265,
	327, 62, 125, 215, 230, 108, 70, 152, 227, 186,
	354, 282, 12, 12, 12, 121, 12, 133, 319, 47,
	15, 139, 139, 139, 229, 63, 257, 150, 109, 31,
	122, 122, 113, 9, 12, 120, 128, 130, 15, 336,
	189, 189, 112, 8, 314, 142, 226, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 143,
	31, 31, 31, 153, 31, 103, 315, 67, 9, 322,
	191, 220, 66, 269, 311, 271, 277, 242, 8, 103,
	274, 337, 31, 103, 65, 225, 9, 184, 31, 31,
	224, 103, 9, 9, 261, 223, 8, 115, 14, 219,
	67, 217, 8, 8, 242, 66, 332, 102, 232, 235,
	222, 232, 231, 153, 106, 243, 241, 65, 241, 218,
	117, 114, 13, 272, 239, 323, 180, 67, 234, 182,
	271, 181, 66, 244, 288, 256, 233, 253, 105, 259,
	251, 137, 291, 14, 65, 255, 256, 344, 253, 271,
	136, 269, 247, 271, 5, 124, 32, 143, 328, 156,
	300, 14, 4, 185, 304, 326, 145, 13, 328, 247,
	294, 351, 348, 122, 54, 155, 334, 11, 120, 330,
	297, 55, 189, 189, 292, 13, 149, 250, 280, 60,
	61, 83, 281, 283, 131, 134, 238, 249, 12, 97,
	273, 12, 15, 279, 12, 15, 138, 318, 15, 12,
	316, 289, 221, 15, 293, 69, 68, 295, 110, 285,
	1, 308, 191, 290, 188, 188, 179, 296, 285, 301,
	132, 313, 303, 309, 190, 305, 302, 299, 178, 151,
	310, 30, 45, 320, 321, 283, 183, 187, 187, 140,
	141, 78, 79, 80, 81, 82, 31, 83, 104, 31,
	9, 12, 31, 9, 135, 15, 9, 31, 148, 3,
	8, 9, 298, 8, 331, 329, 8, 333, 246, 347,
	241, 8, 335, 228, 341, 268, 345, 12, 342, 12,
	343, 237, 260, 15, 12, 118, 349, 339, 15, 129,
	342, 340, 350, 278, 340, 16, 353, 352, 355, 80,
	81, 82, 10, 83, 6, 2, 357, 12, 46, 31,
	35, 15, 359, 9, 356, 34, 18, 241, 40, 36,
	358, 17, 37, 8, 33, 14, 48, 49, 14, 248,
	144, 14, 258, 52, 254, 31, 14, 31, 252, 50,
	154, 9, 31, 338, 307, 0, 9, 0, 0, 13,
	0, 8, 13, 0, 0, 13, 8, 0, 0, 0,
	13, 98, 100, 99, 101, 31, 0, 0, 306, 9,
	0, 284, 134, 286, 0, 0, 0, 287, 0, 8,
	0, 134, 71, 72, 73, 74, 75, 0, 14, 0,
	0, 0, 0, 131, 98, 100, 99, 101, 86, 84,
	85, 92, 93, 78, 79, 80, 81, 82, 0, 83,
	0, 0, 13, 0, 0, 0, 14, 317, 0, 0,
	0, 14, 0, 284, 86, 84, 85, 92, 93, 78,
	79, 80, 81, 82, 0, 83, 0, 0, 0, 0,
	13, 0, 0, 0, 14, 13, 56, 0, 19, 26,
	57, 0, 60, 61, 28, 29, 44, 0, 53, 0,
	41, 42, 346, 0, 0, 0, 0, 32, 13, 27,
	24, 0, 0, 43, 0, 0, 0, 0, 287, 0,
	0, 0, 22, 25, 23, 54, 21, 67, 0, 0,
	39, 0, 66, 0, 58, 0, 0, 0, 0, 59,
	0, 0, 51, 0, 65, 38, 56, 0, 19, 26,
	57, 0, 60, 61, 28, 29, 44, 0, 53, 0,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 27,
	24, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 25, 23, 54, 21, 0, 127, 0,
	39, 0, 0, 0, 58, 0, 0, 0, 0, 59,
	0, 0, 51, 0, 0, 38, 56, 121, 19, 26,
	57, 0, 60, 61, 28, 29, 44, 0, 53, 0,
	41, 42, 0, 0, 0, 0, 0, 32, 0, 27,
	24, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 25, 23, 54, 21, 0, 0, 0,
	39, 0, 180, 0, 58, 0, 0, 0, 0, 59,
	0, 0, 51, 0, 56, 38, 19, 26, 57, 0,
	60, 61, 28, 29, 44, 0, 53, 0, 41, 42,
	0, 0, 0, 0, 0, 32, 0, 27, 24, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	22, 25, 23, 54, 21, 0, 0, 0, 39, 0,
	0, 0, 58, 0, 0, 0, 0, 59, 0, 0,
	51, 0, 56, 38, 19, 26, 57, 0, 60, 61,
	28, 29, 44, 0, 53, 0, 41, 42, 0, 0,
	0, 0, 0, 0, 0, 27, 24, 0, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 22, 25,
	23, 54, 21, 0, 127, 0, 39, 0, 0, 0,
	58, 0, 0, 0, 0, 59, 0, 0, 51, 0,
	56, 38, 19, 26, 57, 0, 60, 61, 28, 29,
	44, 0, 53, 0, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 27, 24, 0, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 22, 25, 23, 54,
	21, 0, 0, 0, 39, 0, 0, 0, 58, 0,
	0, 0, 0, 59, 56, 0, 51, 26, 57, 38,
	60, 61, 28, 29, 44, 0, 53, 0, 41, 42,
	0, 0, 0, 0, 0, 0, 0, 27, 24, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	22, 25, 23, 54, 21, 0, 0, 0, 39, 0,
	0, 0, 58, 0, 0, 0, 0, 59, 0, 0,
	51, 0, 96, 38, 76, 77, 95, 94, 87, 88,
	89, 90, 91, 98, 100, 99, 101, 86, 84, 85,
	92, 93, 78, 79, 80, 81, 82, 0, 83, 160,
	161, 168, 162, 163, 164, 165, 166, 167, 159, 157,
	158, 169, 170, 171, 172, 173, 174, 175, 0, 176,
	177, 87, 88, 89, 90, 91, 98, 100, 99, 101,
	86, 84, 85, 92, 93, 78, 79, 80, 81, 82,
	0, 83, 156, 274, 84, 85, 92, 93, 78, 79,
	80, 81, 82, 0, 83, 0, 0, 54, 155, 96,
	0, 76, 77, 95, 94, 87, 88, 89, 90, 91,
	98, 100, 99, 101, 86, 84, 85, 92, 93, 78,
	79, 80, 81, 82, 0, 83, 95, 94, 87, 88,
	89, 90, 91, 98, 100, 99, 101, 86, 84, 85,
	92, 93, 78, 79, 80, 81, 82, 0, 83, 94,
	87, 88, 89, 90, 91, 98, 100, 99, 101, 86,
	84, 85, 92, 93, 78, 79, 80, 81, 82, 0,
	83, 92, 93, 78, 79, 80, 81, 82, 0, 83,
}

var yyPact = [...]int{
	638, -1000, -1000, 30, -1000, -1000, 251, -1000, 250, 426,
	-1000, -1000, 978, -1000, -1000, 52, 808, -1000, 389, 754,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	77, 520, 696, -1000, -1000, -1000, -1000, -1000, 754, 696,
	110, 638, 638, 460, 146, 638, -1000, -1000, -1000, -1000,
	-1000, -31, -1000, 912, -1000, -1000, 187, -1000, -1000, -1000,
	-1000, -1000, -1000, 580, -1000, -1000, 94, 87, 139, 638,
	638, -1000, -1000, -1000, -1000, -1000, 754, 754, 754, 754,
	754, 754, 754, 754, 754, 754, 754, 754, 754, 754,
	754, 754, 754, 754, 754, 754, 754, 754, -1000, -1000,
	-1000, -1000, 696, 912, 76, -1000, -1000, 44, -1000, -52,
	754, -1000, 247, 426, -1000, -1000, 40, -1000, -1000, -1000,
	-1000, 696, 42, -7, -61, -1000, 978, 754, -1000, -42,
	69, -1000, 95, 66, -61, -1000, 209, 209, 90, -1000,
	90, 30, 128, 84, 213, -1000, 178, -1000, 30, 100,
	-37, 89, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 81, -1000, -1000, 696, -1000, -1000, -1000, -1000, 978,
	-1000, -1000, 1001, 1001, 316, 316, 194, 194, 194, 194,
	1032, 1032, 947, 422, 422, 422, 422, 422, 260, 260,
	934, 1023, 891, 448, 38, -1000, 33, -52, -1000, 696,
	448, 754, 754, 696, -57, 696, 696, 754, -1000, -1000,
	-1000, 754, -1000, -1000, -1000, 696, 93, 638, 106, 175,
	638, 156, -1000, 638, 128, 171, 145, 754, 638, 144,
	-1000, -1000, -1000, -1000, -1000, -1000, 808, -1000, -1000, -1000,
	-1000, 115, 30, 31, -9, -1000, -1000, -1000, 23, 245,
	-1000, 754, -1000, 235, -1000, -1000, -48, 696, -1000, -1000,
	38, 38, -1000, -7, -61, -1000, -1000, -1000, -1000, -1000,
	82, -1000, -1000, 143, -1000, 153, 170, -1000, -1000, -1000,
	638, -1000, 63, 167, 30, -18, -1000, -1000, 26, 38,
	-1000, 115, -1000, -1000, 111, 92, 754, -1000, 754, -1000,
	-1000, -1000, -1000, 106, 163, -1000, 638, -1000, 638, 162,
	-1000, -1000, 754, 638, -1000, -1000, -1000, 696, -1000, -58,
	-1000, -9, -1000, -1000, 245, -1000, -1000, 978, -1000, 90,
	-1000, -1000, -1000, 38, -1000, -1000, 638, -1000, 143, -1000,
}

var yyPgo = [...]int{
	0, 58, 49, 393, 390, 37, 14, 17, 239, 2,
	389, 388, 226, 384, 383, 382, 380, 36, 379, 377,
	376, 161, 137, 221, 9, 0, 18, 374, 72, 372,
	62, 4, 246, 194, 203, 371, 217, 369, 39, 195,
	368, 202, 3, 19, 30, 366, 365, 360, 281, 358,
	13, 308, 355, 354, 352, 345, 28, 33, 8, 25,
	343, 339, 335, 16, 10, 15, 332, 11, 24, 331,
	325, 6, 29, 12, 23, 318, 22, 312, 26, 304,
	282, 32, 7, 270, 260, 31, 55, 27, 34,
}

var yyR1 = [...]int{
	0, 84, 52, 74, 50, 51, 51, 51, 41, 41,
	41, 33, 33, 34, 34, 24, 24, 32, 36, 1,
	35, 35, 53, 54, 54, 48, 55, 55, 49, 49,
	49, 28, 28, 28, 16, 5, 5, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 8, 8, 8, 8,
	45, 45, 39, 61, 61, 38, 59, 60, 60, 58,
	58, 58, 57, 57, 57, 56, 56, 62, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 31, 6, 6, 6, 42, 42, 43,
	43, 69, 69, 40, 40, 40, 79, 79, 78, 76,
	75, 77, 77, 77, 27, 27, 46, 47, 10, 11,
	12, 12, 12, 13, 37, 14, 15, 80, 19, 20,
	20, 23, 23, 21, 21, 21, 21, 21, 22, 22,
	22, 22, 29, 29, 30, 30, 18, 18, 66, 66,
	72, 71, 71, 67, 67, 67, 67, 67, 63, 68,
	68, 64, 64, 70, 70, 65, 73, 73, 83, 83,
	82, 82, 81, 81, 2, 2, 2, 85, 85, 87,
	87, 3, 9, 88, 88, 88, 7, 7, 7, 7,
	86, 86, 44, 17, 17, 17, 17, 17,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 3, 1, 1,
	4, 1, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 6, 1, 1, 1, 1, 1,
	3, 3, 1, 0, 2, 1, 3, 0, 1, 0,
	1, 2, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 2, 6, 6, 5,
	4, 5, 3, 1, 1, 1, 2, 1, 5, 1,
	2, 0, 3, 2, 4, 4, 3, 3, 2, 2,
	4, 1, 2, 1, 1, 1, 3, 3, 1, 1,
	2, 2, 0, 3, 3, 1, 1, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 3, 2,
	1, 2, 0, 4, 2, 2, 1, 0, 1, 1,
	3, 2, 1, 1, 3, 3, 1, 3, 0, 2,
	1, 3, 3, 2, 1, 1, 1, 0, 1, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 2, 3,
	1, 2, 0, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -84, -52, -51, -41, -33, -53, -24, -28, -30,
	-54, -36, -25, -21, -22, -31, -55, -35, -45, 38,
	-26, 76, 72, 74, 60, 73, 39, 59, 44, 45,
	-48, -1, 57, -27, -46, -47, -37, -29, 95, 80,
	-40, 50, 51, 63, 46, -80, -49, -2, -20, -19,
	-10, 92, -14, 48, 75, -23, 36, 40, 84, 89,
	42, 43, -85, -86, -7, 94, 82, 77, 5, 5,
	-17, 6, 7, 8, 9, 10, 13, 14, 31, 32,
	33, 34, 35, 37, 27, 28, 26, 17, 18, 19,
	20, 21, 29, 30, 16, 15, 11, -8, 22, 24,
	23, 25, 95, 79, -48, -21, -22, -31, -26, -1,
	-8, -25, -28, -30, -21, -22, -31, 83, -62, -59,
	-57, 97, -56, -82, -39, -81, -25, 78, -57, -61,
	-56, -39, -83, -82, -39, -79, 80, 71, -32, -24,
	-32, -32, -85, -86, -16, 60, -74, -50, -51, -12,
	88, -12, -5, -2, -4, 76, 60, 27, 28, 26,
	17, 18, 20, 21, 22, 23, 24, 25, 19, 29,
	30, 31, 32, 33, 34, 35, 37, 38, -23, -41,
	82, 77, 82, -36, -1, -34, -38, -36, -33, -25,
	-34, -38, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -58, -57, -56, -5, 83, 95,
	-25, 5, -17, 95, -58, 83, 83, 99, -39, 96,
	-88, 83, 82, 81, -88, 83, -78, -69, 27, -78,
	-6, -7, 54, -6, -85, -76, -75, 64, -18, 24,
	49, -85, -11, 88, -13, 85, 86, 93, -15, 90,
	-66, 97, -67, -68, -73, -72, -63, -65, -70, 76,
	-64, 78, 82, -87, 82, -9, -87, 83, -60, -59,
	-58, -58, 98, -82, -39, -81, -39, -39, 81, -50,
	-68, 76, 49, -50, 54, -50, -76, 49, -77, -44,
	55, -76, -56, -74, 60, -26, -21, -22, -31, -67,
	-7, 83, -71, -71, 83, 83, 5, -39, 12, 96,
	-9, -9, 27, 83, -42, -43, 62, -44, 55, -43,
	49, -50, 83, -6, 49, -7, 87, 95, -3, -87,
	-72, -73, -63, -65, 76, -64, -39, -25, 49, -24,
	-50, 49, -50, -58, 98, -71, -6, -9, -50, -42,
}

var yyDef = [...]int{
	5, -2, 1, 207, 6, 8, 0, 10, 0, 0,
	22, 15, 16, -2, -2, 0, 23, 18, 74, 0,
	-2, -2, 164, 165, -2, 167, 168, 169, 170, 171,
	0, 0, 0, 108, 109, 110, 111, 112, 93, 198,
	115, 0, 0, 207, 0, 5, 25, 19, 144, 145,
	152, 0, 152, 0, 206, 159, 0, 158, 148, 155,
	161, 162, 2, 208, 220, 216, 217, 0, 0, 0,
	0, 223, 224, 225, 226, 227, 62, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 99, 0, 24, -2, -2, 0, 123, 0,
	0, 79, 0, 0, -2, -2, 0, 26, 20, 133,
	107, 99, 102, 103, 105, 200, 92, 0, 21, 0,
	213, 105, 0, 213, 0, 116, 131, 131, 0, 17,
	0, 207, 0, 208, 176, 34, 0, 3, 207, 0,
	0, 0, 187, 35, 36, 204, 205, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 160, 7,
	221, 0, 218, 9, 0, 11, 58, 13, 14, 95,
	12, 59, -2, -2, 64, 65, 66, 67, 68, 69,
	70, 71, 72, -2, -2, -2, -2, -2, 80, 81,
	82, 83, 209, 90, 209, 100, 102, 97, 27, 99,
	91, 0, 0, 99, 0, 0, 0, 0, 203, 113,
	94, 215, 214, 114, 199, 215, 0, 5, 0, 0,
	5, 124, 125, 5, 0, 0, 222, 0, 5, 0,
	122, 4, 146, 150, 151, 149, 0, 147, 154, 156,
	157, 187, 0, 182, 182, 186, 189, 196, 180, 188,
	193, 192, 219, 0, 210, -2, 0, 101, 134, 98,
	209, 209, 96, 104, 106, 201, 202, 106, 136, 138,
	0, 188, 137, 222, 126, 222, 0, 120, 139, 141,
	5, 143, 0, 0, 0, 123, 172, 173, 0, 209,
	179, 0, 184, 185, 0, 0, 0, 191, 0, 212,
	-2, -2, 132, 0, 0, 127, 0, 129, 5, 0,
	119, 142, 0, 5, 121, 177, 153, 99, 178, 0,
	181, 182, 190, 197, 0, 194, 195, 84, 117, 0,
	130, 118, 140, 209, 211, 183, 5, 135, 222, 128,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = ""
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.Block = yyDollar[2].blk
			if yylex.(*Lexer).blockDepth == 0 {
				call.RawBlock = yylex.(*Lexer).lastParsedToken.RawBlock
			}
			yyVAL.node = call
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.blk = &Block{Params: yyDollar[1].params, Body: &Body{Statements: yyDollar[2].node_list}}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: SingleQuote, lineNo: currentLineNo}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			regexp.Kind = Regexp
			yyVAL.node = regexp
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				method.AddParam(p)
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.ivars[ivar.NormalizedVal()] = &IVar{Name: ivar.NormalizedVal()}
				cls.ivarOrder = append(cls.ivarOrder, ivar.NormalizedVal())
			}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
