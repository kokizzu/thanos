// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Program
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Program {
	return yylex.(*Lexer).Program
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	program   *Program
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const QMARK = 57353
const COLON = 57354
const DOT2 = 57355
const DOT3 = 57356
const LOGICALOR = 57357
const LOGICALAND = 57358
const SPACESHIP = 57359
const EQ = 57360
const NEQ = 57361
const MATCH = 57362
const NOTMATCH = 57363
const GT = 57364
const GTE = 57365
const LT = 57366
const LTE = 57367
const AND = 57368
const PIPE = 57369
const CARET = 57370
const LSHIFT = 57371
const RSHIFT = 57372
const PLUS = 57373
const MINUS = 57374
const ASTERISK = 57375
const SLASH = 57376
const MODULO = 57377
const UNARY_NUM = 57378
const POW = 57379
const BANG = 57380
const NIL = 57381
const SYMBOL = 57382
const STRING = 57383
const INT = 57384
const FLOAT = 57385
const TRUE = 57386
const FALSE = 57387
const CLASS = 57388
const MODULE = 57389
const DEF = 57390
const END = 57391
const IF = 57392
const UNLESS = 57393
const BEGIN = 57394
const RESCUE = 57395
const THEN = 57396
const ELSE = 57397
const WHILE = 57398
const RETURN = 57399
const YIELD = 57400
const SELF = 57401
const CONSTANT = 57402
const ENSURE = 57403
const ELSIF = 57404
const CASE = 57405
const WHEN = 57406
const UNTIL = 57407
const FOR = 57408
const BREAK = 57409
const NEXT = 57410
const SUPER = 57411
const ALIAS = 57412
const DO = 57413
const PRIVATE = 57414
const PROTECTED = 57415
const IVAR = 57416
const CVAR = 57417
const GVAR = 57418
const METHODIDENT = 57419
const IDENT = 57420
const COMMENT = 57421
const LABEL = 57422
const DOT = 57423
const LBRACE = 57424
const RBRACE = 57425
const NEWLINE = 57426
const COMMA = 57427
const STRINGBEG = 57428
const STRINGEND = 57429
const INTERPBEG = 57430
const INTERPEND = 57431
const STRINGBODY = 57432
const REGEXBEG = 57433
const REGEXEND = 57434
const REGEXPOPT = 57435
const RAWSTRINGBEG = 57436
const RAWSTRINGEND = 57437
const SEMICOLON = 57438
const LBRACKET = 57439
const LBRACKETSTART = 57440
const RBRACKET = 57441
const LPAREN = 57442
const LPARENSTART = 57443
const RPAREN = 57444
const HASHROCKET = 57445
const SCOPE = 57446

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"UNLESS",
	"BEGIN",
	"RESCUE",
	"THEN",
	"ELSE",
	"WHILE",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 16,
	5, 32,
	6, 176,
	7, 176,
	8, 176,
	9, 176,
	10, 176,
	85, 29,
	-2, 174,
	-1, 17,
	5, 33,
	6, 177,
	7, 177,
	8, 177,
	9, 177,
	10, 177,
	85, 30,
	-2, 175,
	-1, 23,
	81, 125,
	97, 125,
	-2, 86,
	-1, 24,
	36, 206,
	38, 206,
	39, 206,
	40, 206,
	42, 206,
	43, 206,
	44, 206,
	45, 206,
	46, 206,
	48, 206,
	50, 206,
	51, 206,
	59, 206,
	60, 206,
	63, 206,
	74, 206,
	75, 206,
	76, 206,
	77, 206,
	78, 206,
	80, 206,
	82, 206,
	86, 206,
	91, 206,
	94, 206,
	98, 206,
	100, 206,
	101, 206,
	-2, 165,
	-1, 27,
	36, 207,
	38, 207,
	39, 207,
	40, 207,
	42, 207,
	43, 207,
	44, 207,
	45, 207,
	46, 207,
	48, 207,
	50, 207,
	51, 207,
	59, 207,
	60, 207,
	63, 207,
	74, 207,
	75, 207,
	76, 207,
	77, 207,
	78, 207,
	80, 207,
	82, 207,
	86, 207,
	91, 207,
	94, 207,
	98, 207,
	100, 207,
	101, 207,
	-2, 168,
	-1, 109,
	81, 174,
	97, 174,
	-2, 29,
	-1, 110,
	81, 175,
	97, 175,
	-2, 30,
	-1, 118,
	5, 32,
	6, 176,
	7, 176,
	8, 176,
	9, 176,
	10, 176,
	-2, 174,
	-1, 119,
	5, 33,
	6, 177,
	7, 177,
	8, 177,
	9, 177,
	10, 177,
	-2, 175,
	-1, 197,
	13, 0,
	14, 0,
	-2, 61,
	-1, 198,
	13, 0,
	14, 0,
	-2, 62,
	-1, 208,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 74,
	-1, 209,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 76,
	-1, 210,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 77,
	-1, 211,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 78,
	-1, 212,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 79,
	-1, 282,
	5, 34,
	85, 31,
	-2, 137,
	-1, 328,
	5, 31,
	85, 31,
	-2, 137,
	-1, 329,
	5, 34,
	-2, 137,
}

const yyPrivate = 57344

const yyLast = 1192

var yyAct = [...]int{
	130, 15, 120, 18, 248, 282, 274, 332, 8, 320,
	275, 273, 333, 127, 219, 270, 278, 151, 23, 68,
	335, 272, 111, 115, 221, 271, 129, 152, 234, 220,
	123, 253, 283, 244, 232, 191, 238, 294, 112, 74,
	157, 289, 15, 125, 18, 327, 15, 15, 15, 237,
	15, 265, 18, 155, 144, 144, 144, 138, 344, 126,
	126, 113, 34, 107, 124, 132, 66, 135, 15, 67,
	18, 117, 10, 51, 194, 194, 264, 322, 261, 345,
	267, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 34, 231, 116, 9, 34, 34, 34,
	196, 34, 323, 10, 147, 225, 277, 148, 279, 250,
	71, 10, 119, 17, 319, 70, 236, 107, 250, 34,
	330, 158, 118, 16, 189, 34, 34, 69, 269, 10,
	229, 284, 110, 228, 71, 10, 10, 9, 222, 70,
	251, 107, 109, 71, 230, 9, 223, 227, 70, 340,
	121, 69, 107, 249, 17, 249, 235, 224, 240, 243,
	69, 280, 17, 9, 16, 242, 247, 185, 106, 9,
	9, 158, 16, 263, 264, 187, 261, 296, 331, 241,
	17, 240, 239, 142, 351, 277, 279, 279, 279, 186,
	16, 299, 35, 5, 141, 161, 190, 255, 336, 308,
	59, 312, 150, 252, 126, 334, 148, 128, 255, 124,
	259, 336, 58, 160, 4, 302, 14, 194, 194, 358,
	154, 355, 342, 338, 305, 300, 258, 64, 65, 287,
	87, 143, 246, 288, 290, 257, 15, 101, 18, 15,
	281, 18, 15, 286, 18, 326, 324, 15, 292, 18,
	136, 139, 226, 196, 73, 72, 133, 316, 1, 114,
	292, 183, 298, 297, 311, 307, 301, 193, 193, 303,
	310, 195, 321, 313, 304, 317, 309, 156, 145, 146,
	318, 137, 184, 328, 329, 153, 3, 49, 290, 188,
	192, 192, 82, 83, 84, 85, 86, 34, 87, 15,
	34, 18, 140, 34, 306, 341, 337, 10, 34, 254,
	10, 276, 245, 10, 268, 33, 349, 354, 10, 122,
	249, 347, 343, 350, 347, 15, 339, 15, 349, 18,
	352, 348, 15, 356, 18, 108, 346, 134, 285, 233,
	235, 9, 19, 11, 9, 6, 2, 9, 361, 50,
	360, 362, 9, 15, 357, 18, 363, 38, 17, 359,
	34, 17, 365, 37, 17, 21, 249, 44, 16, 17,
	10, 16, 39, 20, 16, 40, 36, 315, 52, 16,
	364, 84, 85, 86, 53, 87, 34, 314, 34, 102,
	104, 103, 105, 34, 7, 256, 149, 266, 10, 56,
	262, 260, 54, 10, 9, 88, 89, 96, 97, 82,
	83, 84, 85, 86, 34, 87, 75, 76, 77, 78,
	79, 17, 159, 0, 10, 0, 0, 0, 0, 0,
	0, 16, 9, 0, 0, 0, 0, 9, 291, 139,
	293, 0, 0, 0, 0, 0, 0, 295, 0, 17,
	0, 139, 0, 0, 17, 0, 0, 0, 9, 16,
	0, 0, 0, 136, 16, 90, 88, 89, 96, 97,
	82, 83, 84, 85, 86, 17, 87, 0, 96, 97,
	82, 83, 84, 85, 86, 16, 87, 325, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 60, 0, 22,
	29, 61, 0, 64, 65, 31, 32, 48, 0, 57,
	0, 45, 46, 0, 0, 0, 0, 0, 35, 0,
	30, 27, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 353, 12, 13, 25, 28, 26, 58, 24,
	0, 0, 0, 43, 0, 185, 0, 62, 295, 0,
	0, 0, 63, 0, 0, 55, 0, 0, 0, 42,
	0, 60, 41, 22, 29, 61, 0, 64, 65, 31,
	32, 48, 0, 57, 0, 45, 46, 0, 0, 0,
	0, 0, 35, 0, 30, 27, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	28, 26, 58, 24, 71, 0, 0, 43, 0, 70,
	0, 62, 0, 0, 0, 0, 63, 0, 0, 55,
	0, 69, 0, 42, 0, 60, 41, 22, 29, 61,
	0, 64, 65, 31, 32, 48, 0, 57, 0, 45,
	46, 0, 0, 0, 0, 0, 35, 0, 30, 27,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 12, 13, 25, 28, 26, 58, 24, 0, 0,
	0, 43, 0, 0, 0, 62, 0, 0, 0, 0,
	63, 0, 0, 55, 0, 0, 0, 42, 0, 60,
	41, 22, 29, 61, 0, 64, 65, 31, 32, 48,
	0, 57, 0, 45, 46, 0, 0, 0, 0, 0,
	0, 0, 30, 27, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 28, 26,
	58, 24, 0, 131, 0, 43, 0, 0, 0, 62,
	0, 0, 0, 0, 63, 0, 0, 55, 0, 0,
	0, 42, 0, 125, 41, 60, 0, 22, 29, 61,
	0, 64, 65, 31, 32, 48, 0, 57, 0, 45,
	46, 0, 0, 0, 0, 0, 0, 0, 30, 27,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 25, 28, 26, 58, 24, 0, 131,
	0, 43, 0, 0, 0, 62, 0, 0, 0, 0,
	63, 0, 0, 55, 0, 0, 0, 42, 0, 60,
	41, 22, 29, 61, 0, 64, 65, 31, 32, 48,
	0, 57, 0, 45, 46, 0, 0, 0, 0, 0,
	35, 0, 30, 27, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 28, 26,
	58, 24, 0, 0, 0, 43, 0, 0, 0, 62,
	0, 0, 0, 0, 63, 0, 0, 55, 0, 0,
	0, 42, 0, 60, 41, 22, 29, 61, 0, 64,
	65, 31, 32, 48, 0, 57, 0, 45, 46, 0,
	0, 0, 0, 0, 0, 0, 30, 27, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 28, 26, 58, 24, 0, 0, 0, 43,
	0, 0, 0, 62, 0, 0, 0, 0, 63, 0,
	0, 55, 0, 60, 0, 42, 29, 61, 41, 64,
	65, 31, 32, 48, 0, 57, 0, 45, 46, 0,
	0, 0, 0, 0, 0, 0, 30, 27, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 28, 26, 58, 24, 0, 0, 0, 43,
	0, 0, 0, 62, 0, 0, 0, 0, 63, 0,
	0, 55, 0, 0, 0, 42, 0, 100, 41, 80,
	81, 99, 98, 91, 92, 93, 94, 95, 102, 104,
	103, 105, 90, 88, 89, 96, 97, 82, 83, 84,
	85, 86, 0, 87, 165, 166, 173, 167, 168, 169,
	170, 171, 172, 164, 162, 163, 174, 175, 176, 177,
	178, 179, 180, 0, 181, 182, 99, 98, 91, 92,
	93, 94, 95, 102, 104, 103, 105, 90, 88, 89,
	96, 97, 82, 83, 84, 85, 86, 161, 87, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 160, 100, 0, 80, 81,
	99, 98, 91, 92, 93, 94, 95, 102, 104, 103,
	105, 90, 88, 89, 96, 97, 82, 83, 84, 85,
	86, 0, 87, 98, 91, 92, 93, 94, 95, 102,
	104, 103, 105, 90, 88, 89, 96, 97, 82, 83,
	84, 85, 86, 0, 87, 91, 92, 93, 94, 95,
	102, 104, 103, 105, 90, 88, 89, 96, 97, 82,
	83, 84, 85, 86, 0, 87, 102, 104, 103, 105,
	90, 88, 89, 96, 97, 82, 83, 84, 85, 86,
	0, 87,
}

var yyPact = [...]int{
	599, -1000, -1000, 41, -1000, -1000, 260, -1000, -1000, 259,
	420, -1000, -1000, -1000, -1000, 1095, -1000, -1000, 81, 917,
	-1000, 377, 857, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 75, 663, 729, -1000, -1000, -1000, -1000,
	-1000, 599, 857, 729, 122, 793, 793, 535, 152, 599,
	-1000, -1000, -1000, -1000, -1000, -37, -1000, 1027, -1000, -1000,
	195, -1000, -1000, -1000, -1000, -1000, -1000, 471, -1000, -1000,
	120, 101, 145, 793, 793, -1000, -1000, -1000, -1000, -1000,
	857, 857, 857, 857, 857, 857, 857, 857, 857, 857,
	857, 857, 857, 857, 857, 857, 857, 857, 857, 857,
	857, 857, -1000, -1000, -1000, -1000, 729, 1027, 71, -1000,
	-1000, 70, -1000, -57, 857, -1000, 257, 420, -1000, -1000,
	46, -1000, -1000, -1000, -1000, 729, 69, 19, -69, -1000,
	1095, 857, -1000, 42, -50, 107, -1000, 106, 84, -69,
	-1000, 215, 215, 65, -1000, 65, 41, 143, 93, 221,
	-1000, 187, -1000, 41, 96, -44, -12, 38, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 87, -1000, -1000, 729,
	-1000, -1000, -1000, -1000, 1095, -1000, -1000, 1051, 1051, 358,
	358, 203, 203, 203, 203, 459, 459, 388, 1154, 1154,
	1154, 1154, 1154, 271, 271, 1138, 1117, 1006, 449, 42,
	-1000, 56, -57, -1000, 729, 449, 857, 857, 729, -61,
	729, 729, 857, -1000, -1000, -65, -1000, -1000, -1000, 857,
	-1000, -1000, -1000, 729, 104, 599, 123, 186, 599, 171,
	-1000, 599, 143, 185, 154, 857, 599, 151, -1000, -1000,
	-1000, -1000, -1000, -1000, 917, -1000, -1000, -1000, -1000, 117,
	41, 39, -8, -1000, -1000, -1000, 27, 251, -1000, 857,
	-1000, 243, -1000, -54, 729, -1000, -1000, 42, 42, -1000,
	19, -69, -1000, -1000, -1000, -1000, -1000, -1000, 103, -1000,
	-1000, 153, -1000, 166, 184, -1000, -1000, -1000, 599, -1000,
	74, 183, 41, -31, -1000, -1000, -18, 42, -1000, 117,
	-1000, -1000, 116, 118, 857, -1000, 857, -1000, -1000, -1000,
	-1000, 123, 182, -1000, 793, -1000, 599, 180, -1000, -1000,
	857, 599, -1000, -1000, -1000, 729, -1000, -1000, -8, -1000,
	-1000, 251, -1000, -1000, 1095, -1000, 65, -1000, -1000, -1000,
	42, -1000, 599, -1000, 153, -1000,
}

var yyPgo = [...]int{
	0, 61, 73, 28, 432, 40, 4, 19, 247, 5,
	412, 411, 230, 410, 409, 407, 406, 39, 405, 404,
	394, 388, 132, 122, 210, 8, 0, 18, 386, 105,
	385, 71, 2, 241, 203, 206, 383, 226, 382, 35,
	217, 377, 224, 7, 12, 20, 375, 373, 367, 325,
	359, 27, 295, 356, 355, 353, 352, 24, 29, 14,
	30, 348, 347, 329, 6, 16, 10, 324, 15, 25,
	322, 321, 9, 11, 21, 17, 319, 31, 314, 33,
	312, 297, 26, 13, 291, 268, 66, 69, 32, 36,
}

var yyR1 = [...]int{
	0, 85, 53, 75, 51, 52, 52, 52, 42, 42,
	42, 42, 34, 34, 35, 35, 25, 25, 33, 37,
	1, 36, 36, 54, 55, 55, 49, 56, 56, 50,
	50, 50, 29, 29, 29, 16, 5, 5, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 8, 8, 8,
	8, 46, 46, 40, 62, 62, 39, 60, 61, 61,
	59, 59, 59, 58, 58, 58, 57, 57, 63, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 32, 6, 6, 6, 43,
	43, 44, 44, 70, 70, 41, 41, 41, 80, 80,
	79, 77, 76, 78, 78, 78, 28, 28, 47, 48,
	10, 11, 12, 12, 12, 13, 38, 14, 15, 81,
	20, 21, 21, 24, 24, 22, 22, 22, 22, 22,
	23, 23, 23, 23, 30, 30, 31, 31, 18, 18,
	67, 67, 73, 72, 72, 68, 68, 68, 68, 68,
	64, 69, 69, 65, 65, 71, 71, 66, 74, 74,
	84, 84, 83, 83, 82, 82, 2, 2, 2, 86,
	86, 88, 88, 3, 9, 89, 89, 89, 7, 7,
	7, 7, 87, 87, 45, 17, 17, 17, 17, 17,
	19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 1, 3,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 2, 1, 2, 3, 1,
	1, 4, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 6, 1, 1, 1, 1,
	1, 3, 3, 1, 0, 2, 1, 3, 0, 1,
	0, 1, 2, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 1, 2, 6,
	6, 5, 4, 5, 3, 1, 1, 1, 2, 1,
	5, 1, 2, 0, 3, 2, 4, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 2, 2, 0, 3, 3, 1, 1, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	3, 2, 1, 2, 0, 4, 2, 2, 1, 0,
	1, 1, 3, 2, 1, 1, 3, 3, 1, 3,
	0, 2, 1, 3, 3, 2, 1, 1, 1, 0,
	1, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	2, 3, 1, 2, 0, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -85, -53, -52, -42, -34, -54, -19, -25, -29,
	-31, -55, 72, 73, -37, -26, -22, -23, -32, -56,
	-36, -46, 38, -27, 78, 74, 76, 60, 75, 39,
	59, 44, 45, -49, -1, 57, -28, -47, -48, -38,
	-30, 101, 98, 82, -41, 50, 51, 63, 46, -81,
	-50, -2, -21, -20, -10, 94, -14, 48, 77, -24,
	36, 40, 86, 91, 42, 43, -86, -87, -7, 96,
	84, 79, 5, 5, -17, 6, 7, 8, 9, 10,
	13, 14, 31, 32, 33, 34, 35, 37, 27, 28,
	26, 17, 18, 19, 20, 21, 29, 30, 16, 15,
	11, -8, 22, 24, 23, 25, 97, 81, -49, -22,
	-23, -32, -27, -1, -8, -26, -29, -31, -22, -23,
	-32, 85, -63, -60, -58, 100, -57, -83, -40, -82,
	-26, 80, -58, -42, -62, -57, -40, -84, -83, -40,
	-80, 82, 71, -33, -25, -33, -33, -86, -87, -16,
	60, -75, -51, -52, -12, 90, -12, -5, -2, -4,
	78, 60, 27, 28, 26, 17, 18, 20, 21, 22,
	23, 24, 25, 19, 29, 30, 31, 32, 33, 34,
	35, 37, 38, -24, -42, 84, 79, 84, -37, -1,
	-35, -39, -37, -34, -26, -35, -39, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -59,
	-58, -57, -5, 85, 97, -26, 5, -17, 97, -59,
	85, 85, 103, -40, -3, -88, 84, 99, -89, 85,
	84, 83, -89, 85, -79, -70, 27, -79, -6, -7,
	54, -6, -86, -77, -76, 64, -18, 24, 49, -86,
	-11, 90, -13, 87, 88, 95, -15, 92, -67, 100,
	-68, -69, -74, -73, -64, -66, -71, 78, -65, 80,
	84, -88, -9, -88, 85, -61, -60, -59, -59, 102,
	-83, -40, -82, -40, 102, -40, 83, -51, -69, 78,
	49, -51, 54, -51, -77, 49, -78, -45, 55, -77,
	-57, -75, 60, -27, -22, -23, -32, -68, -7, 85,
	-72, -72, 85, 85, 5, -40, 12, 99, -9, -9,
	27, 85, -43, -44, 62, -45, 55, -44, 49, -51,
	85, -6, 49, -7, 89, 97, -3, -73, -74, -64,
	-66, 78, -65, -40, -26, 49, -25, -51, 49, -51,
	-59, -72, -6, -9, -51, -43,
}

var yyDef = [...]int{
	5, -2, 1, 209, 6, 8, 0, 10, 11, 0,
	0, 23, 230, 231, 16, 17, -2, -2, 0, 24,
	19, 75, 0, -2, -2, 166, 167, -2, 169, 170,
	171, 172, 173, 0, 0, 0, 109, 110, 111, 112,
	113, 0, 94, 200, 117, 0, 0, 209, 0, 5,
	26, 20, 146, 147, 154, 0, 154, 0, 208, 161,
	0, 160, 150, 157, 163, 164, 2, 210, 222, 218,
	219, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 90, 100, 0, 25, -2,
	-2, 0, 125, 0, 0, 80, 0, 0, -2, -2,
	0, 27, 21, 135, 108, 100, 103, 104, 106, 202,
	93, 0, 22, 211, 0, 215, 106, 0, 215, 0,
	118, 133, 133, 0, 18, 0, 209, 0, 210, 178,
	35, 0, 3, 209, 0, 0, 0, 189, 36, 37,
	206, 207, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 162, 7, 223, 0, 220, 9, 0,
	12, 59, 14, 15, 96, 13, 60, -2, -2, 65,
	66, 67, 68, 69, 70, 71, 72, 73, -2, -2,
	-2, -2, -2, 81, 82, 83, 84, 211, 91, 211,
	101, 103, 98, 28, 100, 92, 0, 0, 100, 0,
	0, 0, 0, 205, 114, 0, 212, 115, 95, 217,
	216, 116, 201, 217, 0, 5, 0, 0, 5, 126,
	127, 5, 0, 0, 224, 0, 5, 0, 124, 4,
	148, 152, 153, 151, 0, 149, 156, 158, 159, 189,
	0, 184, 184, 188, 191, 198, 182, 190, 195, 194,
	221, 0, -2, 0, 102, 136, 99, 211, 211, 97,
	105, 107, 203, 204, 213, 107, 138, 140, 0, 190,
	139, 224, 128, 224, 0, 122, 141, 143, 5, 145,
	0, 0, 0, 125, 174, 175, 0, 211, 181, 0,
	186, 187, 0, 0, 0, 193, 0, 214, -2, -2,
	134, 0, 0, 129, 0, 131, 5, 0, 121, 144,
	0, 5, 123, 179, 155, 100, 180, 183, 184, 192,
	199, 0, 196, 197, 85, 119, 0, 132, 120, 142,
	211, 185, 5, 137, 224, 130,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = ""
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.Block = yyDollar[2].blk
			if yylex.(*Lexer).blockDepth == 0 {
				call.RawBlock = yylex.(*Lexer).lastParsedToken.RawBlock
			}
			yyVAL.node = call
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.blk = &Block{Params: yyDollar[1].params, Body: &Body{Statements: yyDollar[2].node_list}}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: SingleQuote, lineNo: currentLineNo}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			regexp.Kind = Regexp
			yyVAL.node = regexp
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				method.AddParam(p)
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.ivars[ivar.NormalizedVal()] = &IVar{Name: ivar.NormalizedVal()}
				cls.ivarOrder = append(cls.ivarOrder, ivar.NormalizedVal())
			}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
