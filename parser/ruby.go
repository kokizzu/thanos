// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const DO_COND = 57421
const DO_BLOCK = 57422
const PRIVATE = 57423
const PROTECTED = 57424
const IN = 57425
const IVAR = 57426
const CVAR = 57427
const GVAR = 57428
const METHODIDENT = 57429
const IDENT = 57430
const COMMENT = 57431
const LABEL = 57432
const ANDDOT = 57433
const DOT = 57434
const LBRACE = 57435
const LBRACEBLOCK = 57436
const RBRACE = 57437
const NEWLINE = 57438
const COMMA = 57439
const STRINGBEG = 57440
const STRINGEND = 57441
const INTERPBEG = 57442
const INTERPEND = 57443
const STRINGBODY = 57444
const REGEXBEG = 57445
const REGEXEND = 57446
const REGEXPOPT = 57447
const RAWSTRINGBEG = 57448
const RAWSTRINGEND = 57449
const WORDSBEG = 57450
const RAWWORDSBEG = 57451
const XSTRINGBEG = 57452
const RAWXSTRINGBEG = 57453
const SEMICOLON = 57454
const LBRACKET = 57455
const LBRACKETSTART = 57456
const RBRACKET = 57457
const LPAREN = 57458
const LPARENSTART = 57459
const RPAREN = 57460
const HASHROCKET = 57461
const SCOPE = 57462

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"DO_COND",
	"DO_BLOCK",
	"PRIVATE",
	"PROTECTED",
	"IN",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"ANDDOT",
	"DOT",
	"LBRACE",
	"LBRACEBLOCK",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"XSTRINGBEG",
	"RAWXSTRINGBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	5, 56,
	6, 240,
	7, 240,
	8, 240,
	9, 240,
	10, 240,
	11, 240,
	12, 240,
	97, 52,
	-2, 238,
	-1, 15,
	5, 57,
	6, 241,
	7, 241,
	8, 241,
	9, 241,
	10, 241,
	11, 241,
	12, 241,
	97, 53,
	-2, 239,
	-1, 21,
	91, 173,
	92, 173,
	113, 173,
	120, 173,
	-2, 117,
	-1, 23,
	38, 277,
	40, 277,
	41, 277,
	42, 277,
	44, 277,
	45, 277,
	46, 277,
	47, 277,
	48, 277,
	49, 277,
	50, 277,
	52, 277,
	54, 277,
	61, 277,
	64, 277,
	65, 277,
	66, 277,
	69, 277,
	71, 277,
	73, 277,
	74, 277,
	75, 277,
	76, 277,
	78, 277,
	84, 277,
	85, 277,
	86, 277,
	87, 277,
	88, 277,
	90, 277,
	93, 277,
	94, 277,
	98, 277,
	103, 277,
	106, 277,
	108, 277,
	109, 277,
	110, 277,
	111, 277,
	114, 277,
	116, 277,
	117, 277,
	-2, 229,
	-1, 26,
	38, 278,
	40, 278,
	41, 278,
	42, 278,
	44, 278,
	45, 278,
	46, 278,
	47, 278,
	48, 278,
	49, 278,
	50, 278,
	52, 278,
	54, 278,
	61, 278,
	64, 278,
	65, 278,
	66, 278,
	69, 278,
	71, 278,
	73, 278,
	74, 278,
	75, 278,
	76, 278,
	78, 278,
	84, 278,
	85, 278,
	86, 278,
	87, 278,
	88, 278,
	90, 278,
	93, 278,
	94, 278,
	98, 278,
	103, 278,
	106, 278,
	108, 278,
	109, 278,
	110, 278,
	111, 278,
	114, 278,
	116, 278,
	117, 278,
	-2, 232,
	-1, 42,
	35, 143,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 157,
	-1, 57,
	35, 143,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 195,
	-1, 111,
	5, 42,
	-2, 44,
	-1, 119,
	5, 56,
	6, 240,
	7, 240,
	8, 240,
	9, 240,
	10, 240,
	11, 240,
	12, 240,
	-2, 238,
	-1, 120,
	5, 57,
	6, 241,
	7, 241,
	8, 241,
	9, 241,
	10, 241,
	11, 241,
	12, 241,
	-2, 239,
	-1, 150,
	91, 238,
	92, 238,
	113, 238,
	120, 238,
	-2, 52,
	-1, 151,
	91, 239,
	92, 239,
	113, 239,
	120, 239,
	-2, 53,
	-1, 193,
	83, 56,
	97, 52,
	-2, 238,
	-1, 194,
	83, 57,
	97, 53,
	-2, 239,
	-1, 250,
	97, 137,
	-2, 142,
	-1, 257,
	97, 124,
	-2, 127,
	-1, 266,
	5, 59,
	97, 55,
	-2, 277,
	-1, 268,
	38, 143,
	40, 143,
	41, 143,
	42, 143,
	44, 143,
	45, 143,
	46, 143,
	47, 143,
	48, 143,
	49, 143,
	50, 143,
	52, 143,
	54, 143,
	61, 143,
	64, 143,
	65, 143,
	66, 143,
	69, 143,
	71, 143,
	73, 143,
	74, 143,
	75, 143,
	76, 143,
	84, 143,
	85, 143,
	86, 143,
	87, 143,
	88, 143,
	90, 143,
	93, 143,
	98, 143,
	103, 143,
	106, 143,
	108, 143,
	109, 143,
	110, 143,
	111, 143,
	114, 143,
	117, 143,
	-2, 63,
	-1, 281,
	15, 0,
	16, 0,
	-2, 92,
	-1, 282,
	15, 0,
	16, 0,
	-2, 93,
	-1, 292,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 105,
	-1, 293,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 107,
	-1, 294,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 108,
	-1, 295,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 109,
	-1, 296,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 110,
	-1, 351,
	1, 129,
	51, 129,
	53, 129,
	55, 129,
	59, 129,
	60, 129,
	62, 129,
	68, 129,
	70, 129,
	72, 129,
	78, 129,
	79, 129,
	89, 129,
	92, 129,
	94, 129,
	95, 129,
	96, 129,
	112, 129,
	118, 129,
	-2, 143,
	-1, 380,
	5, 58,
	97, 54,
	-2, 196,
	-1, 389,
	5, 43,
	-2, 45,
	-1, 390,
	5, 59,
	-2, 277,
	-1, 396,
	5, 55,
	83, 55,
	96, 55,
	97, 55,
	118, 55,
	-2, 277,
	-1, 428,
	83, 59,
	97, 55,
	-2, 277,
	-1, 453,
	97, 138,
	-2, 145,
	-1, 455,
	5, 59,
	-2, 277,
	-1, 465,
	5, 58,
	-2, 196,
	-1, 468,
	5, 54,
	83, 54,
	96, 54,
	97, 54,
	118, 54,
	-2, 196,
	-1, 483,
	83, 58,
	97, 54,
	-2, 196,
	-1, 501,
	5, 58,
	-2, 196,
}

const yyPrivate = 57344

const yyLast = 2670

var yyAct = [...]int{
	20, 175, 368, 157, 472, 200, 367, 473, 9, 373,
	385, 364, 492, 362, 338, 312, 366, 171, 253, 184,
	114, 176, 363, 84, 322, 475, 199, 443, 308, 69,
	207, 83, 88, 314, 105, 168, 388, 330, 272, 179,
	172, 164, 164, 402, 357, 211, 180, 21, 488, 108,
	107, 316, 321, 178, 182, 182, 447, 263, 182, 164,
	374, 174, 165, 11, 109, 108, 107, 371, 186, 177,
	153, 490, 167, 189, 514, 203, 11, 350, 307, 204,
	65, 188, 117, 89, 448, 152, 264, 378, 445, 85,
	87, 179, 271, 442, 106, 164, 257, 262, 153, 182,
	182, 182, 182, 381, 469, 164, 86, 376, 117, 117,
	316, 315, 117, 195, 349, 260, 11, 242, 303, 114,
	372, 202, 375, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 205, 273, 11, 361, 214,
	408, 12, 278, 117, 117, 117, 117, 117, 259, 259,
	311, 265, 319, 209, 164, 111, 356, 249, 353, 254,
	359, 164, 470, 164, 164, 11, 375, 275, 204, 304,
	164, 374, 355, 356, 11, 353, 268, 306, 18, 401,
	334, 5, 336, 178, 182, 451, 4, 153, 449, 313,
	318, 320, 161, 274, 155, 43, 327, 328, 113, 177,
	110, 189, 152, 108, 107, 341, 108, 107, 43, 337,
	206, 333, 242, 269, 43, 346, 365, 90, 158, 91,
	343, 217, 89, 348, 340, 342, 92, 329, 279, 241,
	108, 107, 307, 375, 430, 280, 93, 11, 117, 11,
	43, 43, 80, 216, 43, 397, 251, 251, 43, 324,
	326, 11, 305, 252, 111, 325, 261, 393, 476, 307,
	273, 331, 423, 331, 70, 332, 474, 262, 262, 380,
	164, 240, 340, 247, 255, 255, 384, 256, 256, 43,
	351, 386, 213, 270, 379, 43, 43, 43, 43, 43,
	43, 43, 313, 197, 476, 89, 164, 412, 511, 110,
	509, 506, 87, 115, 7, 399, 164, 43, 110, 484,
	108, 107, 164, 164, 478, 431, 43, 7, 86, 420,
	210, 116, 10, 400, 206, 206, 411, 392, 418, 413,
	394, 164, 104, 164, 382, 10, 239, 414, 409, 106,
	164, 164, 419, 374, 424, 96, 398, 405, 347, 268,
	371, 426, 435, 395, 191, 422, 129, 7, 389, 434,
	196, 429, 11, 386, 365, 440, 164, 164, 262, 164,
	432, 310, 164, 262, 262, 10, 405, 214, 262, 43,
	43, 43, 444, 11, 446, 212, 11, 345, 7, 214,
	427, 457, 459, 43, 436, 164, 461, 11, 465, 258,
	258, 468, 432, 498, 467, 375, 10, 407, 450, 437,
	6, 477, 410, 198, 214, 416, 7, 10, 10, 479,
	377, 313, 482, 276, 313, 7, 454, 487, 486, 143,
	259, 81, 82, 483, 10, 259, 259, 261, 497, 495,
	259, 164, 441, 10, 493, 120, 15, 262, 499, 494,
	268, 277, 496, 481, 262, 262, 313, 262, 505, 15,
	501, 192, 489, 332, 159, 502, 56, 495, 151, 95,
	94, 164, 508, 507, 201, 3, 11, 510, 90, 11,
	91, 164, 173, 313, 185, 1, 166, 92, 7, 148,
	7, 374, 425, 89, 53, 262, 194, 93, 371, 15,
	87, 480, 7, 208, 43, 331, 10, 497, 10, 259,
	485, 513, 515, 520, 516, 522, 86, 421, 518, 339,
	10, 519, 369, 491, 309, 43, 360, 117, 43, 11,
	15, 370, 119, 14, 11, 517, 248, 521, 512, 43,
	417, 313, 458, 460, 162, 169, 14, 462, 160, 190,
	89, 372, 22, 375, 2, 150, 255, 87, 15, 256,
	214, 255, 255, 37, 256, 256, 255, 15, 36, 256,
	11, 34, 43, 86, 44, 59, 33, 43, 43, 38,
	32, 39, 43, 193, 35, 60, 14, 331, 138, 139,
	124, 125, 126, 127, 128, 151, 129, 61, 250, 162,
	52, 51, 383, 181, 63, 387, 124, 125, 126, 127,
	128, 415, 129, 7, 8, 344, 503, 14, 43, 358,
	64, 43, 354, 458, 460, 352, 462, 62, 215, 0,
	15, 10, 15, 0, 7, 255, 0, 7, 256, 126,
	127, 128, 0, 129, 15, 14, 0, 0, 7, 0,
	183, 43, 10, 187, 14, 10, 144, 146, 145, 147,
	0, 0, 0, 0, 503, 0, 10, 317, 0, 43,
	0, 43, 0, 0, 323, 0, 43, 0, 0, 0,
	0, 258, 150, 0, 0, 0, 258, 258, 0, 0,
	0, 258, 0, 0, 243, 244, 245, 246, 0, 10,
	0, 0, 0, 0, 10, 10, 0, 0, 0, 10,
	0, 0, 43, 0, 0, 456, 0, 14, 0, 14,
	0, 0, 0, 0, 0, 463, 464, 7, 466, 0,
	7, 14, 132, 130, 131, 138, 139, 124, 125, 126,
	127, 128, 0, 129, 0, 10, 0, 0, 10, 0,
	0, 0, 0, 0, 0, 15, 0, 0, 0, 0,
	258, 0, 144, 146, 145, 147, 132, 130, 131, 138,
	139, 124, 125, 126, 127, 128, 15, 129, 10, 15,
	7, 0, 0, 0, 0, 7, 0, 0, 0, 335,
	15, 97, 98, 99, 100, 101, 102, 103, 10, 0,
	504, 0, 439, 10, 130, 131, 138, 139, 124, 125,
	126, 127, 128, 0, 129, 0, 0, 0, 0, 403,
	0, 7, 0, 0, 0, 169, 406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 456, 0, 0, 10,
	0, 0, 14, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 14, 0, 0, 14, 0, 0, 15,
	0, 0, 15, 0, 0, 0, 0, 14, 0, 452,
	453, 0, 0, 0, 0, 433, 0, 0, 0, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 15, 0, 0, 0, 142, 15, 122, 123,
	141, 140, 133, 134, 135, 136, 137, 144, 146, 145,
	147, 132, 130, 131, 138, 139, 124, 125, 126, 127,
	128, 0, 129, 0, 500, 0, 14, 0, 0, 14,
	0, 0, 0, 15, 0, 0, 0, 0, 0, 71,
	0, 19, 28, 72, 0, 81, 82, 30, 31, 66,
	67, 68, 0, 45, 403, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 58, 42, 29, 26, 0, 0,
	49, 0, 48, 0, 50, 54, 55, 57, 0, 14,
	0, 0, 16, 17, 14, 24, 27, 25, 80, 23,
	89, 0, 0, 0, 41, 0, 0, 241, 0, 73,
	0, 0, 0, 0, 79, 0, 0, 76, 0, 74,
	77, 75, 78, 0, 0, 40, 0, 0, 13, 71,
	14, 19, 28, 72, 0, 81, 82, 30, 31, 66,
	67, 68, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 58, 42, 29, 26, 0, 0,
	49, 0, 48, 0, 50, 54, 55, 57, 0, 0,
	0, 0, 0, 0, 0, 24, 27, 25, 80, 23,
	89, 0, 0, 0, 41, 0, 0, 87, 0, 73,
	0, 0, 0, 0, 79, 0, 0, 76, 0, 74,
	77, 75, 78, 86, 0, 40, 0, 71, 121, 19,
	28, 72, 0, 81, 82, 30, 31, 66, 67, 68,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 58, 42, 29, 26, 0, 0, 49, 0,
	48, 0, 50, 54, 55, 57, 0, 0, 0, 0,
	16, 17, 0, 24, 27, 25, 80, 23, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 79, 0, 0, 76, 0, 74, 77, 75,
	78, 0, 163, 40, 0, 71, 13, 118, 28, 72,
	0, 81, 82, 30, 31, 66, 67, 68, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 154, 29, 26, 0, 0, 49, 0, 48, 0,
	50, 54, 55, 156, 0, 0, 0, 0, 0, 0,
	0, 24, 27, 25, 80, 23, 0, 170, 0, 0,
	41, 0, 0, 273, 0, 73, 0, 0, 0, 0,
	79, 0, 0, 76, 0, 74, 77, 75, 78, 0,
	0, 40, 0, 71, 121, 19, 28, 72, 0, 81,
	82, 30, 31, 66, 67, 68, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 58, 42,
	29, 26, 0, 0, 49, 0, 48, 0, 50, 54,
	55, 57, 0, 0, 0, 0, 16, 17, 0, 24,
	27, 25, 80, 23, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 79, 0,
	0, 76, 0, 74, 77, 75, 78, 0, 163, 40,
	0, 71, 112, 118, 28, 72, 0, 81, 82, 30,
	31, 66, 67, 68, 0, 45, 0, 46, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 154, 29, 26,
	0, 0, 49, 0, 48, 0, 50, 54, 55, 156,
	0, 0, 0, 0, 0, 0, 0, 24, 27, 25,
	80, 23, 0, 170, 0, 0, 41, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 79, 0, 0, 76,
	0, 74, 77, 75, 78, 0, 404, 40, 0, 71,
	121, 118, 28, 72, 0, 81, 82, 30, 31, 66,
	67, 68, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 154, 29, 26, 0, 0,
	49, 0, 48, 0, 50, 54, 55, 156, 0, 0,
	0, 0, 0, 0, 0, 24, 27, 25, 80, 23,
	0, 170, 0, 0, 41, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 79, 0, 0, 76, 0, 74,
	77, 75, 78, 0, 163, 40, 0, 71, 121, 118,
	28, 72, 0, 81, 82, 30, 31, 66, 67, 68,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 58, 42, 29, 26, 0, 0, 49, 0,
	48, 0, 50, 54, 55, 57, 0, 0, 0, 0,
	0, 0, 0, 24, 27, 25, 80, 23, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 79, 0, 0, 76, 0, 74, 77, 75,
	78, 0, 404, 40, 0, 71, 121, 118, 28, 72,
	0, 81, 82, 30, 31, 66, 67, 68, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 154, 29, 26, 0, 0, 49, 0, 48, 0,
	50, 54, 55, 156, 0, 0, 0, 0, 0, 0,
	0, 24, 27, 25, 80, 23, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	79, 0, 0, 76, 0, 74, 77, 75, 78, 0,
	0, 40, 0, 71, 121, 19, 28, 72, 0, 81,
	82, 30, 31, 66, 67, 68, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 58, 42,
	29, 26, 0, 0, 49, 0, 48, 0, 50, 54,
	55, 57, 0, 0, 0, 0, 0, 0, 0, 24,
	27, 25, 80, 23, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 79, 0,
	0, 76, 0, 74, 77, 75, 78, 0, 0, 40,
	0, 71, 121, 118, 28, 72, 0, 81, 82, 30,
	31, 66, 67, 68, 0, 45, 0, 46, 0, 0,
	0, 0, 0, 0, 47, 0, 58, 42, 29, 26,
	0, 0, 49, 0, 48, 0, 50, 54, 55, 57,
	0, 0, 0, 0, 0, 0, 0, 24, 27, 25,
	80, 23, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 79, 0, 0, 76,
	0, 74, 77, 75, 78, 0, 0, 40, 0, 71,
	121, 118, 28, 72, 0, 81, 82, 30, 31, 66,
	67, 68, 0, 45, 0, 46, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 154, 29, 26, 0, 0,
	49, 0, 48, 0, 50, 54, 55, 156, 0, 0,
	0, 0, 0, 0, 0, 24, 27, 25, 80, 23,
	0, 170, 0, 0, 41, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 79, 0, 0, 76, 0, 74,
	77, 75, 78, 0, 163, 40, 0, 71, 121, 118,
	28, 72, 0, 81, 82, 30, 31, 66, 67, 68,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 154, 29, 26, 0, 0, 49, 0,
	48, 0, 50, 54, 55, 156, 0, 0, 0, 0,
	0, 0, 0, 24, 27, 25, 80, 23, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 79, 0, 0, 76, 0, 74, 77, 75,
	78, 0, 0, 40, 0, 71, 121, 118, 28, 72,
	0, 81, 82, 30, 31, 66, 67, 68, 0, 45,
	0, 46, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 154, 29, 26, 0, 0, 49, 0, 48, 0,
	50, 54, 55, 156, 0, 0, 0, 0, 0, 0,
	0, 24, 27, 25, 80, 23, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	79, 0, 0, 76, 0, 74, 77, 75, 78, 149,
	0, 40, 71, 0, 121, 28, 72, 0, 81, 82,
	30, 31, 66, 67, 68, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 154, 29,
	26, 0, 0, 49, 0, 48, 0, 50, 54, 55,
	156, 0, 0, 0, 0, 0, 0, 0, 24, 27,
	25, 80, 23, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 79, 0, 0,
	76, 0, 74, 77, 75, 78, 71, 0, 40, 28,
	72, 121, 81, 82, 30, 31, 66, 67, 68, 0,
	45, 0, 46, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 154, 29, 26, 0, 0, 49, 0, 48,
	0, 50, 54, 55, 156, 0, 0, 0, 0, 0,
	0, 0, 24, 27, 25, 80, 23, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 79, 0, 0, 76, 0, 74, 77, 75, 78,
	71, 0, 40, 28, 72, 121, 81, 82, 30, 31,
	66, 67, 68, 0, 45, 0, 46, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 154, 29, 26, 0,
	0, 49, 0, 48, 0, 50, 54, 55, 156, 0,
	0, 0, 0, 0, 0, 0, 24, 27, 25, 80,
	23, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 79, 0, 0, 76, 0,
	74, 77, 75, 78, 0, 0, 40, 0, 142, 13,
	122, 123, 141, 140, 133, 134, 135, 136, 137, 144,
	146, 145, 147, 132, 130, 131, 138, 139, 124, 125,
	126, 127, 128, 0, 129, 221, 222, 229, 223, 224,
	225, 226, 227, 228, 220, 218, 219, 230, 231, 232,
	233, 234, 235, 236, 0, 237, 238, 0, 221, 222,
	229, 223, 224, 225, 226, 227, 228, 220, 218, 219,
	230, 231, 232, 233, 234, 235, 236, 0, 237, 238,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 216, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 455, 221, 222,
	229, 223, 224, 225, 226, 227, 228, 220, 218, 219,
	230, 231, 232, 233, 234, 235, 236, 0, 237, 238,
	0, 221, 222, 229, 223, 224, 225, 226, 227, 228,
	220, 218, 219, 230, 231, 232, 233, 234, 235, 236,
	0, 237, 238, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 428, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	390, 221, 222, 229, 223, 224, 225, 226, 227, 228,
	220, 218, 219, 230, 231, 232, 233, 234, 235, 236,
	0, 237, 238, 0, 221, 222, 229, 223, 224, 225,
	226, 227, 228, 220, 218, 219, 230, 231, 232, 233,
	234, 235, 236, 0, 237, 238, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	396, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 266, 141, 140, 133, 134, 135, 136,
	137, 144, 146, 145, 147, 132, 130, 131, 138, 139,
	124, 125, 126, 127, 128, 0, 129, 140, 133, 134,
	135, 136, 137, 144, 146, 145, 147, 132, 130, 131,
	138, 139, 124, 125, 126, 127, 128, 0, 129, 133,
	134, 135, 136, 137, 144, 146, 145, 147, 132, 130,
	131, 138, 139, 124, 125, 126, 127, 128, 0, 129,
}

var yyPact = [...]int{
	1099, -1000, -1000, -6, 435, -1000, 475, 474, -1000, -1000,
	795, 229, -1000, 1255, -1000, -1000, -1000, -1000, -1000, 1723,
	923, -1000, 2034, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 148, -1000, 642, -1000, -1000, -1000, -1000, -1000,
	1879, 1801, -76, -25, 115, 1645, 1645, -1000, -1000, 1021,
	2182, 237, 237, 1099, -1000, -1000, 24, -77, 1333, 71,
	-1000, -1000, -1000, -57, -1000, -1000, -1000, -1000, 2306, -1000,
	-1000, 397, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 941, -1000, -1000, -1000, -1000, -1000,
	1645, 1645, 1645, 1645, 1489, 1489, 1723, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1333, 2515, 227, -1000, -1000, 50,
	174, -1000, 1255, -1000, -1000, 428, 795, 125, 1957, -1000,
	-1000, 1099, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
	1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957,
	1957, 1957, 1957, 1957, -1000, -1000, -1000, -1000, 21, 2108,
	-1000, -1000, 149, -1000, -76, -25, -77, -1000, 352, 1957,
	50, 14, -1000, 1957, 923, 125, 67, -45, -1000, -95,
	1957, -1000, 1177, 1333, -1000, -1000, -1000, 352, 352, 1333,
	-1000, 216, -1000, 216, 1099, 1645, 1099, -6, 164, 143,
	132, -1000, -1000, -1000, -1000, 122, 371, -1000, 1099, 307,
	-1000, -6, -1000, -1000, -1000, -1000, 17, -20, -95, 165,
	83, -63, 66, 32, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	435, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10, -1000, -1000, -1000, -1000, -1000, 923, 425, -26,
	-1000, -1000, 923, 50, -1000, 6, 795, 795, -1000, -77,
	795, -1000, -82, -1000, -1000, 50, 1957, 1957, 2422, 1333,
	201, 2587, 2587, 614, 614, 327, 327, 327, 327, 567,
	567, 785, 748, 748, 748, 748, 748, 583, 583, 2630,
	2609, 2285, 714, -1000, -1000, 1333, 2492, 189, 305, 1099,
	101, 714, -1000, -72, -1000, 1567, -1000, -1000, 2422, -1000,
	-1000, 1801, 1957, -1000, 50, -1000, -1000, 55, 297, 50,
	1099, 248, -1000, 1099, 296, 471, 287, 164, 278, 212,
	1879, -1000, 1333, 2399, 1099, 178, 274, -1000, -1000, 1411,
	1801, -77, -1000, -1000, -1000, -1000, 2108, -1000, -1000, -1000,
	-1000, 473, -6, -4, -9, -1000, -41, -1000, -1000, -13,
	-1000, 110, 413, -1000, 107, 1957, 1567, 1723, 1333, 2329,
	795, 1411, 1723, 1723, -1000, -1000, -1000, 1723, -1000, -1000,
	795, 795, 50, 795, 400, 50, -1000, -1000, -1000, -1000,
	75, -1000, -1000, -1000, 1957, -1000, -1000, -1000, -1000, -1000,
	-1000, 208, -1000, 244, -1000, -1000, -1000, -1000, -1000, 273,
	-1000, -1000, -1000, 1099, -1000, 414, 1099, 50, -1000, 268,
	-6, -1000, -20, -95, 148, 115, -53, -42, -1000, -1000,
	50, -1000, 473, -1000, -1000, 325, -1000, 153, 86, -1000,
	1957, -1000, -1000, -1000, 50, 795, 1723, -1000, -1000, -1000,
	-1000, -1000, -1000, 1957, 1957, 795, 1957, 1957, -1000, -1000,
	101, -1000, 260, -1000, 1645, -1000, 1099, 259, -1000, -1000,
	1567, 1099, 257, -1000, -1000, -1000, -1000, -1000, -1000, 2306,
	1333, -1000, -1000, -23, -41, -1000, -41, -1000, 413, -1000,
	-1000, 795, -1000, -1000, 1957, 923, -1000, 216, -1000, -1000,
	-1000, -1000, 50, -1000, 325, -1000, -1000, 1099, -1000, -41,
	208, -1000, -1000,
}

var yyPgo = [...]int{
	0, 204, 80, 92, 638, 223, 37, 89, 439, 15,
	637, 635, 330, 632, 630, 629, 370, 344, 625, 624,
	621, 614, 611, 610, 32, 34, 607, 595, 542, 455,
	274, 8, 0, 47, 594, 313, 591, 331, 62, 613,
	191, 18, 590, 188, 589, 19, 586, 585, 169, 513,
	584, 196, 4, 7, 25, 581, 578, 573, 476, 29,
	5, 484, 564, 420, 151, 562, 64, 559, 161, 86,
	57, 21, 10, 558, 17, 167, 546, 6, 9, 2,
	541, 16, 536, 13, 22, 534, 532, 27, 12, 11,
	26, 529, 14, 527, 28, 1, 3, 504, 35, 30,
	496, 495, 31, 23, 494, 38, 33, 492,
}

var yyR1 = [...]int{
	0, 101, 62, 90, 60, 61, 61, 61, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 40, 40,
	40, 40, 40, 40, 41, 41, 31, 31, 31, 39,
	104, 45, 43, 43, 46, 46, 1, 42, 42, 42,
	42, 42, 63, 63, 66, 66, 64, 64, 64, 58,
	65, 65, 59, 59, 59, 59, 35, 35, 35, 35,
	22, 23, 16, 5, 5, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 8, 8,
	8, 8, 55, 55, 49, 73, 73, 48, 71, 72,
	72, 70, 70, 70, 69, 69, 69, 68, 68, 68,
	68, 76, 76, 107, 74, 75, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 38, 6, 6, 6, 20, 20, 52,
	52, 53, 53, 67, 67, 85, 85, 96, 47, 47,
	47, 47, 50, 50, 50, 50, 50, 95, 95, 94,
	92, 91, 93, 93, 93, 34, 34, 56, 57, 21,
	21, 21, 10, 10, 10, 11, 12, 12, 12, 13,
	44, 14, 15, 97, 26, 27, 27, 30, 30, 28,
	28, 28, 28, 28, 29, 29, 29, 29, 36, 36,
	37, 37, 18, 18, 82, 82, 88, 88, 87, 87,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 77,
	84, 84, 78, 78, 86, 86, 79, 89, 89, 81,
	80, 100, 100, 99, 99, 98, 98, 2, 2, 2,
	25, 25, 102, 102, 105, 105, 3, 9, 106, 106,
	106, 7, 7, 7, 24, 103, 103, 103, 54, 17,
	17, 17, 17, 17, 17, 17, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	6, 5, 5, 5, 1, 1, 1, 2, 1, 1,
	0, 3, 1, 1, 1, 4, 1, 2, 4, 2,
	2, 2, 1, 3, 1, 3, 1, 2, 3, 1,
	2, 3, 1, 1, 4, 3, 1, 1, 4, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 6, 5,
	5, 5, 3, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 6, 1, 1, 1,
	1, 1, 3, 3, 1, 0, 2, 1, 3, 0,
	1, 0, 1, 2, 1, 1, 3, 1, 3, 2,
	4, 1, 1, 0, 2, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 4, 3, 1, 2, 1,
	2, 6, 6, 4, 4, 5, 4, 6, 5, 4,
	3, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	5, 1, 2, 1, 1, 0, 3, 3, 2, 4,
	5, 5, 2, 4, 2, 1, 4, 3, 3, 2,
	2, 4, 1, 2, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	3, 1, 1, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 3, 2, 1, 1, 2, 0,
	4, 2, 2, 1, 0, 6, 4, 4, 2, 1,
	1, 3, 2, 1, 1, 3, 3, 1, 3, 2,
	2, 0, 2, 1, 3, 3, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -101, -62, -61, -51, -40, -63, -35, -19, -31,
	-37, -38, -64, 117, -28, -29, 81, 82, -43, 40,
	-32, -33, -65, 88, 84, 86, 66, 85, 41, 65,
	46, 47, -42, -46, -55, -34, -56, -57, -44, -36,
	114, 93, 64, -1, -50, 52, 54, 61, 71, 69,
	73, -22, -23, -97, 74, 75, -58, 76, 63, -47,
	-27, -26, -10, -21, -14, -2, 48, 49, 50, -59,
	-30, 38, 42, 98, 108, 110, 106, 109, 111, 103,
	87, 44, 45, -102, -103, -7, 112, 96, -24, 89,
	53, 55, 62, 72, 5, 5, -17, 6, 7, 8,
	9, 10, 11, 12, 113, -25, 120, 92, 91, -66,
	-51, -64, 117, -43, -32, -35, -37, -38, 40, -28,
	-29, 117, 15, 16, 33, 34, 35, 36, 37, 39,
	29, 30, 28, 19, 20, 21, 22, 23, 31, 32,
	18, 17, 13, -8, 24, 26, 25, 27, -58, 35,
	-28, -29, -38, -33, 64, -1, 76, -96, 80, -8,
	-73, -68, -49, 35, -32, -38, -100, -99, -98, -49,
	90, -74, 116, -107, -74, -95, -71, 94, 78, 116,
	-95, -39, -31, -39, -45, -104, -45, -39, -102, -103,
	-67, -35, -63, -28, -29, -38, -16, 66, -16, -90,
	-60, -61, 97, -74, -71, -69, -68, -99, -49, 92,
	-12, 102, -12, -5, -2, -4, 88, 66, 29, 30,
	28, 19, 20, 22, 23, 24, 25, 26, 27, 21,
	31, 32, 33, 34, 35, 36, 37, 39, 40, -30,
	-51, 96, -24, -39, -39, -39, -39, -43, -76, -75,
	-49, -68, -75, -41, -48, -43, -40, -32, -35, -38,
	-41, -48, -32, -70, -69, -68, 88, 66, -2, -5,
	66, -3, -105, 96, -3, -66, 5, -17, -25, 113,
	120, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -32, 97, -59, 113, -25, 120, -94, -85,
	29, -32, -9, -105, -106, 97, 96, -49, -25, 95,
	-106, 97, 119, -49, -69, -3, -69, -94, -94, -70,
	-6, -7, 59, -6, -60, -39, -60, -102, -92, -91,
	70, 83, 113, -25, -18, 26, -90, 51, -102, 97,
	97, -2, -11, 102, -13, 99, 100, 107, -15, 104,
	-82, 116, -83, -84, -89, -88, -81, -77, -79, -86,
	-80, 35, 88, -78, 28, 90, 97, 5, 113, -25,
	-9, 97, -17, -17, -74, -72, -71, -17, 118, -3,
	88, 66, -70, 66, -105, -70, 88, 66, 51, -60,
	-84, 88, 115, -49, 35, -98, -49, -3, 95, 51,
	-3, -60, 59, -60, 51, -20, -7, 79, 51, -92,
	51, -93, -54, 60, -92, -68, -45, -70, 88, -90,
	66, 51, -99, -49, -74, -72, -33, -38, -28, -29,
	-83, -7, 97, -87, -87, 97, -87, 97, 97, 88,
	5, 88, -49, -49, -70, 88, -17, -41, -48, -41,
	-48, -41, -48, -17, -17, -9, -17, 14, -9, 29,
	97, -49, -52, -53, 68, -54, 60, -53, 51, -60,
	97, -6, -60, -9, 51, -7, -96, -95, 101, -25,
	113, -3, -88, -89, -81, -77, -81, -79, 88, -78,
	-49, -9, -41, -48, -17, -32, 51, -31, -60, 51,
	-60, 51, -70, -87, 97, -87, -87, -6, -9, -81,
	-60, -87, -52,
}

var yyDef = [...]int{
	5, -2, 1, 282, 6, 12, 0, 0, 16, 17,
	0, 0, 42, 0, -2, -2, 306, 307, 26, 0,
	28, -2, 46, -2, 230, 231, -2, 233, 234, 235,
	236, 237, 32, 33, 106, 146, 147, 148, 149, 150,
	125, 271, -2, 143, 159, 0, 0, 30, 30, 282,
	0, 0, 0, 5, 171, 172, 0, -2, 0, 34,
	205, 206, 218, 0, 218, 36, 60, 61, 0, 49,
	225, 0, 224, 212, 213, 214, 209, 210, 211, 221,
	279, 227, 228, 2, 283, 295, 291, 292, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 299, 300, 301,
	302, 303, 304, 305, 131, 0, 0, 280, 281, 284,
	284, -2, 0, 27, 111, 0, 0, 0, 0, -2,
	-2, 0, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 120, 121, 47, 0,
	-2, -2, 0, 173, 157, 0, 195, 188, 185, 0,
	284, 288, 137, 0, 124, 0, 0, 288, 273, 0,
	0, 40, 284, 0, 37, 158, 192, 185, 185, 131,
	160, 0, 29, 0, 5, 0, 5, 282, 0, 283,
	0, 183, 184, -2, -2, 0, 242, 62, 5, 0,
	3, 282, 50, 39, 194, 41, 134, 135, 137, 0,
	0, 0, 0, 254, 63, 64, 277, 278, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 226,
	7, 296, 297, 8, 9, 10, 11, 13, 15, 141,
	-2, 0, 14, 18, 86, 24, 25, -2, 0, 0,
	19, 87, 127, 284, 132, 134, -2, 278, -2, 129,
	152, 43, 0, 285, 151, 284, 0, 0, 0, 131,
	0, -2, -2, 96, 97, 98, 99, 100, 101, 102,
	103, 104, -2, -2, -2, -2, -2, 112, 113, 114,
	115, 284, 122, 51, 48, 131, 0, 0, 0, 5,
	0, 123, 153, 0, 126, 290, 289, 139, 0, 154,
	272, 290, 0, 276, 284, 156, 144, 0, 0, 284,
	5, 174, 175, 5, 0, 0, 0, 0, 0, 298,
	0, 30, 131, 0, 5, 0, 0, 170, 4, 0,
	0, -2, 207, 216, 217, 215, 0, 208, 220, 222,
	223, 254, 0, 249, 249, 253, 249, 260, 267, 246,
	247, 0, 259, 264, 0, 263, 0, 0, 131, 0,
	-2, 133, 0, 0, 38, 193, 130, 0, 286, -2,
	-2, 278, 284, 152, 0, 284, -2, 152, 187, 199,
	0, 259, 287, 138, 0, 274, 275, 155, 197, 198,
	128, 298, 176, 298, 163, 31, 177, 178, 164, 0,
	166, 200, 202, 5, 204, 0, 5, 284, -2, 0,
	0, 169, 136, 138, 35, 189, 173, 0, 238, 239,
	284, 245, 0, 251, 252, 0, 258, 0, 0, 269,
	0, 270, 262, -2, 284, -2, 0, 21, 89, 22,
	90, 23, 91, 0, 0, -2, 0, 0, -2, 186,
	0, 140, 0, 179, 0, 181, 5, 0, 165, 203,
	0, 5, 0, -2, 168, 243, 191, 190, 219, 0,
	131, 244, 248, 249, 249, 261, 249, 268, 0, 265,
	266, -2, 20, 88, 0, 116, 161, 0, 182, 162,
	201, 167, 284, 250, 0, 256, 257, 5, 196, 249,
	298, 255, 180,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[1].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = []Node{yyDollar[1].node}
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			switch root(yylex).State.Peek() {
			case InClassBody:
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			case InModuleBody:
				mod := root(yylex).moduleStack.Peek()
				mod.Statements = append(mod.Statements, yyDollar[3].node)
				yyVAL.node_list = []Node{}
			default:
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yylex.(*Lexer).cond.Push(true)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*Lexer).cond.Pop()
			yyVAL.node = yyDollar[2].node
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = yyDollar[2].node_list
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, &SplatNode{Arg: yyDollar[3].node})
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Op: yyDollar[2].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = CLASS
			yyVAL.str = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).nextConstantType = MODULE
			yyVAL.str = yyDollar[1].str
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).nextConstantType == MODULE {
				root(yylex).PushModule(yyDollar[1].str, currentLineNo)
			} else {
				root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			}
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			access := &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: access, Operator: strings.Trim(yyDollar[5].str, "="), Right: yyDollar[6].node, lineNo: currentLineNo}
			assignment := &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			operation := &InfixExpressionNode{Left: call, Operator: strings.Trim(yyDollar[4].str, "="), Right: yyDollar[5].node, lineNo: currentLineNo}
			assignment := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{assignment}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			noop := &NoopNode{currentLineNo}
			root(yylex).AddError(NewParseError(&NoopNode{currentLineNo}, "Tried to modify constant '%s'. In Ruby this only warns, but thanos forbids it.", yyDollar[3].str).Terminal())
			yyVAL.node = noop
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True:       Statements{yyDollar[6].node},
					elseBranch: true,
				},
				lineNo: currentLineNo,
			}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = ArgsNode{&SplatNode{Arg: yyDollar[2].node}}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, &SplatNode{Arg: yyDollar[4].node})
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			if yyrcvr.Lookahead() == LBRACKETSTART || yyrcvr.Lookahead() == LPARENSTART {
				top := yylex.(*Lexer).cmdArg.Pop()
				yylex.(*Lexer).cmdArg.Push(true)
				yylex.(*Lexer).cmdArg.Push(top)
			} else {
				yylex.(*Lexer).cmdArg.Push(true)
			}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			/*
			 # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
			 # but the push must be done after cmdarg.pop() in the parser.
			 # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
			 # cmdarg.pop() to pop 1 pushed by command_args,
			 # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
			 last_token = @last_token[0]
			 lookahead = last_token == :tLBRACE_ARG
			 if lookahead
			   top = @lexer.cmdarg.pop
			   @lexer.cmdarg.pop
			   @lexer.cmdarg.push(top)
			 else
			   @lexer.cmdarg.pop
			 end
			*/
			yylex.(*Lexer).cmdArg.Pop()
			yyVAL.args = yyDollar[2].args
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, lineNo: currentLineNo}
			call.SetBlock(yyDollar[2].blk)
			yyVAL.node = call
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ForInNode{For: yyDollar[2].node_list, In: yyDollar[4].node, Body: yyDollar[5].node_list, lineNo: currentLineNo}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			r := root(yylex)
			module := r.PopModule()
			if parent := r.moduleStack.Peek(); parent != nil {
				parent.Modules = append(parent.Modules, module)
			} else {
				r.TopLevelModules = append(r.TopLevelModules, module)
			}
			yyVAL.node = module
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).State.Pop()
			yyVAL.node = yyDollar[1].meth
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BreakNode{lineNo: currentLineNo}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NextNode{lineNo: currentLineNo}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo, elseBranch: true}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			call.SetBlock(yyDollar[5].blk)
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, Op: yyDollar[2].str, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &SuperNode{Args: yyDollar[2].args, Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SuperNode{Method: root(yylex).currentMethod, Class: root(yylex).currentClass, lineNo: currentLineNo}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			str := root(yylex).StringStack.Pop()
			str.delim = yyDollar[3].str
			yyVAL.node = str
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo, delim: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: getStringKind(yyDollar[1].str), Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).StringStack.Peek()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).StringStack.Pop()
			yyVAL.node = regexp
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Push(InString)
			root(yylex).StringStack.Push(&StringNode{Kind: Regexp, Interps: make(map[int][]Node), lineNo: currentLineNo})
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).State.Pop()
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).State.Push(InMethodDefinition)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.params = append(append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[5].param), yyDollar[6].params...)
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].param), yyDollar[4].params...)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].param), yyDollar[4].params...)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append([]*Param{yyDollar[1].param}, yyDollar[2].params...)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: Splat}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: strings.TrimSpace(yyDollar[1].str), LineNo: currentLineNo})
			yyVAL.str = yyDollar[1].str
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
