// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const PRIVATE = 57421
const PROTECTED = 57422
const IVAR = 57423
const CVAR = 57424
const GVAR = 57425
const METHODIDENT = 57426
const IDENT = 57427
const COMMENT = 57428
const LABEL = 57429
const DOT = 57430
const LBRACE = 57431
const RBRACE = 57432
const NEWLINE = 57433
const COMMA = 57434
const STRINGBEG = 57435
const STRINGEND = 57436
const INTERPBEG = 57437
const INTERPEND = 57438
const STRINGBODY = 57439
const REGEXBEG = 57440
const REGEXEND = 57441
const REGEXPOPT = 57442
const RAWSTRINGBEG = 57443
const RAWSTRINGEND = 57444
const WORDSBEG = 57445
const RAWWORDSBEG = 57446
const SEMICOLON = 57447
const LBRACKET = 57448
const LBRACKETSTART = 57449
const RBRACKET = 57450
const LPAREN = 57451
const LPARENSTART = 57452
const RPAREN = 57453
const HASHROCKET = 57454
const SCOPE = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 12,
	5, 40,
	6, 199,
	7, 199,
	8, 199,
	9, 199,
	10, 199,
	11, 199,
	12, 199,
	92, 37,
	-2, 197,
	-1, 13,
	5, 41,
	6, 200,
	7, 200,
	8, 200,
	9, 200,
	10, 200,
	11, 200,
	12, 200,
	92, 38,
	-2, 198,
	-1, 20,
	38, 231,
	40, 231,
	41, 231,
	42, 231,
	44, 231,
	45, 231,
	46, 231,
	47, 231,
	48, 231,
	50, 231,
	52, 231,
	54, 231,
	61, 231,
	64, 231,
	65, 231,
	66, 231,
	69, 231,
	71, 231,
	81, 231,
	82, 231,
	83, 231,
	84, 231,
	85, 231,
	87, 231,
	89, 231,
	93, 231,
	98, 231,
	101, 231,
	103, 231,
	104, 231,
	107, 231,
	109, 231,
	110, 231,
	-2, 188,
	-1, 23,
	38, 232,
	40, 232,
	41, 232,
	42, 232,
	44, 232,
	45, 232,
	46, 232,
	47, 232,
	48, 232,
	50, 232,
	52, 232,
	54, 232,
	61, 232,
	64, 232,
	65, 232,
	66, 232,
	69, 232,
	71, 232,
	81, 232,
	82, 232,
	83, 232,
	84, 232,
	85, 232,
	87, 232,
	89, 232,
	93, 232,
	98, 232,
	101, 232,
	103, 232,
	104, 232,
	107, 232,
	109, 232,
	110, 232,
	-2, 191,
	-1, 29,
	88, 143,
	106, 143,
	113, 143,
	-2, 95,
	-1, 122,
	5, 37,
	92, 37,
	-2, 197,
	-1, 123,
	5, 38,
	92, 38,
	-2, 198,
	-1, 132,
	5, 40,
	6, 199,
	7, 199,
	8, 199,
	9, 199,
	10, 199,
	11, 199,
	12, 199,
	-2, 197,
	-1, 133,
	5, 41,
	6, 200,
	7, 200,
	8, 200,
	9, 200,
	10, 200,
	11, 200,
	12, 200,
	-2, 198,
	-1, 214,
	92, 115,
	-2, 118,
	-1, 221,
	92, 102,
	-2, 105,
	-1, 229,
	5, 43,
	-2, 231,
	-1, 232,
	15, 0,
	16, 0,
	-2, 70,
	-1, 233,
	15, 0,
	16, 0,
	-2, 71,
	-1, 243,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 83,
	-1, 244,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 85,
	-1, 245,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 86,
	-1, 246,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 87,
	-1, 247,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 88,
	-1, 324,
	5, 42,
	92, 39,
	-2, 157,
	-1, 373,
	92, 116,
	-2, 120,
	-1, 376,
	5, 39,
	92, 39,
	-2, 157,
	-1, 377,
	5, 42,
	-2, 157,
}

const yyPrivate = 57344

const yyLast = 1471

var yyAct = [...]int{
	18, 380, 262, 312, 366, 318, 167, 313, 314, 381,
	324, 309, 226, 311, 134, 14, 166, 291, 170, 383,
	84, 261, 281, 310, 29, 74, 150, 73, 271, 227,
	143, 277, 256, 129, 124, 265, 358, 93, 17, 332,
	171, 140, 140, 140, 125, 256, 93, 147, 374, 264,
	393, 174, 140, 140, 14, 260, 77, 94, 5, 218,
	368, 76, 94, 255, 92, 14, 304, 392, 142, 276,
	94, 94, 148, 369, 60, 75, 163, 365, 378, 127,
	51, 148, 172, 140, 221, 225, 326, 263, 14, 72,
	303, 322, 300, 140, 306, 275, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 51,
	135, 211, 219, 219, 51, 51, 51, 51, 51, 257,
	51, 131, 10, 321, 177, 204, 319, 206, 162, 130,
	7, 379, 220, 220, 224, 339, 140, 268, 140, 267,
	270, 320, 259, 51, 9, 154, 133, 13, 51, 51,
	51, 51, 51, 51, 51, 285, 153, 289, 177, 274,
	205, 10, 140, 14, 342, 14, 123, 273, 269, 7,
	284, 282, 10, 282, 298, 287, 280, 267, 266, 163,
	7, 132, 12, 317, 371, 320, 13, 213, 217, 156,
	156, 156, 156, 156, 293, 10, 357, 13, 231, 302,
	303, 122, 300, 7, 288, 10, 10, 308, 283, 165,
	283, 319, 77, 222, 222, 319, 61, 76, 384, 325,
	13, 12, 345, 156, 156, 156, 156, 230, 51, 4,
	51, 75, 12, 406, 353, 77, 403, 77, 102, 328,
	76, 290, 76, 388, 293, 329, 140, 390, 297, 225,
	225, 140, 384, 151, 75, 12, 75, 140, 330, 386,
	382, 140, 140, 331, 146, 350, 140, 140, 399, 136,
	320, 216, 317, 223, 320, 340, 173, 348, 344, 202,
	10, 346, 10, 14, 140, 336, 14, 176, 7, 14,
	7, 334, 337, 341, 139, 144, 347, 334, 349, 14,
	354, 356, 352, 203, 343, 13, 367, 13, 360, 224,
	363, 140, 296, 140, 225, 116, 169, 140, 359, 279,
	78, 177, 79, 325, 325, 364, 158, 70, 71, 80,
	295, 376, 377, 33, 375, 175, 214, 139, 370, 81,
	12, 323, 12, 337, 258, 83, 385, 128, 51, 82,
	387, 51, 219, 121, 51, 168, 3, 1, 14, 395,
	141, 140, 395, 397, 51, 400, 402, 398, 389, 396,
	50, 282, 220, 391, 160, 394, 152, 397, 351, 140,
	292, 405, 315, 78, 140, 79, 407, 278, 159, 14,
	307, 409, 80, 51, 14, 228, 408, 316, 212, 272,
	10, 325, 81, 10, 413, 137, 10, 412, 7, 411,
	327, 7, 19, 11, 7, 14, 10, 410, 6, 2,
	282, 263, 53, 51, 7, 13, 36, 35, 13, 31,
	43, 13, 37, 155, 157, 30, 138, 161, 149, 38,
	34, 13, 99, 100, 101, 10, 102, 149, 149, 54,
	362, 55, 51, 222, 51, 117, 119, 118, 120, 51,
	12, 57, 286, 12, 8, 294, 12, 207, 208, 209,
	210, 164, 305, 58, 301, 10, 12, 299, 215, 215,
	51, 56, 178, 7, 0, 361, 117, 119, 118, 120,
	105, 103, 104, 111, 112, 97, 98, 99, 100, 101,
	13, 102, 0, 0, 0, 0, 10, 0, 0, 0,
	0, 10, 0, 0, 7, 0, 0, 0, 0, 7,
	333, 0, 0, 0, 144, 335, 0, 404, 0, 338,
	144, 13, 10, 0, 0, 12, 13, 0, 0, 0,
	7, 0, 62, 149, 32, 25, 63, 139, 70, 71,
	27, 28, 49, 0, 59, 0, 44, 13, 45, 0,
	0, 0, 0, 0, 0, 46, 12, 52, 42, 26,
	23, 12, 0, 48, 372, 47, 373, 0, 0, 0,
	338, 0, 0, 15, 16, 21, 24, 22, 69, 20,
	0, 0, 12, 41, 0, 204, 0, 64, 0, 0,
	0, 0, 68, 0, 0, 66, 0, 65, 67, 0,
	0, 40, 0, 62, 39, 32, 25, 63, 0, 70,
	71, 27, 28, 49, 401, 59, 0, 44, 0, 45,
	0, 97, 98, 99, 100, 101, 46, 102, 52, 42,
	26, 23, 333, 0, 48, 0, 47, 111, 112, 97,
	98, 99, 100, 101, 0, 102, 21, 24, 22, 69,
	20, 77, 0, 0, 41, 0, 76, 0, 64, 0,
	0, 0, 0, 68, 0, 0, 66, 0, 65, 67,
	75, 0, 40, 0, 62, 39, 32, 25, 63, 355,
	70, 71, 27, 28, 49, 0, 59, 0, 44, 0,
	45, 0, 0, 0, 0, 0, 0, 46, 0, 52,
	42, 26, 23, 0, 0, 48, 0, 47, 85, 86,
	87, 88, 89, 90, 91, 15, 16, 21, 24, 22,
	69, 20, 0, 0, 0, 41, 0, 0, 0, 64,
	0, 0, 0, 0, 68, 0, 0, 66, 0, 65,
	67, 0, 0, 40, 0, 62, 39, 32, 25, 63,
	0, 70, 71, 27, 28, 49, 0, 59, 0, 44,
	0, 45, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 126, 26, 23, 0, 0, 48, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
	22, 69, 20, 0, 145, 0, 41, 0, 263, 0,
	64, 0, 0, 0, 0, 68, 0, 0, 66, 0,
	65, 67, 0, 0, 40, 0, 62, 39, 32, 25,
	63, 0, 70, 71, 27, 28, 49, 0, 59, 0,
	44, 0, 45, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 126, 26, 23, 0, 0, 48, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	24, 22, 69, 20, 0, 145, 0, 41, 0, 0,
	0, 64, 0, 0, 0, 0, 68, 0, 0, 66,
	0, 65, 67, 0, 0, 40, 0, 171, 39, 62,
	0, 32, 25, 63, 0, 70, 71, 27, 28, 49,
	0, 59, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 126, 26, 23, 0, 0,
	48, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 21, 24, 22, 69, 20, 0, 145, 0,
	41, 0, 0, 0, 64, 0, 0, 0, 0, 68,
	0, 0, 66, 0, 65, 67, 0, 0, 40, 0,
	147, 39, 62, 0, 32, 25, 63, 0, 70, 71,
	27, 28, 49, 0, 59, 0, 44, 0, 45, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 126, 26,
	23, 0, 0, 48, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 21, 24, 22, 69, 20,
	0, 145, 0, 41, 0, 0, 0, 64, 0, 0,
	0, 0, 68, 0, 0, 66, 0, 65, 67, 0,
	0, 40, 0, 62, 39, 32, 25, 63, 0, 70,
	71, 27, 28, 49, 0, 59, 0, 44, 0, 45,
	0, 0, 0, 0, 0, 0, 46, 0, 52, 42,
	26, 23, 0, 0, 48, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 21, 24, 22, 69,
	20, 0, 0, 0, 41, 0, 0, 0, 64, 0,
	0, 0, 0, 68, 0, 0, 66, 0, 65, 67,
	0, 0, 40, 0, 62, 39, 32, 25, 63, 0,
	70, 71, 27, 28, 49, 0, 59, 0, 44, 0,
	45, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	126, 26, 23, 0, 0, 48, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 24, 22,
	69, 20, 0, 0, 0, 41, 0, 0, 0, 64,
	0, 0, 0, 0, 68, 0, 0, 66, 0, 65,
	67, 62, 0, 40, 25, 63, 39, 70, 71, 27,
	28, 49, 0, 59, 0, 44, 0, 45, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 126, 26, 23,
	0, 0, 48, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 21, 24, 22, 69, 20, 0,
	0, 0, 41, 0, 0, 0, 64, 0, 0, 0,
	0, 68, 0, 0, 66, 0, 65, 67, 0, 0,
	40, 0, 115, 39, 95, 96, 114, 113, 106, 107,
	108, 109, 110, 117, 119, 118, 120, 105, 103, 104,
	111, 112, 97, 98, 99, 100, 101, 0, 102, 184,
	185, 192, 186, 187, 188, 189, 190, 191, 183, 181,
	182, 193, 194, 195, 196, 197, 198, 199, 0, 200,
	201, 184, 185, 192, 186, 187, 188, 189, 190, 191,
	183, 181, 182, 193, 194, 195, 196, 197, 198, 199,
	0, 200, 201, 0, 0, 0, 180, 0, 0, 0,
	263, 105, 103, 104, 111, 112, 97, 98, 99, 100,
	101, 0, 102, 0, 69, 179, 0, 0, 180, 103,
	104, 111, 112, 97, 98, 99, 100, 101, 0, 102,
	0, 0, 0, 0, 0, 0, 69, 229, 115, 0,
	95, 96, 114, 113, 106, 107, 108, 109, 110, 117,
	119, 118, 120, 105, 103, 104, 111, 112, 97, 98,
	99, 100, 101, 0, 102, 114, 113, 106, 107, 108,
	109, 110, 117, 119, 118, 120, 105, 103, 104, 111,
	112, 97, 98, 99, 100, 101, 0, 102, 113, 106,
	107, 108, 109, 110, 117, 119, 118, 120, 105, 103,
	104, 111, 112, 97, 98, 99, 100, 101, 0, 102,
	106, 107, 108, 109, 110, 117, 119, 118, 120, 105,
	103, 104, 111, 112, 97, 98, 99, 100, 101, 0,
	102,
}

var yyPact = [...]int{
	656, -1000, -1000, -30, 277, -1000, 354, 350, -1000, -1000,
	722, -1000, -1000, -1000, -42, -1000, -1000, -1000, 1365, 1153,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 441, 1086, 28, -1000, -1000, -1000, -1000, -1000, 656,
	1086, 944, 871, 77, 1015, 1015, 1015, 1015, 585, 153,
	656, 798, 944, -1000, -1000, -1000, -1000, -46, -1000, 1270,
	-1000, -1000, 293, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 514, -1000, -1000, 84, 46, 1015, 1015,
	1015, 1015, 1015, 1015, 1015, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 944, 1292, 142, 1086, 1086, 1086, 1086, 1086,
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
	1086, 1086, 1086, 1086, 1086, 1086, 1086, -1000, -1000, -1000,
	-1000, 26, -1000, -1000, -43, -1000, -62, -69, 1086, -1000,
	349, 722, -1000, -1000, -51, -1000, 340, -59, 96, -1000,
	1365, 57, 58, -1000, -84, 1086, -1000, 727, -1000, 3,
	-23, -84, -1000, 300, 300, 159, -1000, 159, 656, 136,
	656, -30, 134, 44, 314, -1000, 271, -1000, -30, -1000,
	-1000, 944, -1000, 115, -36, -5, 108, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 277, -1000, 42, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1, -1000, -1000, -1000, -1000,
	-1000, 1365, 346, -1000, -1000, 1365, -4, -1000, -6, -1000,
	-69, -1000, 1388, 1388, 417, 417, 209, 209, 209, 209,
	626, 626, 1330, 472, 472, 472, 472, 472, 608, 608,
	1431, 1410, 1249, 1313, -1000, 944, 1270, 1313, 1086, 1086,
	944, -1000, -72, -1000, -1000, -1000, 1086, -1000, -1000, -1000,
	944, 1086, -1000, -4, -1000, 944, 944, 55, 656, 89,
	263, 656, 173, -1000, 656, 255, -1000, -1000, -1000, 236,
	134, 224, 184, 1086, 656, 140, -1000, -1000, -75, -1000,
	-1000, -1000, -1000, 1153, -1000, -1000, -1000, -1000, 197, -30,
	-15, -32, -1000, -1000, -1000, -19, -1000, 343, -1000, 109,
	1086, -1000, 1086, 1015, -1000, -60, 944, -1000, -1000, 330,
	-4, -4, -1000, -1000, -1000, -1000, -1000, -23, -84, -1000,
	-1000, 49, -1000, -1000, 202, -1000, 168, -1000, -1000, 218,
	-1000, -1000, -1000, 656, -1000, 161, 206, -30, -1000, -29,
	-56, -1000, -1000, -4, -1000, 197, -1000, -1000, 193, 64,
	1086, -1000, -1000, -1000, -1000, 1086, -1000, -1000, -1000, 89,
	195, -1000, 1015, -1000, 656, 192, -1000, -1000, 1086, 656,
	-1000, -1000, -1000, 944, -1000, -1000, -32, -1000, -1000, 343,
	-1000, -1000, 1365, -1000, 159, -1000, -1000, -1000, -4, -1000,
	656, -1000, 202, -1000,
}

var yyPgo = [...]int{
	0, 79, 74, 21, 492, 237, 22, 25, 325, 10,
	491, 487, 286, 484, 483, 482, 481, 20, 475, 474,
	472, 471, 461, 459, 191, 156, 226, 154, 0, 24,
	450, 139, 449, 131, 14, 398, 58, 198, 445, 38,
	442, 336, 59, 263, 440, 239, 1, 9, 19, 439,
	437, 436, 343, 432, 6, 365, 429, 428, 423, 422,
	405, 29, 12, 18, 420, 415, 274, 197, 408, 7,
	5, 8, 407, 400, 11, 23, 397, 392, 4, 3,
	13, 16, 390, 17, 388, 31, 386, 380, 30, 26,
	370, 367, 89, 27, 2, 35,
}

var yyR1 = [...]int{
	0, 91, 56, 81, 54, 55, 55, 55, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 36, 36,
	37, 37, 27, 27, 35, 41, 39, 1, 38, 38,
	38, 57, 58, 58, 52, 59, 59, 53, 53, 53,
	31, 31, 31, 31, 16, 5, 5, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 8, 8, 8, 8,
	49, 49, 43, 65, 65, 42, 63, 64, 64, 62,
	62, 62, 61, 61, 61, 60, 60, 68, 68, 66,
	67, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 34, 6, 6, 6, 20, 20, 46,
	46, 47, 47, 76, 76, 44, 44, 44, 86, 86,
	85, 83, 82, 84, 84, 84, 30, 30, 50, 51,
	21, 21, 10, 10, 11, 12, 12, 12, 13, 40,
	14, 15, 87, 22, 23, 23, 26, 26, 24, 24,
	24, 24, 24, 25, 25, 25, 25, 32, 32, 33,
	33, 18, 18, 73, 73, 79, 79, 78, 78, 74,
	74, 74, 74, 74, 69, 75, 75, 70, 70, 77,
	77, 71, 80, 80, 72, 90, 90, 89, 89, 88,
	88, 2, 2, 2, 92, 92, 94, 94, 3, 9,
	95, 95, 95, 7, 7, 7, 7, 93, 93, 48,
	17, 17, 17, 17, 17, 17, 17, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
	2, 1, 1, 2, 1, 2, 3, 1, 1, 4,
	1, 1, 4, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 6, 1, 1, 1, 1, 1,
	3, 3, 1, 0, 2, 1, 3, 0, 1, 0,
	1, 2, 1, 1, 3, 1, 3, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	4, 3, 1, 1, 2, 6, 6, 4, 4, 5,
	4, 5, 3, 1, 1, 1, 2, 1, 1, 1,
	5, 1, 2, 0, 3, 2, 4, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 3,
	1, 1, 3, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 3, 2, 1, 1, 2, 0, 4,
	2, 2, 1, 0, 1, 1, 3, 2, 1, 1,
	3, 3, 1, 3, 2, 0, 2, 1, 3, 3,
	2, 1, 1, 1, 0, 1, 0, 1, 2, 2,
	0, 1, 1, 1, 1, 2, 3, 1, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -91, -56, -55, -45, -36, -57, -31, -19, -27,
	-33, -58, -24, -25, -34, 79, 80, -39, -28, -59,
	85, 81, 83, 66, 82, 41, 65, 46, 47, -29,
	-38, -49, 40, -52, -30, -50, -51, -40, -32, 110,
	107, 89, 64, -44, 52, 54, 61, 71, 69, 48,
	-87, -1, 63, -53, -23, -22, -10, -21, -14, 50,
	-2, -26, 38, 42, 93, 103, 101, 104, 98, 84,
	44, 45, -92, -93, -7, 105, 91, 86, 53, 55,
	62, 72, 5, 5, -17, 6, 7, 8, 9, 10,
	11, 12, 106, 88, 113, 15, 16, 33, 34, 35,
	36, 37, 39, 29, 30, 28, 19, 20, 21, 22,
	23, 31, 32, 18, 17, 13, -8, 24, 26, 25,
	27, -52, -24, -25, -34, -29, 64, -1, -8, -28,
	-31, -33, -24, -25, -34, 92, -45, -65, -60, -43,
	-28, -90, -89, -88, -43, 87, -66, 109, -61, -60,
	-89, -43, -86, 89, 78, -35, -27, -35, -41, -35,
	-41, -35, -92, -93, -16, 66, -81, -54, -55, -66,
	-63, 109, -61, -12, 97, -12, -5, -2, -4, 85,
	66, 29, 30, 28, 19, 20, 22, 23, 24, 25,
	26, 27, 21, 31, 32, 33, 34, 35, 36, 37,
	39, 40, -26, -45, 91, 86, 91, -35, -35, -35,
	-35, -39, -68, -67, -43, -60, -67, -37, -42, -39,
	-36, -28, -31, -37, -42, -28, -62, -61, -60, 85,
	-5, 66, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, 92, 106, 88, -28, 5, -17,
	106, -3, -94, 91, 108, -95, 92, 91, 90, -95,
	92, 112, -43, -61, -3, 92, 92, -85, -76, 29,
	-85, -6, -7, 59, -6, -54, -20, -7, 78, -54,
	-92, -83, -82, 70, -18, 26, 51, -92, -62, -11,
	97, -13, 94, 95, 102, -15, 99, -73, 109, -74,
	-75, -80, -79, -69, -71, -77, -72, 85, -70, 28,
	87, 91, 92, 5, -9, -94, 92, -64, -63, -94,
	-62, -62, 111, -43, -88, -43, -3, -89, -43, 90,
	-54, -75, 85, 51, -54, 59, -54, 51, 51, -83,
	51, -84, -48, 60, -83, -60, -81, 66, 111, -29,
	-34, -24, -25, -74, -7, 92, -78, -78, 92, 92,
	5, 85, -43, -43, 108, 14, -9, -9, 29, 92,
	-46, -47, 68, -48, 60, -47, 51, -54, 92, -6,
	51, -7, 96, 106, -3, -79, -80, -69, -71, 85,
	-70, -43, -28, 51, -27, -54, 51, -54, -62, -78,
	-6, -9, -54, -46,
}

var yyDef = [...]int{
	5, -2, 1, 234, 6, 12, 0, 0, 16, 17,
	0, 31, -2, -2, 0, 257, 258, 22, 23, 32,
	-2, 189, 190, -2, 192, 193, 194, 195, 196, -2,
	26, 84, 0, 0, 121, 122, 123, 124, 125, 0,
	103, 225, 132, 133, 0, 0, 0, 0, 234, 0,
	5, 0, 0, 34, 166, 167, 177, 0, 177, 0,
	27, 184, 0, 183, 172, 173, 170, 171, 180, 233,
	186, 187, 2, 235, 247, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 109, 0, 0, 72, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	99, 33, -2, -2, 0, 143, 132, 0, 0, 89,
	0, 0, -2, -2, 0, 35, 236, 0, 240, 115,
	102, 0, 240, 227, 0, 0, 29, 236, 119, 112,
	113, 115, 134, 153, 153, 0, 24, 0, 5, 0,
	5, 234, 0, 235, 201, 44, 0, 3, 234, 28,
	155, 109, 30, 0, 0, 0, 213, 45, 46, 231,
	232, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 185, 7, 248, 0, 245, 8, 9, 10,
	11, 13, 15, 117, -2, 0, 14, 18, 68, 20,
	21, -2, 0, 19, 69, 105, 236, 110, 112, -2,
	107, 127, -2, -2, 74, 75, 76, 77, 78, 79,
	80, 81, 82, -2, -2, -2, -2, -2, 90, 91,
	92, 93, 236, 100, 36, 109, 0, 101, 0, 0,
	109, 126, 0, 237, 128, 104, 242, 241, 129, 226,
	242, 0, 230, 236, 131, 0, 0, 0, 5, 0,
	0, 5, 144, 145, 5, 0, 25, 147, 148, 0,
	0, 0, 249, 0, 5, 0, 142, 4, 0, 168,
	175, 176, 174, 0, 169, 179, 181, 182, 213, 0,
	208, 208, 212, 215, 222, 205, 206, 214, 219, 0,
	218, 246, 0, 0, -2, 0, 111, 156, 108, 0,
	236, 236, 238, 116, 228, 229, 130, 114, 116, 158,
	160, 0, 214, 159, 249, 146, 249, 137, 138, 0,
	140, 161, 163, 5, 165, 0, 0, 0, 106, 143,
	0, 197, 198, 236, 204, 0, 210, 211, 0, 0,
	0, 224, 217, -2, 239, 0, -2, -2, 154, 0,
	0, 149, 0, 151, 5, 0, 139, 164, 0, 5,
	141, 202, 178, 109, 203, 207, 208, 216, 223, 0,
	220, 221, 94, 135, 0, 152, 136, 162, 236, 209,
	5, 157, 249, 150,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			}
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(getStringKind(yyDollar[1].str))
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(getStringKind(yyDollar[1].str))
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			yyVAL.node = regexp
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(Regexp)
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
