// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Root
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Root {
	return yylex.(*Lexer).Root
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	root      *Root
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const LSHIFTASSIGN = 57353
const RSHIFTASSIGN = 57354
const QMARK = 57355
const COLON = 57356
const DOT2 = 57357
const DOT3 = 57358
const LOGICALOR = 57359
const LOGICALAND = 57360
const SPACESHIP = 57361
const EQ = 57362
const NEQ = 57363
const MATCH = 57364
const NOTMATCH = 57365
const GT = 57366
const GTE = 57367
const LT = 57368
const LTE = 57369
const AND = 57370
const PIPE = 57371
const CARET = 57372
const LSHIFT = 57373
const RSHIFT = 57374
const PLUS = 57375
const MINUS = 57376
const ASTERISK = 57377
const SLASH = 57378
const MODULO = 57379
const UNARY_NUM = 57380
const POW = 57381
const BANG = 57382
const NIL = 57383
const SYMBOL = 57384
const STRING = 57385
const INT = 57386
const FLOAT = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const MODULE = 57391
const DEF = 57392
const END = 57393
const IF = 57394
const IF_MOD = 57395
const UNLESS = 57396
const UNLESS_MOD = 57397
const BEGIN = 57398
const RESCUE = 57399
const RESCUE_MOD = 57400
const THEN = 57401
const ELSE = 57402
const WHILE = 57403
const WHILE_MOD = 57404
const RETURN = 57405
const YIELD = 57406
const SELF = 57407
const CONSTANT = 57408
const ENSURE = 57409
const ELSIF = 57410
const CASE = 57411
const WHEN = 57412
const UNTIL = 57413
const UNTIL_MOD = 57414
const FOR = 57415
const BREAK = 57416
const NEXT = 57417
const SUPER = 57418
const ALIAS = 57419
const DO = 57420
const PRIVATE = 57421
const PROTECTED = 57422
const IVAR = 57423
const CVAR = 57424
const GVAR = 57425
const METHODIDENT = 57426
const IDENT = 57427
const COMMENT = 57428
const LABEL = 57429
const DOT = 57430
const LBRACE = 57431
const RBRACE = 57432
const NEWLINE = 57433
const COMMA = 57434
const STRINGBEG = 57435
const STRINGEND = 57436
const INTERPBEG = 57437
const INTERPEND = 57438
const STRINGBODY = 57439
const REGEXBEG = 57440
const REGEXEND = 57441
const REGEXPOPT = 57442
const RAWSTRINGBEG = 57443
const RAWSTRINGEND = 57444
const WORDSBEG = 57445
const RAWWORDSBEG = 57446
const XSTRINGBEG = 57447
const RAWXSTRINGBEG = 57448
const SEMICOLON = 57449
const LBRACKET = 57450
const LBRACKETSTART = 57451
const RBRACKET = 57452
const LPAREN = 57453
const LPARENSTART = 57454
const RPAREN = 57455
const HASHROCKET = 57456
const SCOPE = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"LSHIFTASSIGN",
	"RSHIFTASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"WORDSBEG",
	"RAWWORDSBEG",
	"XSTRINGBEG",
	"RAWXSTRINGBEG",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 12,
	5, 40,
	6, 202,
	7, 202,
	8, 202,
	9, 202,
	10, 202,
	11, 202,
	12, 202,
	92, 37,
	-2, 200,
	-1, 13,
	5, 41,
	6, 203,
	7, 203,
	8, 203,
	9, 203,
	10, 203,
	11, 203,
	12, 203,
	92, 38,
	-2, 201,
	-1, 20,
	38, 234,
	40, 234,
	41, 234,
	42, 234,
	44, 234,
	45, 234,
	46, 234,
	47, 234,
	48, 234,
	50, 234,
	52, 234,
	54, 234,
	61, 234,
	64, 234,
	65, 234,
	66, 234,
	69, 234,
	71, 234,
	81, 234,
	82, 234,
	83, 234,
	84, 234,
	85, 234,
	87, 234,
	89, 234,
	93, 234,
	98, 234,
	101, 234,
	103, 234,
	104, 234,
	105, 234,
	106, 234,
	109, 234,
	111, 234,
	112, 234,
	-2, 191,
	-1, 23,
	38, 235,
	40, 235,
	41, 235,
	42, 235,
	44, 235,
	45, 235,
	46, 235,
	47, 235,
	48, 235,
	50, 235,
	52, 235,
	54, 235,
	61, 235,
	64, 235,
	65, 235,
	66, 235,
	69, 235,
	71, 235,
	81, 235,
	82, 235,
	83, 235,
	84, 235,
	85, 235,
	87, 235,
	89, 235,
	93, 235,
	98, 235,
	101, 235,
	103, 235,
	104, 235,
	105, 235,
	106, 235,
	109, 235,
	111, 235,
	112, 235,
	-2, 194,
	-1, 29,
	88, 143,
	108, 143,
	115, 143,
	-2, 95,
	-1, 124,
	5, 37,
	92, 37,
	-2, 200,
	-1, 125,
	5, 38,
	92, 38,
	-2, 201,
	-1, 134,
	5, 40,
	6, 202,
	7, 202,
	8, 202,
	9, 202,
	10, 202,
	11, 202,
	12, 202,
	-2, 200,
	-1, 135,
	5, 41,
	6, 203,
	7, 203,
	8, 203,
	9, 203,
	10, 203,
	11, 203,
	12, 203,
	-2, 201,
	-1, 217,
	92, 115,
	-2, 118,
	-1, 224,
	92, 102,
	-2, 105,
	-1, 232,
	5, 43,
	-2, 234,
	-1, 235,
	15, 0,
	16, 0,
	-2, 70,
	-1, 236,
	15, 0,
	16, 0,
	-2, 71,
	-1, 246,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 83,
	-1, 247,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 85,
	-1, 248,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 86,
	-1, 249,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 87,
	-1, 250,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 88,
	-1, 328,
	5, 42,
	92, 39,
	-2, 157,
	-1, 378,
	92, 116,
	-2, 120,
	-1, 381,
	5, 39,
	92, 39,
	-2, 157,
	-1, 382,
	5, 42,
	-2, 157,
}

const yyPrivate = 57344

const yyLast = 1561

var yyAct = [...]int{
	18, 284, 370, 316, 385, 265, 310, 229, 153, 264,
	314, 328, 315, 321, 386, 294, 317, 233, 312, 29,
	152, 313, 168, 74, 60, 388, 172, 145, 280, 274,
	362, 76, 336, 131, 268, 86, 5, 169, 173, 127,
	75, 142, 142, 142, 259, 149, 95, 259, 95, 141,
	146, 379, 142, 142, 267, 221, 307, 306, 17, 303,
	176, 309, 144, 397, 398, 372, 263, 258, 94, 270,
	273, 96, 164, 96, 96, 96, 383, 178, 270, 269,
	279, 129, 51, 373, 180, 142, 224, 228, 369, 165,
	330, 326, 278, 217, 141, 142, 257, 137, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	180, 51, 223, 223, 266, 325, 51, 51, 51, 51,
	51, 260, 51, 133, 10, 207, 209, 132, 7, 384,
	343, 291, 227, 214, 222, 222, 271, 324, 142, 79,
	142, 323, 136, 14, 78, 322, 275, 51, 230, 277,
	156, 287, 51, 51, 51, 51, 51, 51, 51, 262,
	77, 155, 126, 10, 142, 135, 13, 7, 208, 272,
	220, 301, 134, 12, 10, 283, 346, 293, 7, 285,
	322, 285, 14, 290, 300, 125, 305, 306, 288, 303,
	292, 150, 124, 14, 165, 375, 296, 361, 9, 10,
	150, 174, 320, 7, 323, 13, 79, 216, 234, 10,
	10, 78, 12, 225, 225, 167, 13, 80, 14, 81,
	357, 389, 389, 12, 349, 329, 82, 77, 311, 387,
	296, 412, 51, 61, 51, 286, 83, 404, 409, 323,
	148, 13, 395, 158, 158, 158, 158, 158, 12, 142,
	332, 333, 228, 228, 142, 266, 334, 226, 391, 354,
	142, 335, 79, 352, 142, 142, 351, 78, 337, 142,
	142, 347, 146, 339, 180, 299, 340, 342, 146, 158,
	158, 158, 158, 77, 10, 322, 10, 142, 7, 341,
	7, 338, 171, 219, 345, 141, 205, 338, 276, 353,
	160, 358, 104, 14, 282, 14, 118, 371, 227, 344,
	360, 356, 348, 286, 142, 350, 363, 142, 228, 298,
	367, 142, 376, 175, 4, 378, 13, 33, 13, 342,
	329, 329, 377, 12, 368, 12, 381, 382, 130, 180,
	79, 341, 320, 380, 323, 78, 393, 123, 162, 72,
	73, 394, 374, 51, 223, 390, 51, 327, 261, 51,
	85, 77, 84, 402, 138, 142, 1, 399, 143, 51,
	401, 408, 400, 406, 407, 400, 222, 405, 402, 403,
	50, 285, 177, 396, 142, 392, 170, 3, 80, 142,
	81, 154, 337, 355, 415, 295, 414, 82, 318, 51,
	206, 281, 416, 319, 215, 10, 139, 83, 10, 7,
	329, 10, 7, 419, 331, 7, 417, 411, 19, 11,
	6, 10, 413, 2, 14, 7, 53, 14, 36, 51,
	14, 35, 285, 31, 231, 99, 100, 101, 102, 103,
	14, 104, 43, 37, 418, 161, 30, 13, 38, 364,
	13, 10, 34, 13, 12, 225, 54, 12, 55, 51,
	12, 51, 57, 13, 289, 8, 51, 101, 102, 103,
	12, 104, 366, 297, 166, 140, 308, 151, 58, 365,
	304, 10, 302, 56, 181, 7, 151, 151, 51, 0,
	157, 159, 0, 0, 163, 119, 121, 120, 122, 0,
	14, 107, 105, 106, 113, 114, 99, 100, 101, 102,
	103, 0, 104, 10, 0, 0, 0, 7, 10, 218,
	218, 0, 7, 13, 0, 0, 210, 211, 212, 213,
	12, 0, 14, 0, 0, 0, 0, 14, 0, 0,
	10, 0, 0, 0, 7, 0, 105, 106, 113, 114,
	99, 100, 101, 102, 103, 13, 104, 0, 0, 14,
	13, 0, 12, 0, 0, 0, 0, 12, 0, 62,
	0, 32, 25, 63, 0, 72, 73, 27, 28, 49,
	0, 59, 13, 44, 151, 45, 410, 0, 0, 12,
	0, 0, 46, 0, 52, 42, 26, 23, 0, 0,
	48, 0, 47, 87, 88, 89, 90, 91, 92, 93,
	15, 16, 21, 24, 22, 71, 20, 0, 0, 0,
	41, 0, 207, 0, 64, 0, 0, 0, 0, 70,
	0, 0, 67, 0, 65, 68, 66, 69, 0, 0,
	40, 0, 62, 39, 32, 25, 63, 0, 72, 73,
	27, 28, 49, 0, 59, 0, 44, 0, 45, 0,
	0, 0, 0, 0, 0, 46, 0, 52, 42, 26,
	23, 0, 0, 48, 0, 47, 113, 114, 99, 100,
	101, 102, 103, 0, 104, 21, 24, 22, 71, 20,
	79, 0, 0, 41, 0, 78, 0, 64, 0, 0,
	0, 0, 70, 0, 0, 67, 0, 65, 68, 66,
	69, 77, 0, 40, 0, 0, 39, 0, 62, 0,
	32, 25, 63, 0, 72, 73, 27, 28, 49, 0,
	59, 359, 44, 0, 45, 0, 0, 0, 0, 0,
	0, 46, 0, 52, 42, 26, 23, 0, 0, 48,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 15,
	16, 21, 24, 22, 71, 20, 0, 0, 0, 41,
	0, 0, 0, 64, 0, 0, 0, 0, 70, 0,
	0, 67, 0, 65, 68, 66, 69, 0, 0, 40,
	0, 62, 39, 32, 25, 63, 0, 72, 73, 27,
	28, 49, 0, 59, 0, 44, 0, 45, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 128, 26, 23,
	0, 0, 48, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 21, 24, 22, 71, 20, 0,
	147, 0, 41, 0, 266, 0, 64, 0, 0, 0,
	0, 70, 0, 0, 67, 0, 65, 68, 66, 69,
	0, 0, 40, 0, 62, 39, 32, 25, 63, 0,
	72, 73, 27, 28, 49, 0, 59, 0, 44, 0,
	45, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	128, 26, 23, 0, 0, 48, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 24, 22,
	71, 20, 0, 147, 0, 41, 0, 0, 0, 64,
	0, 0, 0, 0, 70, 0, 0, 67, 0, 65,
	68, 66, 69, 0, 0, 40, 0, 173, 39, 62,
	0, 32, 25, 63, 0, 72, 73, 27, 28, 49,
	0, 59, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 128, 26, 23, 0, 0,
	48, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 21, 24, 22, 71, 20, 0, 147, 0,
	41, 0, 0, 0, 64, 0, 0, 0, 0, 70,
	0, 0, 67, 0, 65, 68, 66, 69, 0, 0,
	40, 0, 149, 39, 62, 0, 32, 25, 63, 0,
	72, 73, 27, 28, 49, 0, 59, 0, 44, 0,
	45, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	128, 26, 23, 0, 0, 48, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 24, 22,
	71, 20, 0, 147, 0, 41, 0, 0, 0, 64,
	0, 0, 0, 0, 70, 0, 0, 67, 0, 65,
	68, 66, 69, 0, 0, 40, 0, 62, 39, 32,
	25, 63, 0, 72, 73, 27, 28, 49, 0, 59,
	0, 44, 0, 45, 0, 0, 0, 0, 0, 0,
	46, 0, 52, 42, 26, 23, 0, 0, 48, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	21, 24, 22, 71, 20, 0, 0, 0, 41, 0,
	0, 0, 64, 0, 0, 0, 0, 70, 0, 0,
	67, 0, 65, 68, 66, 69, 0, 0, 40, 0,
	62, 39, 32, 25, 63, 0, 72, 73, 27, 28,
	49, 0, 59, 0, 44, 0, 45, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 128, 26, 23, 0,
	0, 48, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 24, 22, 71, 20, 0, 0,
	0, 41, 0, 0, 0, 64, 0, 0, 0, 0,
	70, 0, 0, 67, 0, 65, 68, 66, 69, 62,
	0, 40, 25, 63, 39, 72, 73, 27, 28, 49,
	0, 59, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 128, 26, 23, 0, 0,
	48, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 21, 24, 22, 71, 20, 0, 0, 0,
	41, 0, 0, 0, 64, 0, 0, 0, 0, 70,
	0, 0, 67, 0, 65, 68, 66, 69, 0, 0,
	40, 0, 117, 39, 97, 98, 116, 115, 108, 109,
	110, 111, 112, 119, 121, 120, 122, 107, 105, 106,
	113, 114, 99, 100, 101, 102, 103, 0, 104, 187,
	188, 195, 189, 190, 191, 192, 193, 194, 186, 184,
	185, 196, 197, 198, 199, 200, 201, 202, 0, 203,
	204, 187, 188, 195, 189, 190, 191, 192, 193, 194,
	186, 184, 185, 196, 197, 198, 199, 200, 201, 202,
	0, 203, 204, 0, 0, 179, 183, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 182, 0, 0, 183, 119,
	121, 120, 122, 107, 105, 106, 113, 114, 99, 100,
	101, 102, 103, 0, 104, 0, 71, 182, 187, 188,
	195, 189, 190, 191, 192, 193, 194, 186, 184, 185,
	196, 197, 198, 199, 200, 201, 202, 0, 203, 204,
	117, 0, 97, 98, 116, 115, 108, 109, 110, 111,
	112, 119, 121, 120, 122, 107, 105, 106, 113, 114,
	99, 100, 101, 102, 103, 183, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 232, 116, 115, 108, 109, 110,
	111, 112, 119, 121, 120, 122, 107, 105, 106, 113,
	114, 99, 100, 101, 102, 103, 0, 104, 115, 108,
	109, 110, 111, 112, 119, 121, 120, 122, 107, 105,
	106, 113, 114, 99, 100, 101, 102, 103, 0, 104,
	108, 109, 110, 111, 112, 119, 121, 120, 122, 107,
	105, 106, 113, 114, 99, 100, 101, 102, 103, 0,
	104,
}

var yyPact = [...]int{
	690, -1000, -1000, 130, 345, -1000, 367, 365, -1000, -1000,
	607, -1000, -1000, -1000, -40, -1000, -1000, -1000, 1437, 1201,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, 1132, 5, -1000, -1000, -1000, -1000, -1000, 690,
	1132, 986, 911, 82, 1059, 1059, 1059, 1059, 614, 159,
	690, 836, 986, -1000, -1000, -1000, -1000, -37, -1000, 1320,
	-1000, -1000, 315, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 541, -1000, -1000, 92, 45,
	1059, 1059, 1059, 1059, 1059, 1059, 1059, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 986, 1409, 152, 1132, 1132, 1132,
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, -1000,
	-1000, -1000, -1000, 4, -1000, -1000, -41, -1000, -66, -73,
	1132, -1000, 363, 607, -1000, -1000, -42, -1000, 174, -56,
	-13, -1000, 1437, 56, -22, -1000, -85, 1132, -1000, 763,
	-1000, 0, -12, -85, -1000, 285, 285, 186, -1000, 186,
	690, 63, 690, 130, 136, 44, 303, -1000, 234, -1000,
	130, -1000, -1000, 986, -1000, 102, -46, -38, 127, 59,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 345, -1000, 34, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1, -1000,
	-1000, -1000, -1000, -1000, 1437, 362, -1000, -1000, 1437, 33,
	-1000, -2, -1000, -73, -1000, 1478, 1478, 442, 442, 273,
	273, 273, 273, 655, 655, 527, 1385, 1385, 1385, 1385,
	1385, 412, 412, 1521, 1500, 1299, 483, -1000, 986, 1342,
	483, 1132, 1132, 986, -1000, -81, -1000, -1000, -1000, 1132,
	-1000, -1000, -1000, 986, 1132, -1000, 33, -1000, 986, 986,
	50, 690, 101, 230, 690, 175, -1000, 690, 225, -1000,
	-1000, -1000, 222, 136, 218, 170, 1132, 690, 141, -1000,
	-1000, -83, -1000, -1000, -1000, -1000, 1201, -1000, -1000, -1000,
	-1000, 267, 130, -4, -27, -1000, -1000, -1000, -9, -1000,
	357, -1000, 120, 1132, 1342, -1000, 1132, 1059, -1000, -59,
	986, -1000, -1000, 339, 33, 33, -1000, -1000, -1000, -1000,
	-1000, -12, -85, -1000, -1000, 47, -1000, -1000, 171, -1000,
	172, -1000, -1000, 217, -1000, -1000, -1000, 690, -1000, 264,
	201, 130, -1000, -33, -44, -1000, -1000, 33, -1000, 267,
	-1000, -1000, 162, 64, 1132, -1000, -1000, 127, -1000, -1000,
	1132, -1000, -1000, -1000, 101, 197, -1000, 1059, -1000, 690,
	190, -1000, -1000, 1132, 690, -1000, -1000, -1000, 986, -1000,
	-1000, -27, -1000, -1000, 357, -1000, -1000, -1000, 1437, -1000,
	186, -1000, -1000, -1000, 33, -1000, 690, -1000, 171, -1000,
}

var yyPgo = [...]int{
	0, 81, 24, 9, 494, 17, 1, 31, 316, 11,
	493, 492, 333, 490, 488, 486, 484, 35, 483, 475,
	474, 472, 468, 466, 182, 175, 243, 208, 0, 19,
	462, 137, 458, 133, 152, 455, 36, 180, 456, 58,
	453, 310, 55, 8, 452, 334, 4, 14, 25, 443,
	441, 438, 337, 436, 37, 396, 433, 430, 429, 428,
	444, 158, 7, 26, 424, 416, 250, 217, 414, 3,
	13, 16, 413, 6, 18, 21, 411, 408, 2, 12,
	10, 22, 405, 15, 403, 28, 401, 390, 27, 20,
	378, 376, 23, 40, 5, 34,
}

var yyR1 = [...]int{
	0, 91, 56, 81, 54, 55, 55, 55, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 36, 36,
	37, 37, 27, 27, 35, 41, 39, 1, 38, 38,
	38, 57, 58, 58, 52, 59, 59, 53, 53, 53,
	31, 31, 31, 31, 16, 5, 5, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 8, 8, 8, 8,
	49, 49, 43, 65, 65, 42, 63, 64, 64, 62,
	62, 62, 61, 61, 61, 60, 60, 68, 68, 66,
	67, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 34, 6, 6, 6, 20, 20, 46,
	46, 47, 47, 76, 76, 44, 44, 44, 86, 86,
	85, 83, 82, 84, 84, 84, 30, 30, 50, 51,
	21, 21, 21, 10, 10, 10, 11, 12, 12, 12,
	13, 40, 14, 15, 87, 87, 22, 23, 23, 26,
	26, 24, 24, 24, 24, 24, 25, 25, 25, 25,
	32, 32, 33, 33, 18, 18, 73, 73, 79, 79,
	78, 78, 74, 74, 74, 74, 74, 69, 75, 75,
	70, 70, 77, 77, 71, 80, 80, 72, 90, 90,
	89, 89, 88, 88, 2, 2, 2, 92, 92, 94,
	94, 3, 9, 95, 95, 95, 7, 7, 7, 7,
	93, 93, 48, 17, 17, 17, 17, 17, 17, 17,
	19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
	2, 1, 1, 2, 1, 2, 3, 1, 1, 4,
	1, 1, 4, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 6, 1, 1, 1, 1, 1,
	3, 3, 1, 0, 2, 1, 3, 0, 1, 0,
	1, 2, 1, 1, 3, 1, 3, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	4, 3, 1, 1, 2, 6, 6, 4, 4, 5,
	4, 5, 3, 1, 1, 1, 2, 1, 1, 1,
	5, 1, 2, 0, 3, 2, 4, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 3, 1, 1, 3, 5, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 3, 2, 1, 1,
	2, 0, 4, 2, 2, 1, 0, 1, 1, 3,
	2, 1, 1, 3, 3, 1, 3, 2, 0, 2,
	1, 3, 3, 2, 1, 1, 1, 0, 1, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 2, 3,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -91, -56, -55, -45, -36, -57, -31, -19, -27,
	-33, -58, -24, -25, -34, 79, 80, -39, -28, -59,
	85, 81, 83, 66, 82, 41, 65, 46, 47, -29,
	-38, -49, 40, -52, -30, -50, -51, -40, -32, 112,
	109, 89, 64, -44, 52, 54, 61, 71, 69, 48,
	-87, -1, 63, -53, -23, -22, -10, -21, -14, 50,
	-2, -26, 38, 42, 93, 103, 105, 101, 104, 106,
	98, 84, 44, 45, -92, -93, -7, 107, 91, 86,
	53, 55, 62, 72, 5, 5, -17, 6, 7, 8,
	9, 10, 11, 12, 108, 88, 115, 15, 16, 33,
	34, 35, 36, 37, 39, 29, 30, 28, 19, 20,
	21, 22, 23, 31, 32, 18, 17, 13, -8, 24,
	26, 25, 27, -52, -24, -25, -34, -29, 64, -1,
	-8, -28, -31, -33, -24, -25, -34, 92, -45, -65,
	-60, -43, -28, -90, -89, -88, -43, 87, -66, 111,
	-61, -60, -89, -43, -86, 89, 78, -35, -27, -35,
	-41, -35, -41, -35, -92, -93, -16, 66, -81, -54,
	-55, -66, -63, 111, -61, -12, 97, -12, -5, 65,
	-2, -4, 85, 66, 29, 30, 28, 19, 20, 22,
	23, 24, 25, 26, 27, 21, 31, 32, 33, 34,
	35, 36, 37, 39, 40, -26, -45, 91, 86, 91,
	-35, -35, -35, -35, -39, -68, -67, -43, -60, -67,
	-37, -42, -39, -36, -28, -31, -37, -42, -28, -62,
	-61, -60, 85, -5, 66, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, 92, 108, 88,
	-28, 5, -17, 108, -3, -94, 91, 110, -95, 92,
	91, 90, -95, 92, 114, -43, -61, -3, 92, 92,
	-85, -76, 29, -85, -6, -7, 59, -6, -54, -20,
	-7, 78, -54, -92, -83, -82, 70, -18, 26, 51,
	-92, -62, -11, 97, -13, 94, 95, 102, -15, 99,
	-73, 111, -74, -75, -80, -79, -69, -71, -77, -72,
	85, -70, 28, 87, 88, 91, 92, 5, -9, -94,
	92, -64, -63, -94, -62, -62, 113, -43, -88, -43,
	-3, -89, -43, 90, -54, -75, 85, 51, -54, 59,
	-54, 51, 51, -83, 51, -84, -48, 60, -83, -60,
	-81, 66, 113, -29, -34, -24, -25, -74, -7, 92,
	-78, -78, 92, 92, 5, 85, -43, -5, -43, 110,
	14, -9, -9, 29, 92, -46, -47, 68, -48, 60,
	-47, 51, -54, 92, -6, 51, -7, 96, 108, -3,
	-79, -80, -69, -71, 85, -70, -43, -73, -28, 51,
	-27, -54, 51, -54, -62, -78, -6, -9, -54, -46,
}

var yyDef = [...]int{
	5, -2, 1, 237, 6, 12, 0, 0, 16, 17,
	0, 31, -2, -2, 0, 260, 261, 22, 23, 32,
	-2, 192, 193, -2, 195, 196, 197, 198, 199, -2,
	26, 84, 0, 0, 121, 122, 123, 124, 125, 0,
	103, 228, 132, 133, 0, 0, 0, 0, 237, 0,
	5, 0, 0, 34, 166, 167, 179, 0, 179, 0,
	27, 187, 0, 186, 173, 174, 175, 170, 171, 172,
	182, 236, 189, 190, 2, 238, 250, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 259, 109, 0, 0, 72, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 99, 33, -2, -2, 0, 143, 132, 0,
	0, 89, 0, 0, -2, -2, 0, 35, 239, 0,
	243, 115, 102, 0, 243, 230, 0, 0, 29, 239,
	119, 112, 113, 115, 134, 153, 153, 0, 24, 0,
	5, 0, 5, 237, 0, 238, 204, 44, 0, 3,
	237, 28, 155, 109, 30, 0, 0, 0, 216, 0,
	45, 46, 234, 235, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 188, 7, 251, 0, 248,
	8, 9, 10, 11, 13, 15, 117, -2, 0, 14,
	18, 68, 20, 21, -2, 0, 19, 69, 105, 239,
	110, 112, -2, 107, 127, -2, -2, 74, 75, 76,
	77, 78, 79, 80, 81, 82, -2, -2, -2, -2,
	-2, 90, 91, 92, 93, 239, 100, 36, 109, 0,
	101, 0, 0, 109, 126, 0, 240, 128, 104, 245,
	244, 129, 229, 245, 0, 233, 239, 131, 0, 0,
	0, 5, 0, 0, 5, 144, 145, 5, 0, 25,
	147, 148, 0, 0, 0, 252, 0, 5, 0, 142,
	4, 0, 168, 177, 178, 176, 0, 169, 181, 183,
	184, 216, 0, 211, 211, 215, 218, 225, 208, 209,
	217, 222, 0, 221, 0, 249, 0, 0, -2, 0,
	111, 156, 108, 0, 239, 239, 241, 116, 231, 232,
	130, 114, 116, 158, 160, 0, 217, 159, 252, 146,
	252, 137, 138, 0, 140, 161, 163, 5, 165, 0,
	0, 0, 106, 143, 0, 200, 201, 239, 207, 0,
	213, 214, 0, 0, 0, 227, 220, 216, -2, 242,
	0, -2, -2, 154, 0, 0, 149, 0, 151, 5,
	0, 139, 164, 0, 5, 141, 205, 180, 109, 206,
	210, 211, 219, 226, 0, 223, 224, 185, 94, 135,
	0, 152, 136, 162, 239, 212, 5, 157, 252, 150,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := __yyfmt__.Sprintf("syntax error, line %d: unexpected ", currentLineNo) + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			}
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, lineNo: currentLineNo}
			yyVAL.node = call
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{yyDollar[3].node}, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: []Node{operation}, OpAssignment: true, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = []Node{yyDollar[1].node}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			// this is naive, as in theory the source could have non-block locals called "blk".
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).currentMethod.AddParam(&Param{Name: "blk", Kind: ExplicitBlock})
			yyVAL.node = &MethodCall{Receiver: &IdentNode{Val: "blk"}, MethodName: "call", lineNo: currentLineNo}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.SetBlock(yyDollar[2].blk)
			if yylex.(*Lexer).gauntlet && call.MethodName == "gauntlet" {
				lines := strings.Split(yylex.(*Lexer).lastParsedToken.RawBlock, "\n")
				call.RawBlock = strings.Join(lines[1:len(lines)-1], "\n")
				yylex.(*Lexer).gauntlet = false
			}
			yyVAL.node = call
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			blk := &Block{Body: &Body{Statements: yyDollar[2].node_list}, ParamList: NewParamList()}
			for _, p := range yyDollar[1].params {
				blk.AddParam(p)
			}
			yyVAL.blk = blk
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: getStringKind(yyDollar[1].str), lineNo: currentLineNo}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(getStringKind(yyDollar[1].str))
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(getStringKind(yyDollar[1].str))
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(getStringKind(yyDollar[1].str))
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			yyVAL.node = regexp
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString(Regexp)
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			method := NewMethod(yyDollar[4].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.ClassMethod = true
			method.lineNo = currentLineNo

			for _, p := range yyDollar[5].params {
				if err := method.AddParam(p); err != nil {
					root(yylex).AddError(err)
				}
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
			yylex.(*Lexer).resetExpr = true
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.AddIVar(ivar.NormalizedVal(), &IVar{Name: ivar.NormalizedVal()})
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[2].str, Kind: ExplicitBlock}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
