// Code generated by goyacc -l -o ruby.go ruby.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import "strings"

func setRoot(yylex yyLexer, nodes []Node) {
	p := yylex.(*Lexer).Program
	for _, n := range nodes {
		p.AddStatement(n)
	}
}

func root(yylex yyLexer) *Program {
	return yylex.(*Lexer).Program
}

type yySymType struct {
	yys       int
	args      ArgsNode
	blk       *Block
	body      *Body
	kv        *KeyValuePair
	kvs       []*KeyValuePair
	meth      *Method
	node      Node
	node_list Statements
	param     *Param
	params    []*Param
	program   *Program
	regexp    string
	when      *WhenNode
	whens     []*WhenNode
	str       string
}

const LOWEST = 57346
const ASSIGN = 57347
const MODASSIGN = 57348
const MULASSIGN = 57349
const ADDASSIGN = 57350
const SUBASSIGN = 57351
const DIVASSIGN = 57352
const QMARK = 57353
const COLON = 57354
const DOT2 = 57355
const DOT3 = 57356
const LOGICALOR = 57357
const LOGICALAND = 57358
const SPACESHIP = 57359
const EQ = 57360
const NEQ = 57361
const MATCH = 57362
const NOTMATCH = 57363
const GT = 57364
const GTE = 57365
const LT = 57366
const LTE = 57367
const AND = 57368
const PIPE = 57369
const CARET = 57370
const LSHIFT = 57371
const RSHIFT = 57372
const PLUS = 57373
const MINUS = 57374
const ASTERISK = 57375
const SLASH = 57376
const MODULO = 57377
const UNARY_NUM = 57378
const POW = 57379
const BANG = 57380
const NIL = 57381
const SYMBOL = 57382
const STRING = 57383
const INT = 57384
const FLOAT = 57385
const TRUE = 57386
const FALSE = 57387
const CLASS = 57388
const MODULE = 57389
const DEF = 57390
const END = 57391
const IF = 57392
const IF_MOD = 57393
const UNLESS = 57394
const UNLESS_MOD = 57395
const BEGIN = 57396
const RESCUE = 57397
const RESCUE_MOD = 57398
const THEN = 57399
const ELSE = 57400
const WHILE = 57401
const WHILE_MOD = 57402
const RETURN = 57403
const YIELD = 57404
const SELF = 57405
const CONSTANT = 57406
const ENSURE = 57407
const ELSIF = 57408
const CASE = 57409
const WHEN = 57410
const UNTIL = 57411
const UNTIL_MOD = 57412
const FOR = 57413
const BREAK = 57414
const NEXT = 57415
const SUPER = 57416
const ALIAS = 57417
const DO = 57418
const PRIVATE = 57419
const PROTECTED = 57420
const IVAR = 57421
const CVAR = 57422
const GVAR = 57423
const METHODIDENT = 57424
const IDENT = 57425
const COMMENT = 57426
const LABEL = 57427
const DOT = 57428
const LBRACE = 57429
const RBRACE = 57430
const NEWLINE = 57431
const COMMA = 57432
const STRINGBEG = 57433
const STRINGEND = 57434
const INTERPBEG = 57435
const INTERPEND = 57436
const STRINGBODY = 57437
const REGEXBEG = 57438
const REGEXEND = 57439
const REGEXPOPT = 57440
const RAWSTRINGBEG = 57441
const RAWSTRINGEND = 57442
const SEMICOLON = 57443
const LBRACKET = 57444
const LBRACKETSTART = 57445
const RBRACKET = 57446
const LPAREN = 57447
const LPARENSTART = 57448
const RPAREN = 57449
const HASHROCKET = 57450
const SCOPE = 57451

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOWEST",
	"ASSIGN",
	"MODASSIGN",
	"MULASSIGN",
	"ADDASSIGN",
	"SUBASSIGN",
	"DIVASSIGN",
	"QMARK",
	"COLON",
	"DOT2",
	"DOT3",
	"LOGICALOR",
	"LOGICALAND",
	"SPACESHIP",
	"EQ",
	"NEQ",
	"MATCH",
	"NOTMATCH",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"AND",
	"PIPE",
	"CARET",
	"LSHIFT",
	"RSHIFT",
	"PLUS",
	"MINUS",
	"ASTERISK",
	"SLASH",
	"MODULO",
	"UNARY_NUM",
	"POW",
	"BANG",
	"NIL",
	"SYMBOL",
	"STRING",
	"INT",
	"FLOAT",
	"TRUE",
	"FALSE",
	"CLASS",
	"MODULE",
	"DEF",
	"END",
	"IF",
	"IF_MOD",
	"UNLESS",
	"UNLESS_MOD",
	"BEGIN",
	"RESCUE",
	"RESCUE_MOD",
	"THEN",
	"ELSE",
	"WHILE",
	"WHILE_MOD",
	"RETURN",
	"YIELD",
	"SELF",
	"CONSTANT",
	"ENSURE",
	"ELSIF",
	"CASE",
	"WHEN",
	"UNTIL",
	"UNTIL_MOD",
	"FOR",
	"BREAK",
	"NEXT",
	"SUPER",
	"ALIAS",
	"DO",
	"PRIVATE",
	"PROTECTED",
	"IVAR",
	"CVAR",
	"GVAR",
	"METHODIDENT",
	"IDENT",
	"COMMENT",
	"LABEL",
	"DOT",
	"LBRACE",
	"RBRACE",
	"NEWLINE",
	"COMMA",
	"STRINGBEG",
	"STRINGEND",
	"INTERPBEG",
	"INTERPEND",
	"STRINGBODY",
	"REGEXBEG",
	"REGEXEND",
	"REGEXPOPT",
	"RAWSTRINGBEG",
	"RAWSTRINGEND",
	"SEMICOLON",
	"LBRACKET",
	"LBRACKETSTART",
	"RBRACKET",
	"LPAREN",
	"LPARENSTART",
	"RPAREN",
	"HASHROCKET",
	"SCOPE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 16,
	5, 37,
	6, 186,
	7, 186,
	8, 186,
	9, 186,
	10, 186,
	90, 34,
	-2, 184,
	-1, 17,
	5, 38,
	6, 187,
	7, 187,
	8, 187,
	9, 187,
	10, 187,
	90, 35,
	-2, 185,
	-1, 23,
	86, 133,
	102, 133,
	109, 133,
	-2, 91,
	-1, 24,
	36, 216,
	38, 216,
	39, 216,
	40, 216,
	42, 216,
	43, 216,
	44, 216,
	45, 216,
	46, 216,
	48, 216,
	50, 216,
	52, 216,
	59, 216,
	63, 216,
	64, 216,
	67, 216,
	69, 216,
	79, 216,
	80, 216,
	81, 216,
	82, 216,
	83, 216,
	85, 216,
	87, 216,
	91, 216,
	96, 216,
	99, 216,
	103, 216,
	105, 216,
	106, 216,
	-2, 175,
	-1, 27,
	36, 217,
	38, 217,
	39, 217,
	40, 217,
	42, 217,
	43, 217,
	44, 217,
	45, 217,
	46, 217,
	48, 217,
	50, 217,
	52, 217,
	59, 217,
	63, 217,
	64, 217,
	67, 217,
	69, 217,
	79, 217,
	80, 217,
	81, 217,
	82, 217,
	83, 217,
	85, 217,
	87, 217,
	91, 217,
	96, 217,
	99, 217,
	103, 217,
	105, 217,
	106, 217,
	-2, 178,
	-1, 116,
	5, 34,
	90, 34,
	-2, 184,
	-1, 117,
	5, 35,
	90, 35,
	-2, 185,
	-1, 125,
	5, 37,
	6, 186,
	7, 186,
	8, 186,
	9, 186,
	10, 186,
	-2, 184,
	-1, 126,
	5, 38,
	6, 187,
	7, 187,
	8, 187,
	9, 187,
	10, 187,
	-2, 185,
	-1, 211,
	13, 0,
	14, 0,
	-2, 66,
	-1, 212,
	13, 0,
	14, 0,
	-2, 67,
	-1, 222,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 79,
	-1, 223,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 81,
	-1, 224,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 82,
	-1, 225,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 83,
	-1, 226,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	-2, 84,
	-1, 302,
	5, 39,
	90, 36,
	-2, 147,
	-1, 350,
	5, 36,
	90, 36,
	-2, 147,
	-1, 351,
	5, 39,
	-2, 147,
}

const yyPrivate = 57344

const yyLast = 1267

var yyAct = [...]int{
	15, 263, 298, 342, 354, 127, 18, 355, 295, 292,
	234, 302, 294, 293, 290, 235, 134, 70, 23, 303,
	249, 291, 161, 122, 259, 118, 130, 357, 205, 68,
	80, 247, 69, 233, 162, 137, 137, 167, 119, 253,
	314, 309, 132, 137, 137, 131, 139, 18, 114, 273,
	133, 133, 349, 252, 114, 285, 73, 18, 142, 136,
	145, 72, 114, 53, 367, 165, 352, 366, 120, 34,
	243, 113, 284, 71, 281, 18, 287, 113, 239, 157,
	208, 208, 158, 283, 284, 113, 281, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 210,
	34, 124, 10, 137, 34, 34, 34, 34, 34, 114,
	34, 344, 240, 168, 246, 123, 9, 345, 297, 353,
	299, 255, 258, 137, 341, 112, 255, 254, 34, 137,
	304, 245, 113, 34, 34, 34, 34, 203, 34, 34,
	289, 238, 237, 10, 266, 242, 126, 17, 128, 18,
	250, 18, 251, 10, 300, 195, 244, 9, 264, 265,
	264, 197, 269, 316, 262, 256, 117, 9, 168, 299,
	373, 10, 299, 125, 16, 257, 272, 196, 267, 158,
	271, 10, 10, 279, 319, 9, 73, 204, 17, 149,
	275, 72, 362, 116, 137, 9, 9, 270, 17, 297,
	148, 299, 5, 71, 131, 73, 334, 135, 330, 133,
	72, 358, 34, 236, 34, 16, 17, 358, 275, 356,
	160, 265, 71, 322, 61, 16, 380, 377, 8, 364,
	137, 360, 208, 208, 137, 327, 137, 137, 137, 325,
	164, 301, 324, 16, 320, 137, 278, 93, 73, 137,
	143, 146, 310, 72, 306, 10, 18, 10, 153, 18,
	261, 210, 18, 307, 277, 71, 137, 308, 209, 9,
	348, 9, 18, 318, 151, 151, 151, 151, 151, 107,
	336, 332, 207, 207, 346, 317, 343, 193, 321, 333,
	137, 323, 329, 335, 339, 137, 312, 241, 340, 166,
	17, 121, 17, 151, 151, 151, 151, 155, 312, 350,
	351, 310, 326, 79, 331, 4, 66, 67, 78, 34,
	14, 359, 34, 1, 363, 34, 18, 16, 144, 16,
	35, 163, 3, 171, 51, 34, 147, 137, 374, 376,
	264, 370, 365, 372, 371, 369, 248, 33, 369, 250,
	368, 60, 170, 137, 18, 361, 371, 140, 137, 18,
	328, 274, 10, 296, 383, 10, 260, 115, 10, 288,
	384, 88, 89, 90, 91, 92, 9, 93, 10, 9,
	18, 387, 9, 379, 385, 194, 264, 129, 381, 34,
	141, 382, 9, 305, 19, 74, 11, 75, 6, 202,
	206, 206, 2, 52, 76, 38, 37, 17, 21, 386,
	17, 44, 39, 17, 77, 34, 74, 34, 75, 20,
	40, 154, 34, 17, 36, 76, 90, 91, 92, 54,
	93, 338, 10, 251, 16, 77, 55, 16, 268, 7,
	16, 276, 159, 34, 286, 58, 9, 282, 280, 56,
	16, 169, 0, 311, 146, 313, 0, 0, 337, 0,
	10, 0, 315, 0, 0, 10, 146, 150, 152, 0,
	0, 156, 0, 0, 9, 0, 0, 17, 0, 9,
	0, 0, 0, 143, 0, 0, 10, 102, 103, 88,
	89, 90, 91, 92, 0, 93, 198, 199, 200, 201,
	9, 0, 0, 0, 16, 17, 0, 347, 0, 0,
	17, 0, 311, 108, 110, 109, 111, 96, 94, 95,
	102, 103, 88, 89, 90, 91, 92, 0, 93, 0,
	0, 17, 16, 0, 0, 0, 62, 16, 22, 29,
	63, 0, 66, 67, 31, 32, 50, 0, 59, 0,
	45, 0, 46, 0, 375, 0, 0, 0, 16, 47,
	0, 35, 0, 30, 27, 0, 0, 49, 0, 48,
	315, 108, 110, 109, 111, 0, 0, 12, 13, 25,
	28, 26, 60, 24, 0, 378, 0, 43, 0, 195,
	0, 64, 0, 0, 0, 0, 65, 0, 0, 57,
	0, 0, 0, 42, 0, 62, 41, 22, 29, 63,
	0, 66, 67, 31, 32, 50, 0, 59, 0, 45,
	0, 46, 81, 82, 83, 84, 85, 0, 47, 0,
	35, 0, 30, 27, 0, 0, 49, 0, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 25, 28,
	26, 60, 24, 73, 0, 0, 43, 0, 72, 0,
	64, 0, 0, 0, 0, 65, 0, 0, 57, 0,
	71, 0, 42, 0, 62, 41, 22, 29, 63, 0,
	66, 67, 31, 32, 50, 0, 59, 0, 45, 0,
	46, 0, 0, 0, 0, 0, 0, 47, 0, 35,
	0, 30, 27, 0, 0, 49, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 12, 13, 25, 28, 26,
	60, 24, 0, 0, 0, 43, 0, 0, 0, 64,
	0, 0, 0, 0, 65, 0, 0, 57, 0, 0,
	0, 42, 0, 62, 41, 22, 29, 63, 0, 66,
	67, 31, 32, 50, 0, 59, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	30, 27, 0, 0, 49, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 28, 26, 60,
	24, 0, 138, 0, 43, 0, 0, 0, 64, 0,
	0, 0, 0, 65, 0, 0, 57, 0, 0, 0,
	42, 0, 132, 41, 62, 0, 22, 29, 63, 0,
	66, 67, 31, 32, 50, 0, 59, 0, 45, 0,
	46, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	0, 30, 27, 0, 0, 49, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 28, 26,
	60, 24, 0, 138, 0, 43, 0, 0, 0, 64,
	0, 0, 0, 0, 65, 0, 0, 57, 0, 0,
	0, 42, 0, 62, 41, 22, 29, 63, 0, 66,
	67, 31, 32, 50, 0, 59, 0, 45, 0, 46,
	0, 0, 0, 0, 0, 0, 47, 0, 35, 0,
	30, 27, 0, 0, 49, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 28, 26, 60,
	24, 0, 0, 0, 43, 0, 0, 0, 64, 0,
	0, 0, 0, 65, 0, 0, 57, 0, 0, 0,
	42, 0, 62, 41, 22, 29, 63, 0, 66, 67,
	31, 32, 50, 0, 59, 0, 45, 0, 46, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 30,
	27, 0, 0, 49, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 25, 28, 26, 60, 24,
	0, 0, 0, 43, 0, 0, 0, 64, 0, 0,
	0, 0, 65, 0, 0, 57, 0, 62, 0, 42,
	29, 63, 41, 66, 67, 31, 32, 50, 0, 59,
	0, 45, 0, 46, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 30, 27, 0, 0, 49, 0,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	25, 28, 26, 60, 24, 0, 0, 0, 43, 0,
	0, 0, 64, 0, 0, 0, 0, 65, 0, 0,
	57, 0, 0, 0, 42, 0, 106, 41, 86, 87,
	105, 104, 97, 98, 99, 100, 101, 108, 110, 109,
	111, 96, 94, 95, 102, 103, 88, 89, 90, 91,
	92, 0, 93, 175, 176, 183, 177, 178, 179, 180,
	181, 182, 174, 172, 173, 184, 185, 186, 187, 188,
	189, 190, 0, 191, 192, 106, 0, 86, 87, 105,
	104, 97, 98, 99, 100, 101, 108, 110, 109, 111,
	96, 94, 95, 102, 103, 88, 89, 90, 91, 92,
	171, 93, 0, 0, 251, 96, 94, 95, 102, 103,
	88, 89, 90, 91, 92, 0, 93, 0, 60, 170,
	105, 104, 97, 98, 99, 100, 101, 108, 110, 109,
	111, 96, 94, 95, 102, 103, 88, 89, 90, 91,
	92, 0, 93, 104, 97, 98, 99, 100, 101, 108,
	110, 109, 111, 96, 94, 95, 102, 103, 88, 89,
	90, 91, 92, 0, 93, 97, 98, 99, 100, 101,
	108, 110, 109, 111, 96, 94, 95, 102, 103, 88,
	89, 90, 91, 92, 0, 93, 94, 95, 102, 103,
	88, 89, 90, 91, 92, 0, 93,
}

var yyPact = [...]int{
	648, -1000, -1000, -28, 375, -1000, 323, -1000, -1000, 318,
	626, -1000, -1000, -1000, -1000, 1134, -1000, -1000, 33, 991,
	-1000, 559, 926, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 68, 717, 788, -1000, -1000, -1000, -1000,
	-1000, 648, 926, 788, 123, 857, 857, 857, 857, 579,
	166, 648, -1000, -1000, -1000, -1000, -1000, -30, -1000, 1106,
	-1000, -1000, 284, -1000, -1000, -1000, -1000, -1000, -1000, 510,
	-1000, -1000, 103, 82, 857, 857, 857, 857, 279, 857,
	857, -1000, -1000, -1000, -1000, -1000, 926, 926, 926, 926,
	926, 926, 926, 926, 926, 926, 926, 926, 926, 926,
	926, 926, 926, 926, 926, 926, 926, 926, -1000, -1000,
	-1000, -1000, 788, 159, 1106, 61, -1000, -1000, -24, -1000,
	-63, 926, -1000, 302, 626, -1000, -1000, -32, -1000, -1000,
	-1000, -1000, 788, 51, 34, -77, -1000, 1134, 926, -1000,
	354, -51, 47, -1000, 87, 42, -77, -1000, 243, 243,
	174, -1000, 174, 648, 131, 648, -28, 132, 76, 250,
	-1000, 207, -1000, -28, -9, -45, -21, 45, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 375, -1000, 75, -1000, -1000, -1000,
	-1000, -1000, -1000, 788, -1000, -1000, -1000, -1000, 1134, -1000,
	-1000, 1175, 1175, 403, 403, 220, 220, 220, 220, 468,
	468, 1229, 501, 501, 501, 501, 501, 350, 350, 1218,
	1197, 1085, 1149, 73, -1000, 50, -1000, -63, -1000, 788,
	1149, 926, 926, 788, -66, 788, 788, 926, -1000, -1000,
	-67, -1000, -1000, -1000, 926, -1000, -1000, -1000, 788, 85,
	648, 111, 205, 648, 176, -1000, 648, 203, -1000, -1000,
	-1000, 200, 132, 196, 160, 926, 648, 152, -1000, -1000,
	-1000, -1000, -1000, -1000, 991, -1000, -1000, -1000, -1000, 126,
	-28, 44, 31, -1000, -1000, -1000, 37, 289, -1000, 926,
	-1000, 268, -1000, -52, 788, -1000, -1000, 73, 73, -1000,
	34, -77, -1000, -1000, -1000, -1000, -1000, -1000, 39, -1000,
	-1000, 163, -1000, 169, -1000, -1000, 192, -1000, -1000, -1000,
	648, -1000, 112, 190, -28, -27, -38, -1000, -1000, 73,
	-1000, 126, -1000, -1000, 97, 94, 926, -1000, 926, -1000,
	-1000, -1000, -1000, 111, 188, -1000, 857, -1000, 648, 187,
	-1000, -1000, 926, 648, -1000, -1000, -1000, 788, -1000, -1000,
	31, -1000, -1000, 289, -1000, -1000, 1134, -1000, 174, -1000,
	-1000, -1000, 73, -1000, 648, -1000, 163, -1000,
}

var yyPgo = [...]int{
	0, 68, 63, 20, 461, 37, 1, 17, 289, 11,
	459, 458, 250, 457, 455, 454, 452, 30, 451, 449,
	448, 446, 439, 183, 156, 234, 238, 0, 18, 434,
	125, 430, 111, 5, 431, 212, 197, 429, 330, 422,
	268, 28, 217, 421, 325, 4, 7, 27, 418, 416,
	415, 357, 413, 34, 341, 412, 408, 406, 404, 15,
	10, 33, 26, 403, 400, 397, 12, 2, 8, 379,
	14, 21, 376, 373, 3, 13, 9, 22, 371, 49,
	370, 24, 346, 344, 59, 16, 338, 333, 29, 32,
	19, 39,
}

var yyR1 = [...]int{
	0, 87, 55, 77, 53, 54, 54, 54, 44, 44,
	44, 44, 44, 44, 44, 44, 35, 35, 36, 36,
	26, 26, 34, 40, 38, 1, 37, 37, 56, 57,
	57, 51, 58, 58, 52, 52, 52, 30, 30, 30,
	16, 5, 5, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 8, 8, 8, 8, 48, 48, 42, 64,
	64, 41, 62, 63, 63, 61, 61, 61, 60, 60,
	60, 59, 59, 65, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 33, 6, 6, 6, 20, 20, 45,
	45, 46, 46, 72, 72, 43, 43, 43, 82, 82,
	81, 79, 78, 80, 80, 80, 29, 29, 49, 50,
	10, 11, 12, 12, 12, 13, 39, 14, 15, 83,
	21, 22, 22, 25, 25, 23, 23, 23, 23, 23,
	24, 24, 24, 24, 31, 31, 32, 32, 18, 18,
	69, 69, 75, 74, 74, 70, 70, 70, 70, 70,
	66, 71, 71, 67, 67, 73, 73, 68, 76, 76,
	86, 86, 85, 85, 84, 84, 2, 2, 2, 88,
	88, 90, 90, 3, 9, 91, 91, 91, 7, 7,
	7, 7, 89, 89, 47, 17, 17, 17, 17, 17,
	19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 0, 1, 3, 3, 3,
	3, 3, 1, 3, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 2, 2, 1, 1,
	2, 1, 2, 3, 1, 1, 4, 1, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	6, 1, 1, 1, 1, 1, 3, 3, 1, 0,
	2, 1, 3, 0, 1, 0, 1, 2, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 1, 2, 6, 6, 4, 4, 5,
	4, 5, 3, 1, 1, 1, 2, 1, 1, 1,
	5, 1, 2, 0, 3, 2, 4, 4, 3, 3,
	2, 2, 4, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 2, 2, 0, 3, 3, 1, 1, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	3, 2, 1, 2, 0, 4, 2, 2, 1, 0,
	1, 1, 3, 2, 1, 1, 3, 3, 1, 3,
	0, 2, 1, 3, 3, 2, 1, 1, 1, 0,
	1, 0, 1, 2, 2, 0, 1, 1, 1, 1,
	2, 3, 1, 2, 0, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -87, -55, -54, -44, -35, -56, -19, -26, -30,
	-32, -57, 77, 78, -38, -27, -23, -24, -33, -58,
	-37, -48, 38, -28, 83, 79, 81, 64, 80, 39,
	63, 44, 45, -51, -1, 61, -29, -49, -50, -39,
	-31, 106, 103, 87, -43, 50, 52, 59, 69, 67,
	46, -83, -52, -2, -22, -21, -10, 99, -14, 48,
	82, -25, 36, 40, 91, 96, 42, 43, -88, -89,
	-7, 101, 89, 84, 51, 53, 60, 70, 5, 5,
	-17, 6, 7, 8, 9, 10, 13, 14, 31, 32,
	33, 34, 35, 37, 27, 28, 26, 17, 18, 19,
	20, 21, 29, 30, 16, 15, 11, -8, 22, 24,
	23, 25, 102, 109, 86, -51, -23, -24, -33, -28,
	-1, -8, -27, -30, -32, -23, -24, -33, 90, -65,
	-62, -60, 105, -59, -85, -42, -84, -27, 85, -60,
	-44, -64, -59, -42, -86, -85, -42, -82, 87, 76,
	-34, -26, -34, -40, -34, -40, -34, -88, -89, -16,
	64, -77, -53, -54, -12, 95, -12, -5, -2, -4,
	83, 64, 27, 28, 26, 17, 18, 20, 21, 22,
	23, 24, 25, 19, 29, 30, 31, 32, 33, 34,
	35, 37, 38, -25, -44, 89, 84, 89, -34, -34,
	-34, -34, -38, -1, -36, -41, -38, -35, -27, -36,
	-41, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -61, -60, -59, 64, -5, 90, 102,
	-27, 5, -17, 102, -61, 90, 90, 108, -42, -3,
	-90, 89, 104, -91, 90, 89, 88, -91, 90, -81,
	-72, 27, -81, -6, -7, 57, -6, -53, -20, -7,
	76, -53, -88, -79, -78, 68, -18, 24, 49, -88,
	-11, 95, -13, 92, 93, 100, -15, 97, -69, 105,
	-70, -71, -76, -75, -66, -68, -73, 83, -67, 85,
	89, -90, -9, -90, 90, -63, -62, -61, -61, 107,
	-85, -42, -84, -42, 107, -42, 88, -53, -71, 83,
	49, -53, 57, -53, 49, 49, -79, 49, -80, -47,
	58, -79, -59, -77, 64, -28, -33, -23, -24, -70,
	-7, 90, -74, -74, 90, 90, 5, -42, 12, 104,
	-9, -9, 27, 90, -45, -46, 66, -47, 58, -46,
	49, -53, 90, -6, 49, -7, 94, 102, -3, -75,
	-76, -66, -68, 83, -67, -42, -27, 49, -26, -53,
	49, -53, -61, -74, -6, -9, -53, -45,
}

var yyDef = [...]int{
	5, -2, 1, 219, 6, 12, 0, 14, 15, 0,
	0, 28, 240, 241, 20, 21, -2, -2, 0, 29,
	24, 80, 0, -2, -2, 176, 177, -2, 179, 180,
	181, 182, 183, 0, 0, 0, 114, 115, 116, 117,
	118, 0, 99, 210, 123, 0, 0, 0, 0, 219,
	0, 5, 31, 25, 156, 157, 164, 0, 164, 0,
	218, 171, 0, 170, 160, 167, 173, 174, 2, 220,
	232, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 235, 236, 237, 238, 239, 68, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 105, 0, 0, 30, -2, -2, 0, 133,
	0, 0, 85, 0, 0, -2, -2, 0, 32, 26,
	145, 113, 105, 108, 109, 111, 212, 98, 0, 27,
	221, 0, 225, 111, 0, 225, 0, 124, 143, 143,
	0, 22, 0, 5, 0, 5, 219, 0, 220, 188,
	40, 0, 3, 219, 0, 0, 0, 199, 41, 42,
	216, 217, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 172, 7, 233, 0, 230, 8, 9,
	10, 11, 13, 0, 16, 64, 18, 19, 101, 17,
	65, -2, -2, 70, 71, 72, 73, 74, 75, 76,
	77, 78, -2, -2, -2, -2, -2, 86, 87, 88,
	89, 221, 96, 221, 106, 108, 120, 103, 33, 105,
	97, 0, 0, 105, 0, 0, 0, 0, 215, 119,
	0, 222, 121, 100, 227, 226, 122, 211, 227, 0,
	5, 0, 0, 5, 134, 135, 5, 0, 23, 137,
	138, 0, 0, 0, 234, 0, 5, 0, 132, 4,
	158, 162, 163, 161, 0, 159, 166, 168, 169, 199,
	0, 194, 194, 198, 201, 208, 192, 200, 205, 204,
	231, 0, -2, 0, 107, 146, 104, 221, 221, 102,
	110, 112, 213, 214, 223, 112, 148, 150, 0, 200,
	149, 234, 136, 234, 127, 128, 0, 130, 151, 153,
	5, 155, 0, 0, 0, 133, 0, 184, 185, 221,
	191, 0, 196, 197, 0, 0, 0, 203, 0, 224,
	-2, -2, 144, 0, 0, 139, 0, 141, 5, 0,
	129, 154, 0, 5, 131, 189, 165, 105, 190, 193,
	194, 202, 209, 0, 206, 207, 90, 125, 0, 142,
	126, 152, 221, 195, 5, 147, 234, 140,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setRoot(yylex, yyDollar[1].node_list)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.body = &Body{Statements: yyDollar[1].node_list}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = yyDollar[1].node_list
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node_list = []Node{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[1].node)
				yyVAL.node_list = []Node{}
			}
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if root(yylex).CurrentState() == InClassBody {
				root(yylex).currentClass.AddStatement(yyDollar[3].node)
				yyVAL.node_list = []Node{}
			} else {
				yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[3].node)
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[3].node, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, True: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[3].node, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[3].node, lineNo: currentLineNo}, Body: Statements{yyDollar[1].node}, lineNo: currentLineNo}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: yyDollar[1].node_list, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).inPrivateMethods = true
			yyVAL.node = &NoopNode{}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			r := &ReturnNode{Val: yyDollar[2].args, lineNo: currentLineNo}
			root(yylex).AddReturn(r)
			yyVAL.node = r
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node_list = []Node{yyDollar[1].node}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node_list = append(yyDollar[1].node_list, yyDollar[2].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAssignmentNode{
				Composite: yyDollar[1].node,
				Args:      yyDollar[3].args,
				lineNo:    currentLineNo,
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushClass(yyDollar[1].str, currentLineNo)
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			operation := &InfixExpressionNode{Left: yyDollar[1].node, Operator: strings.Trim(yyDollar[2].str, "="), Right: yyDollar[3].node, lineNo: currentLineNo}
			yyVAL.node = &AssignmentNode{Left: []Node{yyDollar[1].node}, Right: operation, OpAssignment: true, lineNo: currentLineNo}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Upper: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, Inclusive: true, lineNo: currentLineNo}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &RangeNode{Lower: yyDollar[1].node, lineNo: currentLineNo}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{
				Condition: yyDollar[1].node,
				True:      Statements{yyDollar[3].node},
				False: &Condition{
					True: Statements{yyDollar[6].node},
				},
				lineNo: currentLineNo,
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &InfixExpressionNode{Left: yyDollar[1].node, Operator: yyDollar[2].str, Right: yyDollar[3].node, lineNo: currentLineNo}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = yyDollar[2].args
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.args = ArgsNode{}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = yyDollar[1].args
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			for _, kv := range yyDollar[1].kvs {
				yyVAL.args = append(yyVAL.args, kv)
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			for _, kv := range yyDollar[3].kvs {
				yyDollar[1].args = append(yyDollar[1].args, kv)
			}
			yyVAL.args = yyDollar[1].args
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.args = ArgsNode{yyDollar[1].node}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].node)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ScopeAccessNode{Receiver: yyDollar[1].node, Constant: yyDollar[3].str, lineNo: currentLineNo}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ArrayNode{Args: yyDollar[2].args, lineNo: currentLineNo}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &HashNode{Pairs: yyDollar[2].kvs, lineNo: currentLineNo}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := yyDollar[1].node.(*MethodCall)
			call.Block = yyDollar[2].blk
			if yylex.(*Lexer).blockDepth == 0 {
				call.RawBlock = yylex.(*Lexer).lastParsedToken.RawBlock
			}
			yyVAL.node = call
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: currentLineNo}, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: yyDollar[2].node, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &WhileNode{Condition: &NotExpressionNode{Arg: yyDollar[2].node, lineNo: yyDollar[2].node.LineNo()}, Body: yyDollar[3].node_list, lineNo: yyDollar[2].node.LineNo()}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &CaseNode{Value: yyDollar[2].node, Whens: yyDollar[4].whens, lineNo: currentLineNo}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &CaseNode{Whens: yyDollar[3].whens, lineNo: currentLineNo}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			root(yylex).currentClass.Superclass = yyDollar[3].str
			yyVAL.node = root(yylex).PopClass()
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].meth.Body = yyDollar[2].body
			root(yylex).AddMethod(yyDollar[1].meth)
			root(yylex).PopState()
			root(yylex).PopScope()
			yyVAL.node = yyDollar[1].meth
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Condition{Condition: yyDollar[2].node, True: yyDollar[4].node_list, False: yyDollar[5].node, lineNo: currentLineNo}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &Condition{True: yyDollar[2].node_list, lineNo: currentLineNo}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			call := &MethodCall{MethodName: yyDollar[1].str, Args: yyDollar[2].args, lineNo: currentLineNo}
			if root(yylex).currentClass != nil {
				root(yylex).currentClass.MethodSet.AddCall(call)
			} else {
				root(yylex).AddCall(call)
			}
			yyVAL.node = call
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			call := &MethodCall{Receiver: yyDollar[1].node, MethodName: yyDollar[3].str, Args: yyDollar[4].args, lineNo: currentLineNo}
			root(yylex).AddCall(call)
			yyVAL.node = call
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &BracketAccessNode{Composite: yyDollar[1].node, Args: yyDollar[3].args, lineNo: currentLineNo}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.blk = yyDollar[2].blk
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.blk = &Block{Params: yyDollar[1].params, Body: &Body{Statements: yyDollar[2].node_list}}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = append([]*WhenNode{yyDollar[1].when}, yyDollar[2].whens...)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.when = &WhenNode{Conditions: yyDollar[2].args, Statements: yyDollar[4].node_list, lineNo: currentLineNo}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whens = []*WhenNode{&WhenNode{Statements: yyDollar[2].node_list, lineNo: currentLineNo}}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = root(yylex).PopString()
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &StringNode{BodySegments: []string{yyDollar[2].str}, Kind: SingleQuote, lineNo: currentLineNo}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.BodySegments = append(curr.BodySegments, yyDollar[2].str)
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			curr := root(yylex).CurrentString()
			curr.Interps[len(curr.BodySegments)] = append(curr.Interps[len(curr.BodySegments)], yyDollar[2].node)
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			regexp := root(yylex).PopString()
			regexp.Kind = Regexp
			yyVAL.node = regexp
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PushState(InString)
			root(yylex).PushString()
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			root(yylex).PopState()
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			method := NewMethod(yyDollar[2].str, root(yylex))
			method.Private = root(yylex).inPrivateMethods
			method.lineNo = currentLineNo

			for _, p := range yyDollar[3].params {
				method.AddParam(p)
			}

			root(yylex).PushState(InMethodDefinition)
			root(yylex).PushScope(method.Locals)
			yyVAL.meth = method
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SymbolNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			var negative Node
			switch x := yyDollar[2].node.(type) {
			case *IntNode:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			case *Float64Node:
				x.Val = yyDollar[1].str + x.Val
				negative = x
			}
			yyVAL.node = negative
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IntNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &Float64Node{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &IdentNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			ivar := &IVarNode{Val: yyDollar[1].str, Class: root(yylex).currentClass, lineNo: currentLineNo}
			yyVAL.node = ivar
			cls := root(yylex).currentClass
			if cls != nil {
				cls.ivars[ivar.NormalizedVal()] = &IVar{Name: ivar.NormalizedVal()}
				cls.ivarOrder = append(cls.ivarOrder, ivar.NormalizedVal())
			}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &GVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ConstantNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &CVarNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NilNode{lineNo: currentLineNo}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &SelfNode{lineNo: currentLineNo}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BooleanNode{Val: yyDollar[1].str, lineNo: currentLineNo}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = yyDollar[2].params
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.params = append(append(yyDollar[1].params, yyDollar[3].params...), yyDollar[4].params...)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[2].params...)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = yyDollar[1].params
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.params = []*Param{}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Kind: Positional}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Default: yyDollar[2].node, Kind: Keyword}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.param = &Param{Name: strings.Trim(yyDollar[1].str, ":"), Kind: Keyword}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.param = &Param{Name: yyDollar[1].str, Default: yyDollar[3].node, Kind: Named}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.params = []*Param{yyDollar[1].param}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].param)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.kvs = []*KeyValuePair{yyDollar[1].kv}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Key: yyDollar[1].node, Value: yyDollar[3].node}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.kv = &KeyValuePair{Label: strings.TrimRight(yyDollar[1].str, ":"), Value: yyDollar[2].node}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[1].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[2].str
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			root(yylex).AddComment(Comment{Text: yyDollar[2].str, LineNo: currentLineNo})
			yyVAL.str = yyDollar[3].str
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
